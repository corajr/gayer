// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Hashtbl from "bs-platform/lib/es6/hashtbl.js";
import * as Fscreen from "fscreen";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Layer$Gayer from "./Layer.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Params$Gayer from "./Params.bs.js";
import * as Timing$Gayer from "./Timing.bs.js";
import * as Presets$Gayer from "./Presets.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as MaterialUIIcons from "bs-material-ui-icons/src/MaterialUIIcons.js";
import * as MaterialUi_Grid from "@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js";
import * as MaterialUi_List from "@jsiebern/bs-material-ui/src/MaterialUi_List.bs.js";
import * as RList$Rationale from "rationale/src/RList.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";
import * as MaterialUi_AppBar from "@jsiebern/bs-material-ui/src/MaterialUi_AppBar.bs.js";
import * as MaterialUi_Button from "@jsiebern/bs-material-ui/src/MaterialUi_Button.bs.js";
import * as MaterialUi_Drawer from "@jsiebern/bs-material-ui/src/MaterialUi_Drawer.bs.js";
import * as MaterialUi_Divider from "@jsiebern/bs-material-ui/src/MaterialUi_Divider.bs.js";
import * as MaterialUi_Toolbar from "@jsiebern/bs-material-ui/src/MaterialUi_Toolbar.bs.js";
import * as MaterialUi_ListItem from "@jsiebern/bs-material-ui/src/MaterialUi_ListItem.bs.js";
import * as MediaProvider$Gayer from "./MediaProvider.bs.js";
import * as MaterialUi_IconButton from "@jsiebern/bs-material-ui/src/MaterialUi_IconButton.bs.js";
import * as MaterialUi_Typography from "@jsiebern/bs-material-ui/src/MaterialUi_Typography.bs.js";
import * as MaterialUi_WithStyles from "@jsiebern/bs-material-ui/src/MaterialUi_WithStyles.bs.js";
import * as MaterialUi_CssBaseline from "@jsiebern/bs-material-ui/src/MaterialUi_CssBaseline.bs.js";
import * as MaterialUi_ListItemText from "@jsiebern/bs-material-ui/src/MaterialUi_ListItemText.bs.js";

var defaultState_000 = /* animationStartTime : record */[/* contents */0.0];

var defaultState_001 = /* animationLastUpdated : record */[/* contents */0.0];

var defaultState_002 = /* readPos : record */[/* contents */0];

var defaultState_003 = /* writePos : record */[/* contents */0];

var defaultState_004 = /* freqFuncParams : record */[/* contents : tuple */[
    1,
    16
  ]];

var defaultState_006 = /* params */List.nth(Presets$Gayer.presets, 0)[1];

var defaultState_010 = /* cameraInput : record */[/* contents */undefined];

var defaultState_011 = /* oscillatorBank : record */[/* contents */undefined];

var defaultState_013 = /* compressor : record */[/* contents */undefined];

var defaultState_014 = /* merger : record */[/* contents */undefined];

var defaultState_015 = /* layerRefs : record */[/* contents */Belt_MapString.empty];

var defaultState_017 = /* loadedAudio : record */[/* contents */Belt_MapString.empty];

var defaultState_018 = /* canvasRef : record */[/* contents */undefined];

var defaultState_019 = /* scaleCanvas */480.0 / Presets$Gayer.defaultSize;

var defaultState_021 = /* tickFunctions : record */[/* contents */Belt_MapString.empty];

var defaultState_022 = /* timerId : record */[/* contents */undefined];

var defaultState = /* record */[
  defaultState_000,
  defaultState_001,
  defaultState_002,
  defaultState_003,
  defaultState_004,
  /* filterInput */undefined,
  defaultState_006,
  /* presetDrawerOpen */false,
  /* mediaStream */undefined,
  /* micInput */undefined,
  defaultState_010,
  defaultState_011,
  /* filterBanks */undefined,
  defaultState_013,
  defaultState_014,
  defaultState_015,
  /* savedImages : [] */0,
  defaultState_017,
  defaultState_018,
  defaultState_019,
  /* fullscreenCanvas */false,
  defaultState_021,
  defaultState_022
];

function setCanvasRef(theRef, param) {
  param[/* state */1][/* canvasRef */18][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setLayerRef(audioCtx, param, param$1) {
  var state = param$1[/* state */1];
  var theRef = param[1];
  var layer = param[0];
  var layerKey = JSON.stringify(Layer$Gayer.EncodeLayer[/* layerContent */1](layer[/* content */0]));
  var match = layer[/* content */0];
  var exit = 0;
  if (typeof match === "number") {
    exit = 1;
  } else {
    switch (match.tag | 0) {
      case 2 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            var match$1 = state[/* mediaStream */8];
            if (match$1 !== undefined) {
              var video = Video$Gayer.attachVideoStream(theRef, Js_primitive.valFromOption(match$1));
              state[/* cameraInput */10][0] = Js_primitive.some(video);
              state[/* layerRefs */15][0] = Belt_MapString.set(state[/* layerRefs */15][0], layerKey, theRef);
              return /* () */0;
            } else {
              return /* () */0;
            }
          }
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            var url = match[0];
            state[/* layerRefs */15][0] = Belt_MapString.set(state[/* layerRefs */15][0], layerKey, theRef);
            var readyState = theRef.readyState;
            if (readyState >= 3) {
              var match$2 = Belt_MapString.get(state[/* loadedAudio */17][0], url);
              if (match$2 !== undefined) {
                return /* () */0;
              } else {
                Video$Gayer.unmute(theRef);
                var mediaElementSource = audioCtx.createMediaElementSource(theRef);
                console.log("adding element source");
                console.log(mediaElementSource);
                state[/* loadedAudio */17][0] = Belt_MapString.set(state[/* loadedAudio */17][0], url, mediaElementSource);
                return /* () */0;
              }
            } else {
              return 0;
            }
          }
      case 5 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            var source = match[0];
            state[/* layerRefs */15][0] = Belt_MapString.set(state[/* layerRefs */15][0], layerKey, theRef);
            if (typeof source === "number" || source.tag) {
              return /* () */0;
            } else {
              var url$1 = source[0];
              if (Belt_MapString.has(state[/* loadedAudio */17][0], url$1)) {
                return 0;
              } else {
                return Curry._1(param$1[/* send */3], /* LoadAudioFile */Block.__(0, [url$1]));
              }
            }
          }
      default:
        return /* () */0;
    }
  }
  if (exit === 1) {
    if (theRef == null) {
      return /* () */0;
    } else {
      state[/* layerRefs */15][0] = Belt_MapString.set(state[/* layerRefs */15][0], layerKey, theRef);
      return /* () */0;
    }
  }
  
}

function changeLayer(oldLayer, newLayer, layers) {
  var match = RList$Rationale.indexOf(oldLayer, layers);
  if (match !== undefined) {
    return RList$Rationale.update(newLayer, match, layers);
  } else {
    return layers;
  }
}

function classRecordToJs(param) {
  return {
          paper: param[/* paper */0]
        };
}

var classes = /* record */[/* paper */{
    position: "relative",
    width: "240px"
  }];

function classRecordStringsFromJs(arg) {
  return /* record */[/* paper */arg.paper];
}

var SizedDrawerDefs = /* module */[
  /* classRecordToJs */classRecordToJs,
  /* classRecordStringsFromJs */classRecordStringsFromJs,
  /* classes */classes
];

var SizedDrawer = MaterialUi_WithStyles.WithStylesSafe(SizedDrawerDefs);

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(match));
  } else {
    return /* () */0;
  }
}

function maybeMapFilterBank(f, maybeFilterBank) {
  if (maybeFilterBank !== undefined) {
    return Curry._1(f, maybeFilterBank);
  } else {
    return /* () */0;
  }
}

function connectInputs(state) {
  var match = state[/* filterBanks */12];
  var match$1 = state[/* filterInput */5];
  var match$2 = state[/* merger */14][0];
  if (match !== undefined) {
    var match$3 = match;
    if (match$3.tag) {
      if (match$1 !== undefined) {
        if (match$2 !== undefined) {
          var merger = Js_primitive.valFromOption(match$2);
          var filterInput = match$1;
          Audio$Gayer.connectFilterBank(filterInput, match$3[0], merger, 0);
          return Audio$Gayer.connectFilterBank(filterInput, match$3[1], merger, 1);
        } else {
          console.log("could not connect inputs");
          return /* () */0;
        }
      } else {
        console.log("could not connect inputs");
        return /* () */0;
      }
    } else if (match$1 !== undefined) {
      if (match$2 !== undefined) {
        var merger$1 = Js_primitive.valFromOption(match$2);
        var filterBank = match$3[0];
        Audio$Gayer.connectFilterBank(match$1, filterBank, merger$1, 0);
        filterBank[/* output */3].connect(merger$1, 0, 1);
        return /* () */0;
      } else {
        console.log("could not connect inputs");
        return /* () */0;
      }
    } else {
      console.log("could not connect inputs");
      return /* () */0;
    }
  } else {
    console.log("could not connect inputs");
    return /* () */0;
  }
}

function disconnectInputs(state) {
  var match = state[/* filterBanks */12];
  var match$1 = state[/* filterInput */5];
  var match$2 = state[/* merger */14][0];
  if (match !== undefined) {
    var match$3 = match;
    if (match$3.tag) {
      if (match$1 !== undefined) {
        if (match$2 !== undefined) {
          var merger = Js_primitive.valFromOption(match$2);
          var filterInput = match$1;
          Audio$Gayer.disconnectFilterBank(filterInput, match$3[0], merger);
          return Audio$Gayer.disconnectFilterBank(filterInput, match$3[1], merger);
        } else {
          console.log("could not disconnect inputs");
          return /* () */0;
        }
      } else {
        console.log("could not disconnect inputs");
        return /* () */0;
      }
    } else if (match$1 !== undefined && match$2 !== undefined) {
      return Audio$Gayer.disconnectFilterBank(match$1, match$3[0], Js_primitive.valFromOption(match$2));
    } else {
      console.log("could not disconnect inputs");
      return /* () */0;
    }
  } else {
    console.log("could not disconnect inputs");
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function pushParamsState(newParams) {
  var newParamsJson = encodeURIComponent(JSON.stringify(Params$Gayer.EncodeParams[/* params */0](newParams)));
  return ReasonReact.Router[/* push */0]("#" + newParamsJson);
}

function setLayers(params, newLayers) {
  return pushParamsState(/* record */[
              /* readPosDelta */params[/* readPosDelta */0],
              /* writePosDelta */params[/* writePosDelta */1],
              /* readPosOffset */params[/* readPosOffset */2],
              /* writePosOffset */params[/* writePosOffset */3],
              /* millisPerTick */params[/* millisPerTick */4],
              /* audioInputSetting */params[/* audioInputSetting */5],
              /* inputGain */params[/* inputGain */6],
              /* outputGain */params[/* outputGain */7],
              /* q */params[/* q */8],
              /* transpose */params[/* transpose */9],
              /* shouldClear */params[/* shouldClear */10],
              /* layers */newLayers
            ]);
}

function drawLayer(ctx, width, height, state, layer) {
  ctx.globalAlpha = layer[/* alpha */1];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, layer[/* compositeOperation */2]);
  Canvas$Gayer.Ctx[/* setTransform */3](ctx, layer[/* transformMatrix */4]);
  ctx.rotate(layer[/* rotation */3]);
  ctx.filter = layer[/* filters */5];
  var layerKey = JSON.stringify(Layer$Gayer.EncodeLayer[/* layerContent */1](layer[/* content */0]));
  var maybeLayerRef = Belt_MapString.get(state[/* layerRefs */15][0], layerKey);
  var match = layer[/* content */0];
  var exit = 0;
  if (typeof match === "number") {
    if (maybeLayerRef !== undefined) {
      var x = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */3] | 0, 0, width);
      ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), x, 0, 1, height);
    }
    return undefined;
  } else {
    switch (match.tag | 0) {
      case 0 : 
          ctx.fillStyle = match[0];
          ctx.fillRect(0, 0, width, height);
          return undefined;
      case 1 : 
          Canvas$Gayer.DrawCommand[/* drawCommands */5](ctx, match[0]);
          return undefined;
      case 2 : 
          var match$1 = state[/* cameraInput */10][0];
          var match$2 = match[0][/* slitscan */0];
          if (match$1 !== undefined) {
            var input = Js_primitive.valFromOption(match$1);
            if (match$2 !== undefined) {
              var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */3] | 0, 0, width);
              ctx.drawImage(input, match$2[/* x */0], 0, 1, 480, xToWrite, 0, 1, height);
            } else {
              ctx.drawImage(input, 0, 0, width, height);
            }
          }
          return undefined;
      case 3 : 
      case 4 : 
          exit = 1;
          break;
      case 5 : 
          if (maybeLayerRef !== undefined) {
            var x$1 = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */3] | 0, 0, width);
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), x$1, 0, 1, height);
          }
          return undefined;
      case 6 : 
          var classList = Curry._1(Music$Gayer.PitchSet[/* elements */19], Curry._2(Music$Gayer.PitchSet[/* diff */8], Music$Gayer.allPitches, match[0]));
          ctx.fillStyle = "black";
          var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(height);
          for(var i = 0 ,i_finish = height / 10 | 0; i <= i_finish; ++i){
            List.iter((function(i){
                return function (j) {
                  var y = Caml_int32.imul(Caml_int32.imul(i, 12) + j | 0, pixelsPerSemitone);
                  ctx.fillRect(0, y, width, pixelsPerSemitone);
                  return /* () */0;
                }
                }(i)), classList);
          }
          return undefined;
      case 7 : 
          var channel = match[0];
          var xToRead = Canvas$Gayer.wrapCoord(state[/* readPos */2][0] + state[/* params */6][/* readPosOffset */2] | 0, 0, width);
          var slice = ctx.getImageData(xToRead, 0, 1, height);
          var tmp;
          switch (channel) {
            case 0 : 
                tmp = Canvas$Gayer.rgba(127, 0, 0, 0.5);
                break;
            case 1 : 
                tmp = Canvas$Gayer.rgba(0, 127, 0, 0.5);
                break;
            case 2 : 
                tmp = Canvas$Gayer.rgba(0, 0, 127, 0.5);
                break;
            case 3 : 
                tmp = Canvas$Gayer.rgba(127, 127, 127, 0.5);
                break;
            
          }
          ctx.fillStyle = tmp;
          ctx.fillRect(xToRead, 0, 1, height);
          if (channel >= 3) {
            return /* Mono */Block.__(0, [Canvas$Gayer.imageDataToFloatArray(slice, channel)]);
          } else {
            var match$3 = Canvas$Gayer.imageDataToStereo(slice, channel, /* B */2);
            return /* Stereo */Block.__(1, [
                      match$3[0],
                      match$3[1]
                    ]);
          }
      
    }
  }
  if (exit === 1) {
    if (maybeLayerRef !== undefined) {
      ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0, width, height);
    }
    return undefined;
  }
  
}

function drawCanvas(canvasElement, width, height, state) {
  if (state[/* params */6][/* shouldClear */10]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  return List.fold_left((function (acc, layer) {
                var newMaybeValues = drawLayer(ctx, width, height, state, layer);
                if (newMaybeValues !== undefined) {
                  return newMaybeValues;
                } else {
                  return acc;
                }
              }), /* Mono */Block.__(0, [Caml_array.caml_make_vect(height, 0.0)]), state[/* params */6][/* layers */11]);
}

function getAnalysisInput(audioCtx, state, audioInput) {
  var exit = 0;
  if (typeof audioInput === "number") {
    if (audioInput === 0) {
      return /* tuple */[
              audioCtx,
              Audio$Gayer.pinkNoise(audioCtx)
            ];
    } else {
      return /* tuple */[
              audioCtx,
              state[/* micInput */9]
            ];
    }
  } else {
    switch (audioInput.tag | 0) {
      case 0 : 
      case 1 : 
          exit = 1;
          break;
      case 2 : 
          var match = state[/* oscillatorBank */11][0];
          return /* tuple */[
                  audioCtx,
                  match !== undefined ? match[/* output */3] : undefined
                ];
      
    }
  }
  if (exit === 1) {
    return /* tuple */[
            audioCtx,
            Belt_MapString.get(state[/* loadedAudio */17][0], audioInput[0])
          ];
  }
  
}

var makeAudioElt = function (url){
     var audio = document.createElement("audio");
     audio.id = "audio-elt";
     audio.src = url;
     audio.loop = true;
     audio.autoplay = true;
     console.log(audio);

     document.body.appendChild(audio);
     return audio;
     };

function sortLayers(param) {
  return List.sort((function (a, b) {
                return Caml_obj.caml_compare(a[/* content */0], b[/* content */0]);
              }), param);
}

function make($staropt$star, $staropt$star$1, $staropt$star$2, _) {
  var width = $staropt$star !== undefined ? $staropt$star : Presets$Gayer.defaultSize;
  var height = $staropt$star$1 !== undefined ? $staropt$star$1 : Presets$Gayer.defaultSize;
  var audioCtx = $staropt$star$2 !== undefined ? Js_primitive.valFromOption($staropt$star$2) : Curry._1(Audio$Gayer.makeDefaultAudioCtx, /* () */0);
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var merger = audioCtx.createChannelMerger();
              self[/* state */1][/* merger */14][0] = Js_primitive.some(merger);
              var compressor = Audio$Gayer.makeCompressor(audioCtx, Audio$Gayer.defaultCompressorValues);
              merger.connect(compressor);
              compressor.connect(audioCtx.destination);
              self[/* state */1][/* compressor */13][0] = Js_primitive.some(compressor);
              var noise = Audio$Gayer.pinkNoise(audioCtx);
              Curry._1(self[/* send */3], /* SetFilterInput */Block.__(2, [noise]));
              var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(height);
              self[/* state */1][/* freqFuncParams */4][0] = /* tuple */[
                pixelsPerSemitone,
                16
              ];
              var freqFunc = Audio$Gayer.yToFrequency(pixelsPerSemitone, 16 + self[/* state */1][/* params */6][/* transpose */9] | 0, height);
              var filterBankL = Audio$Gayer.makeFilterBank(audioCtx, height, Audio$Gayer.defaultQ, freqFunc);
              Audio$Gayer.makeFilterBank(audioCtx, height, Audio$Gayer.defaultQ, freqFunc);
              Curry._1(self[/* send */3], /* SetFilterBanks */Block.__(5, [/* MonoBank */Block.__(0, [filterBankL])]));
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match !== undefined) {
                Js_primitive.valFromOption(match).then((function (stream) {
                        Curry._1(self[/* send */3], /* SetMediaStream */Block.__(4, [stream]));
                        var audio = audioCtx.createMediaStreamSource(stream);
                        Curry._1(self[/* send */3], /* SetMicInput */Block.__(3, [audio]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* Clear */0);
              var sendTickFn = function () {
                return Curry._1(self[/* send */3], /* Tick */1);
              };
              self[/* state */1][/* tickFunctions */21][0] = Belt_MapString.set(self[/* state */1][/* tickFunctions */21][0], "master", sendTickFn);
              var animationFn = function () {
                $$Array.iter((function (f) {
                        return Curry._1(f, /* () */0);
                      }), Belt_MapString.valuesToArray(self[/* state */1][/* tickFunctions */21][0]));
                window.requestAnimationFrame(animationFn);
                return /* () */0;
              };
              Timing$Gayer.setTimer(self[/* state */1][/* timerId */22], (function () {
                      return $$Array.iter((function (f) {
                                    return Curry._1(f, /* () */0);
                                  }), Belt_MapString.valuesToArray(self[/* state */1][/* tickFunctions */21][0]));
                    }), self[/* state */1][/* params */6][/* millisPerTick */4]);
              Curry._1(self[/* onUnmount */4], (function () {
                      return Timing$Gayer.maybeClearTimer(self[/* state */1][/* timerId */22]);
                    }));
              var watcherID = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      var hash = decodeURIComponent(url[/* hash */1]);
                      var match = Json.parse(hash);
                      if (match !== undefined) {
                        var match$1 = Json_decode.optional(Params$Gayer.DecodeParams[/* params */0], Js_primitive.valFromOption(match));
                        if (match$1 !== undefined) {
                          return Curry._1(self[/* send */3], /* SetParams */Block.__(6, [match$1]));
                        } else {
                          console.log("unable to decode params");
                          return /* () */0;
                        }
                      } else {
                        console.log("Could not parse json");
                        return /* () */0;
                      }
                    }));
              Curry._1(self[/* onUnmount */4], (function () {
                      return ReasonReact.Router[/* unwatchUrl */2](watcherID);
                    }));
              var url = ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0);
              if (url[/* hash */1] === "") {
                return pushParamsState(List.nth(Presets$Gayer.presets, 0)[1]);
              } else {
                return ReasonReact.Router[/* push */0]("#" + url[/* hash */1]);
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterInput */5], newSelf[/* state */1][/* filterInput */5]) || Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterBanks */12], newSelf[/* state */1][/* filterBanks */12])) {
                disconnectInputs(oldSelf[/* state */1]);
              }
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */6][/* audioInputSetting */5], newSelf[/* state */1][/* params */6][/* audioInputSetting */5])) {
                var match = getAnalysisInput(audioCtx, newSelf[/* state */1], newSelf[/* state */1][/* params */6][/* audioInputSetting */5]);
                var audio = match[1];
                if (audio !== undefined) {
                  Curry._1(newSelf[/* send */3], /* SetFilterInput */Block.__(2, [audio]));
                }
                
              }
              var layersChanged = Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */6][/* layers */11], newSelf[/* state */1][/* params */6][/* layers */11]);
              if (layersChanged || oldSelf[/* state */1][/* params */6][/* readPosOffset */2] !== newSelf[/* state */1][/* params */6][/* readPosOffset */2] || oldSelf[/* state */1][/* params */6][/* writePosOffset */3] !== newSelf[/* state */1][/* params */6][/* readPosOffset */2]) {
                newSelf[/* state */1][/* readPos */2][0] = 0;
                newSelf[/* state */1][/* writePos */3][0] = 0;
              }
              if (oldSelf[/* state */1][/* params */6][/* q */8] !== newSelf[/* state */1][/* params */6][/* q */8] || oldSelf[/* state */1][/* params */6][/* transpose */9] !== newSelf[/* state */1][/* params */6][/* transpose */9]) {
                var match$1 = newSelf[/* state */1][/* freqFuncParams */4][0];
                var freqFunc = Audio$Gayer.yToFrequency(match$1[0], match$1[1] + newSelf[/* state */1][/* params */6][/* transpose */9] | 0, height);
                var updateFn = function (filterBank) {
                  return Audio$Gayer.updateFilterBankDefinition(filterBank, freqFunc, newSelf[/* state */1][/* params */6][/* q */8]);
                };
                var match$2 = newSelf[/* state */1][/* filterBanks */12];
                if (match$2 !== undefined) {
                  var match$3 = match$2;
                  if (match$3.tag) {
                    updateFn(match$3[0]);
                    updateFn(match$3[1]);
                  } else {
                    updateFn(match$3[0]);
                  }
                }
                
              }
              if (oldSelf[/* state */1][/* params */6][/* millisPerTick */4] !== newSelf[/* state */1][/* params */6][/* millisPerTick */4]) {
                Timing$Gayer.setTimer(newSelf[/* state */1][/* timerId */22], (function () {
                        return $$Array.iter((function (f) {
                                      return Curry._1(f, /* () */0);
                                    }), Belt_MapString.valuesToArray(newSelf[/* state */1][/* tickFunctions */21][0]));
                      }), newSelf[/* state */1][/* params */6][/* millisPerTick */4]);
              }
              if (oldSelf[/* state */1][/* fullscreenCanvas */20] !== newSelf[/* state */1][/* fullscreenCanvas */20]) {
                if (newSelf[/* state */1][/* fullscreenCanvas */20]) {
                  var match$4 = newSelf[/* state */1][/* canvasRef */18][0];
                  if (match$4 !== undefined) {
                    Fscreen.requestFullscreen(Js_primitive.valFromOption(match$4));
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                } else {
                  exitFullscreen(Fscreen);
                  return /* () */0;
                }
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              return disconnectInputs(self[/* state */1]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var partial_arg = self[/* state */1];
              var match = self[/* state */1][/* scaleCanvas */19];
              var match$1 = self[/* state */1][/* scaleCanvas */19];
              var partial_arg$1 = self[/* state */1];
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, MaterialUi_CssBaseline.make(/* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_AppBar.make(undefined, undefined, /* Sticky */1070408009, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_Toolbar.make(undefined, undefined, undefined, undefined, /* array */[
                                            ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.Menu[/* make */0](/* array */[]))])),
                                            ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, /* Title */594052472, undefined, undefined, /* array */["GAYER"]))
                                          ]))])), React.createElement("div", {
                              style: {
                                padding: "12px"
                              }
                            }, ReasonReact.element(undefined, undefined, Curry._2(SizedDrawer[/* make */6], (function (classes) {
                                        return ReasonReact.element(undefined, undefined, MaterialUi_Drawer.make(undefined, undefined, undefined, undefined, undefined, self[/* state */1][/* presetDrawerOpen */7], undefined, undefined, undefined, undefined, /* Temporary */-103274127, /* :: */[
                                                        /* Paper */Block.__(1, [classes[/* paper */0]]),
                                                        /* [] */0
                                                      ], undefined, /* array */[
                                                        React.createElement("div", {
                                                              style: {
                                                                display: "flex",
                                                                padding: "0 8px",
                                                                alignItems: "center",
                                                                justifyContent: "flex-end"
                                                              }
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.ChevronLeft[/* make */0](/* array */[]))]))),
                                                        ReasonReact.element(undefined, undefined, MaterialUi_Divider.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[])),
                                                        React.createElement("div", {
                                                              role: "button",
                                                              tabIndex: 0,
                                                              onKeyDown: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                }),
                                                              onClick: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                })
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_List.make(undefined, /* `String */[
                                                                      -976970511,
                                                                      "nav"
                                                                    ], undefined, undefined, undefined, undefined, undefined, /* array */[$$Array.map((function (param) {
                                                                              var preset = param[1];
                                                                              var name = param[0];
                                                                              return ReasonReact.element(name, undefined, MaterialUi_ListItem.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                                                return pushParamsState(preset);
                                                                                              }), undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_ListItemText.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[name]))]));
                                                                            }), $$Array.of_list(Presets$Gayer.presets))])))
                                                      ]));
                                      }), /* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, /* V24 */3, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Params$Gayer.make(self[/* state */1][/* params */6], (function (layers) {
                                                            return setLayers(self[/* state */1][/* params */6], layers);
                                                          }), (function (layer, theRef) {
                                                            return Curry._2(self[/* handle */0], (function (param, param$1) {
                                                                          return setLayerRef(audioCtx, param, param$1);
                                                                        }), /* tuple */[
                                                                        layer,
                                                                        theRef
                                                                      ]);
                                                          }), self[/* state */1][/* layerRefs */15], (function (oldLayer, newLayer) {
                                                            return setLayers(self[/* state */1][/* params */6], changeLayer(oldLayer, newLayer, self[/* state */1][/* params */6][/* layers */11]));
                                                          }), pushParamsState, (function (param) {
                                                            return getAnalysisInput(audioCtx, partial_arg, param);
                                                          }), (function (key, tickFn) {
                                                            self[/* state */1][/* tickFunctions */21][0] = Belt_MapString.set(self[/* state */1][/* tickFunctions */21][0], key, tickFn);
                                                            return /* () */0;
                                                          }), width, height, 16, /* array */[]))])),
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[
                                                React.createElement("div", {
                                                      id: "main-display",
                                                      style: {
                                                        marginBottom: "24px",
                                                        minHeight: (
                                                            match !== undefined ? height * match : height
                                                          ).toString() + "px"
                                                      }
                                                    }, React.createElement("canvas", {
                                                          ref: Curry._1(self[/* handle */0], setCanvasRef),
                                                          style: match$1 !== undefined ? ({
                                                                transform: "scale(" + (match$1.toString() + ")"),
                                                                transformOrigin: "top left"
                                                              }) : { },
                                                          height: height.toString(),
                                                          width: width.toString(),
                                                          onClick: (function (evt) {
                                                              console.log(evt);
                                                              return /* () */0;
                                                            })
                                                        }), ReasonReact.element(undefined, undefined, MediaProvider$Gayer.make(sortLayers(self[/* state */1][/* params */6][/* layers */11]), width, height, (function (layer, theRef) {
                                                                return Curry._2(self[/* handle */0], (function (param, param$1) {
                                                                              return setLayerRef(audioCtx, param, param$1);
                                                                            }), /* tuple */[
                                                                            layer,
                                                                            theRef
                                                                          ]);
                                                              }), (function (param) {
                                                                return getAnalysisInput(audioCtx, partial_arg$1, param);
                                                              }), (function (key, tickFn) {
                                                                self[/* state */1][/* tickFunctions */21][0] = Belt_MapString.set(self[/* state */1][/* tickFunctions */21][0], key, tickFn);
                                                                return /* () */0;
                                                              }), 16, /* array */[]))),
                                                React.createElement("div", undefined, React.createElement("div", {
                                                          style: {
                                                            marginBottom: "24px"
                                                          }
                                                        }, ReasonReact.element(undefined, undefined, MaterialUi_Button.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Contained */-515484397, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                    return Curry._1(self[/* send */3], /* SaveImage */3);
                                                                  }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                                                  ReasonReact.element(undefined, undefined, MaterialUIIcons.PhotoCamera[/* make */0](/* array */[])),
                                                                  "Snapshot"
                                                                ]))), $$Array.map((function (url) {
                                                            return React.createElement("img", {
                                                                        key: Hashtbl.hash(url).toString(),
                                                                        src: url
                                                                      });
                                                          }), $$Array.of_list(self[/* state */1][/* savedImages */16])))
                                              ]))
                                    ]))));
            }),
          /* initialState */(function () {
              return defaultState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */18], (function (canvas) {
                                                  return clearCanvas(canvas, width, height);
                                                }));
                                  })]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    self[/* state */1][/* readPos */2][0] = Canvas$Gayer.wrapCoord(state[/* readPos */2][0], state[/* params */6][/* readPosDelta */0], width);
                                    self[/* state */1][/* writePos */3][0] = Canvas$Gayer.wrapCoord(state[/* writePos */3][0], state[/* params */6][/* writePosDelta */1], width);
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */18], (function (canvas) {
                                                  var filterValues = drawCanvas(canvas, width, height, state);
                                                  var updateBank = function (values, filterBank) {
                                                    return Audio$Gayer.updateFilterBank(state[/* params */6][/* inputGain */6], state[/* params */6][/* outputGain */7], filterBank, values);
                                                  };
                                                  var match = self[/* state */1][/* filterBanks */12];
                                                  if (match !== undefined) {
                                                    var match$1 = match;
                                                    if (match$1.tag) {
                                                      var filterBankR = match$1[1];
                                                      var filterBankL = match$1[0];
                                                      if (filterValues.tag) {
                                                        updateBank(filterValues[0], filterBankL);
                                                        updateBank(filterValues[1], filterBankR);
                                                      } else {
                                                        var filterValues$1 = filterValues[0];
                                                        updateBank(filterValues$1, filterBankL);
                                                        updateBank(filterValues$1, filterBankR);
                                                      }
                                                    } else {
                                                      updateBank(filterValues[0], match$1[0]);
                                                    }
                                                  }
                                                  var match$2 = self[/* state */1][/* oscillatorBank */11][0];
                                                  if (match$2 !== undefined) {
                                                    return Audio$Gayer.updateBankGains(match$2, filterValues[0]);
                                                  } else {
                                                    return /* () */0;
                                                  }
                                                }));
                                  })]);
                  case 2 : 
                      var newrecord = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord[/* presetDrawerOpen */7] = !state[/* presetDrawerOpen */7], newrecord)]);
                  case 3 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = state[/* canvasRef */18][0];
                                    if (match !== undefined) {
                                      var url = Js_primitive.valFromOption(match).toDataURL();
                                      return Curry._1(self[/* send */3], /* AddSavedImage */Block.__(1, [url]));
                                    } else {
                                      return /* () */0;
                                    }
                                  })]);
                  case 4 : 
                      var newrecord$1 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$1[/* fullscreenCanvas */20] = !state[/* fullscreenCanvas */20], newrecord$1)]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var url = action[0];
                      return /* SideEffects */Block.__(1, [(function () {
                                    var elt = makeAudioElt(url);
                                    var mediaElementSource = audioCtx.createMediaElementSource(elt);
                                    state[/* loadedAudio */17][0] = Belt_MapString.set(state[/* loadedAudio */17][0], url, mediaElementSource);
                                    return /* () */0;
                                  })]);
                  case 1 : 
                      var newrecord$2 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$2[/* savedImages */16] = /* :: */[
                                    action[0],
                                    state[/* savedImages */16]
                                  ], newrecord$2)]);
                  case 2 : 
                      var newrecord$3 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$3[/* filterInput */5] = action[0], newrecord$3),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 3 : 
                      var newrecord$4 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$4[/* micInput */9] = action[0], newrecord$4)]);
                  case 4 : 
                      var newrecord$5 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$5[/* mediaStream */8] = Js_primitive.some(action[0]), newrecord$5)]);
                  case 5 : 
                      var newrecord$6 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$6[/* filterBanks */12] = action[0], newrecord$6),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 6 : 
                      var newrecord$7 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$7[/* params */6] = action[0], newrecord$7)]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var RList = 0;

export {
  RList ,
  defaultState ,
  setCanvasRef ,
  setLayerRef ,
  changeLayer ,
  SizedDrawerDefs ,
  SizedDrawer ,
  component ,
  maybeUpdateCanvas ,
  maybeMapFilterBank ,
  connectInputs ,
  disconnectInputs ,
  clearCanvas ,
  pushParamsState ,
  setLayers ,
  drawLayer ,
  drawCanvas ,
  getAnalysisInput ,
  makeAudioElt ,
  sortLayers ,
  make ,
  
}
/* defaultState Not a pure module */
