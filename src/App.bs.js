// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Hashtbl from "bs-platform/lib/es6/hashtbl.js";
import * as Fscreen from "fscreen";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Color$Gayer from "./Color.bs.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Layer$Gayer from "./Layer.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Params$Gayer from "./Params.bs.js";
import * as Timing$Gayer from "./Timing.bs.js";
import * as Presets$Gayer from "./Presets.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as MaterialUIIcons from "bs-material-ui-icons/src/MaterialUIIcons.js";
import * as MaterialUi_Grid from "@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js";
import * as MaterialUi_List from "@jsiebern/bs-material-ui/src/MaterialUi_List.bs.js";
import * as RList$Rationale from "rationale/src/RList.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";
import * as AudioGraph$Gayer from "./AudioGraph.bs.js";
import * as MaterialUi_AppBar from "@jsiebern/bs-material-ui/src/MaterialUi_AppBar.bs.js";
import * as MaterialUi_Button from "@jsiebern/bs-material-ui/src/MaterialUi_Button.bs.js";
import * as MaterialUi_Drawer from "@jsiebern/bs-material-ui/src/MaterialUi_Drawer.bs.js";
import * as MaterialUi_Divider from "@jsiebern/bs-material-ui/src/MaterialUi_Divider.bs.js";
import * as MaterialUi_Toolbar from "@jsiebern/bs-material-ui/src/MaterialUi_Toolbar.bs.js";
import * as MaterialUi_ListItem from "@jsiebern/bs-material-ui/src/MaterialUi_ListItem.bs.js";
import * as MediaProvider$Gayer from "./MediaProvider.bs.js";
import * as MaterialUi_IconButton from "@jsiebern/bs-material-ui/src/MaterialUi_IconButton.bs.js";
import * as MaterialUi_Typography from "@jsiebern/bs-material-ui/src/MaterialUi_Typography.bs.js";
import * as MaterialUi_WithStyles from "@jsiebern/bs-material-ui/src/MaterialUi_WithStyles.bs.js";
import * as MaterialUi_CssBaseline from "@jsiebern/bs-material-ui/src/MaterialUi_CssBaseline.bs.js";
import * as MaterialUi_ListItemText from "@jsiebern/bs-material-ui/src/MaterialUi_ListItemText.bs.js";

var defaultState_000 = /* animationStartTime : record */[/* contents */0.0];

var defaultState_001 = /* animationLastUpdated : record */[/* contents */0.0];

var defaultState_002 = /* readPos : record */[/* contents */0];

var defaultState_003 = /* writePos : record */[/* contents */0];

var defaultState_004 = /* freqFuncParams : record */[/* contents : tuple */[
    1,
    16
  ]];

var defaultState_006 = /* params */List.nth(Presets$Gayer.presets, 0)[1];

var defaultState_007 = /* score *//* tuple */[
  Presets$Gayer.exampleScore,
  /* record */[/* contents */0]
];

var defaultState_010 = /* audioGraph : record */[/* contents */AudioGraph$Gayer.emptyAudioGraph];

var defaultState_012 = /* cameraInput : record */[/* contents */undefined];

var defaultState_013 = /* oscillatorBank : record */[/* contents */undefined];

var defaultState_015 = /* compressor : record */[/* contents */undefined];

var defaultState_016 = /* merger : record */[/* contents */undefined];

var defaultState_017 = /* layerRefs : record */[/* contents */Belt_MapString.empty];

var defaultState_019 = /* loadedAudio : record */[/* contents */Belt_MapString.empty];

var defaultState_020 = /* canvasRef : record */[/* contents */undefined];

var defaultState_022 = /* tickFunctions : record */[/* contents */Belt_MapString.empty];

var defaultState_023 = /* timerId : record */[/* contents */undefined];

var defaultState = /* record */[
  defaultState_000,
  defaultState_001,
  defaultState_002,
  defaultState_003,
  defaultState_004,
  /* filterInput */undefined,
  defaultState_006,
  defaultState_007,
  /* presetDrawerOpen */false,
  /* mediaStream */undefined,
  defaultState_010,
  /* micInput */undefined,
  defaultState_012,
  defaultState_013,
  /* filterBanks */undefined,
  defaultState_015,
  defaultState_016,
  defaultState_017,
  /* savedImages : [] */0,
  defaultState_019,
  defaultState_020,
  /* fullscreenCanvas */false,
  defaultState_022,
  defaultState_023
];

function setCanvasRef(theRef, param) {
  var state = param[/* state */1];
  var maybeRef = (theRef == null) ? undefined : Js_primitive.some(theRef);
  state[/* canvasRef */20][0] = maybeRef;
  if (theRef == null) {
    return /* () */0;
  } else {
    state[/* layerRefs */17][0] = Belt_MapString.set(state[/* layerRefs */17][0], "root", theRef);
    return /* () */0;
  }
}

function setLayerRef(_, param, param$1) {
  var state = param$1[/* state */1];
  var theRef = param[1];
  var layer = param[0];
  var layerKey = Layer$Gayer.getLayerKey(layer);
  if (!(theRef == null)) {
    state[/* layerRefs */17][0] = Belt_MapString.set(state[/* layerRefs */17][0], layerKey, theRef);
  }
  var match = layer[/* content */0];
  if (typeof match === "number" && !(match !== 1 || (theRef == null))) {
    var match$1 = state[/* mediaStream */9];
    if (match$1 !== undefined) {
      var video = Video$Gayer.attachVideoStream(theRef, Js_primitive.valFromOption(match$1));
      state[/* cameraInput */12][0] = Js_primitive.some(video);
      state[/* layerRefs */17][0] = Belt_MapString.set(state[/* layerRefs */17][0], "webcam", theRef);
      return /* () */0;
    } else {
      return /* () */0;
    }
  } else {
    return /* () */0;
  }
}

function changeLayer(oldLayer, newLayer, layers) {
  var match = RList$Rationale.indexOf(oldLayer, layers);
  if (match !== undefined) {
    return RList$Rationale.update(newLayer, match, layers);
  } else {
    return layers;
  }
}

function classRecordToJs(param) {
  return {
          paper: param[/* paper */0]
        };
}

var classes = /* record */[/* paper */{
    position: "relative",
    width: "240px"
  }];

function classRecordStringsFromJs(arg) {
  return /* record */[/* paper */arg.paper];
}

var SizedDrawerDefs = /* module */[
  /* classRecordToJs */classRecordToJs,
  /* classRecordStringsFromJs */classRecordStringsFromJs,
  /* classes */classes
];

var SizedDrawer = MaterialUi_WithStyles.WithStylesSafe(SizedDrawerDefs);

function classRecordToJs$1(param) {
  return {
          grow: param[/* grow */0]
        };
}

var classes$1 = /* record */[/* grow */{
    flexGrow: "1"
  }];

function classRecordStringsFromJs$1(arg) {
  return /* record */[/* grow */arg.grow];
}

var GrowTitleDefs = /* module */[
  /* classRecordToJs */classRecordToJs$1,
  /* classRecordStringsFromJs */classRecordStringsFromJs$1,
  /* classes */classes$1
];

var GrowTitle = MaterialUi_WithStyles.WithStylesSafe(GrowTitleDefs);

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(match));
  } else {
    return /* () */0;
  }
}

function connectInputs(state) {
  var match = state[/* filterBanks */14];
  var match$1 = state[/* filterInput */5];
  var match$2 = state[/* merger */16][0];
  if (match !== undefined) {
    var match$3 = match;
    if (match$3.tag) {
      if (match$1 !== undefined) {
        if (match$2 !== undefined) {
          var merger = Js_primitive.valFromOption(match$2);
          var filterInput = match$1;
          Audio$Gayer.connectFilterBank(filterInput, match$3[0], merger, 0);
          return Audio$Gayer.connectFilterBank(filterInput, match$3[1], merger, 1);
        } else {
          console.log("could not connect inputs");
          return /* () */0;
        }
      } else {
        console.log("could not connect inputs");
        return /* () */0;
      }
    } else if (match$1 !== undefined) {
      if (match$2 !== undefined) {
        var merger$1 = Js_primitive.valFromOption(match$2);
        var filterBank = match$3[0];
        Audio$Gayer.connectFilterBank(match$1, filterBank, merger$1, 0);
        filterBank[/* output */3].connect(merger$1, 0, 1);
        return /* () */0;
      } else {
        console.log("could not connect inputs");
        return /* () */0;
      }
    } else {
      console.log("could not connect inputs");
      return /* () */0;
    }
  } else {
    console.log("could not connect inputs");
    return /* () */0;
  }
}

function disconnectInputs(state) {
  var match = state[/* filterBanks */14];
  var match$1 = state[/* filterInput */5];
  var match$2 = state[/* merger */16][0];
  if (match !== undefined) {
    var match$3 = match;
    if (match$3.tag) {
      if (match$1 !== undefined) {
        if (match$2 !== undefined) {
          var merger = Js_primitive.valFromOption(match$2);
          var filterInput = match$1;
          Audio$Gayer.disconnectFilterBank(filterInput, match$3[0], merger);
          return Audio$Gayer.disconnectFilterBank(filterInput, match$3[1], merger);
        } else {
          console.log("could not disconnect inputs");
          return /* () */0;
        }
      } else {
        console.log("could not disconnect inputs");
        return /* () */0;
      }
    } else if (match$1 !== undefined && match$2 !== undefined) {
      return Audio$Gayer.disconnectFilterBank(match$1, match$3[0], Js_primitive.valFromOption(match$2));
    } else {
      console.log("could not disconnect inputs");
      return /* () */0;
    }
  } else {
    console.log("could not disconnect inputs");
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function pushParamsState(newParams) {
  var newParamsJson = encodeURIComponent(JSON.stringify(Params$Gayer.EncodeParams[/* params */0](newParams)));
  return ReasonReact.Router[/* push */0]("#" + newParamsJson);
}

function getReadAndWritePos(f, param) {
  var state = param[/* state */1];
  var width = state[/* params */6][/* width */0];
  var xToRead = Canvas$Gayer.wrapCoord(state[/* readPos */2][0] + state[/* params */6][/* readPosOffset */4] | 0, 0, width);
  var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */5] | 0, 0, width);
  return Curry._2(f, xToRead, xToWrite);
}

function drawLayer(ctx, width, height, state, layer) {
  ctx.globalAlpha = layer[/* alpha */1];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, layer[/* compositeOperation */2]);
  Canvas$Gayer.Ctx[/* setTransform */3](ctx, layer[/* transformMatrix */4]);
  ctx.rotate(layer[/* rotation */3]);
  ctx.filter = layer[/* filters */5];
  var layerKey = Layer$Gayer.getLayerKey(layer);
  var match = Belt_MapString.get(state[/* tickFunctions */22][0], layerKey);
  if (match !== undefined) {
    Curry._1(match, /* () */0);
  }
  var maybeLayerRef = Belt_MapString.get(state[/* layerRefs */17][0], layerKey);
  var match$1 = layer[/* content */0];
  var maybeValues;
  if (typeof match$1 === "number") {
    switch (match$1) {
      case 0 : 
          if (maybeLayerRef !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0, width, height);
          }
          maybeValues = undefined;
          break;
      case 1 : 
          var match$2 = state[/* cameraInput */12][0];
          if (match$2 !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(match$2), 0, 0, width, height);
          }
          maybeValues = undefined;
          break;
      case 2 : 
          if (maybeLayerRef !== undefined) {
            var x = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */5] | 0, 0, width);
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), x, 0, 1, height);
          }
          maybeValues = undefined;
          break;
      case 3 : 
          if (maybeLayerRef !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0, width, height);
            maybeValues = undefined;
          } else {
            maybeValues = undefined;
          }
          break;
      case 4 : 
          if (maybeLayerRef !== undefined) {
            var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */5] | 0, 0, width);
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), xToWrite, 0, 1, height);
          }
          maybeValues = undefined;
          break;
      case 5 : 
          if (maybeLayerRef !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0);
          }
          maybeValues = undefined;
          break;
      
    }
  } else {
    switch (match$1.tag | 0) {
      case 0 : 
          ctx.fillStyle = match$1[0];
          ctx.fillRect(0, 0, width, height);
          maybeValues = undefined;
          break;
      case 1 : 
          Canvas$Gayer.DrawCommand[/* drawCommands */5](ctx, match$1[0]);
          maybeValues = undefined;
          break;
      case 5 : 
          if (maybeLayerRef !== undefined) {
            Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */5] | 0, 0, width);
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0);
          }
          maybeValues = undefined;
          break;
      case 6 : 
          var classList = Curry._1(Music$Gayer.PitchSet[/* elements */19], Curry._2(Music$Gayer.PitchSet[/* diff */8], Music$Gayer.allPitches, match$1[0]));
          ctx.fillStyle = "black";
          var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(height);
          for(var i = 0 ,i_finish = height / 10 | 0; i <= i_finish; ++i){
            List.iter((function(i){
                return function (j) {
                  var y = Caml_int32.imul(Caml_int32.imul(i, 12) + j | 0, pixelsPerSemitone);
                  ctx.fillRect(0, y, width, pixelsPerSemitone);
                  return /* () */0;
                }
                }(i)), classList);
          }
          maybeValues = undefined;
          break;
      case 7 : 
          var match$3 = match$1[0];
          if (match$3[/* encoding */4]) {
            if (maybeLayerRef !== undefined) {
              ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), match$3[/* x */0], match$3[/* y */1], match$3[/* w */2], match$3[/* h */3]);
            }
            
          }
          maybeValues = undefined;
          break;
      case 8 : 
          maybeValues = undefined;
          break;
      case 9 : 
          var readerType = match$1[0];
          var xToRead = Canvas$Gayer.wrapCoord(state[/* readPos */2][0] + state[/* params */6][/* readPosOffset */4] | 0, 0, width);
          var slice = ctx.getImageData(xToRead, 0, 1, height);
          if (readerType) {
            var channel = readerType[0];
            var tmp;
            switch (channel) {
              case 0 : 
                  tmp = Canvas$Gayer.rgba(127, 0, 0, 0.5);
                  break;
              case 1 : 
                  tmp = Canvas$Gayer.rgba(0, 127, 0, 0.5);
                  break;
              case 2 : 
                  tmp = Canvas$Gayer.rgba(0, 0, 127, 0.5);
                  break;
              case 3 : 
                  tmp = Canvas$Gayer.rgba(127, 127, 127, 0.5);
                  break;
              
            }
            ctx.fillStyle = tmp;
            ctx.fillRect(xToRead, 0, 1, height);
            if (channel >= 3) {
              maybeValues = /* Mono */Block.__(0, [Canvas$Gayer.imageDataToFloatArray(slice, channel)]);
            } else {
              var match$4 = Canvas$Gayer.imageDataToStereo(slice, channel, /* B */2);
              maybeValues = /* Stereo */Block.__(1, [
                  match$4[0],
                  match$4[1]
                ]);
            }
          } else {
            ctx.fillStyle = Canvas$Gayer.rgba(255, 255, 255, 0.5);
            ctx.fillRect(xToRead, 0, 1, height);
            var saturations = $$Array.map((function (param) {
                    return Color$Gayer.rgbToHslFloat(param[/* r */0], param[/* g */1], param[/* b */2])[1];
                  }), Canvas$Gayer.imageDataToPixels(slice));
            maybeValues = /* Mono */Block.__(0, [saturations]);
          }
          break;
      default:
        if (maybeLayerRef !== undefined) {
          ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0, width, height);
        }
        maybeValues = undefined;
    }
  }
  setTimeout((function () {
          var match = Belt_MapString.get(state[/* tickFunctions */22][0], layerKey + "preview");
          if (match !== undefined) {
            return Curry._1(match, /* () */0);
          } else {
            return /* () */0;
          }
        }), 0);
  return maybeValues;
}

function drawCanvas(canvasElement, width, height, state) {
  if (state[/* params */6][/* shouldClear */13]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  return List.fold_left((function (acc, layer) {
                var newMaybeValues = drawLayer(ctx, width, height, state, layer);
                if (newMaybeValues !== undefined) {
                  return newMaybeValues;
                } else {
                  return acc;
                }
              }), /* Mono */Block.__(0, [Caml_array.caml_make_vect(height, 0.0)]), state[/* params */6][/* layers */14]);
}

function getAnalysisInput(audioCtx, state, audioInput) {
  if (typeof audioInput === "number") {
    switch (audioInput) {
      case 0 : 
          return /* tuple */[
                  audioCtx,
                  Audio$Gayer.pinkNoise(audioCtx)
                ];
      case 1 : 
          return /* tuple */[
                  audioCtx,
                  Audio$Gayer.whiteNoise(audioCtx)
                ];
      case 2 : 
          return /* tuple */[
                  audioCtx,
                  state[/* micInput */11]
                ];
      
    }
  } else {
    switch (audioInput.tag | 0) {
      case 0 : 
          return /* tuple */[
                  audioCtx,
                  undefined
                ];
      case 1 : 
          return /* tuple */[
                  audioCtx,
                  Belt_MapString.get(state[/* loadedAudio */19][0], audioInput[0])
                ];
      case 2 : 
          var match = state[/* oscillatorBank */13][0];
          return /* tuple */[
                  audioCtx,
                  match !== undefined ? match[/* output */3] : undefined
                ];
      
    }
  }
}

var makeAudioElt = function (url){
     var audio = document.createElement("audio");
     audio.id = "audio-elt";
     audio.src = url;
     audio.loop = true;
     audio.autoplay = true;
     console.log(audio);

     document.body.appendChild(audio);
     return audio;
     };

function sortLayers(param) {
  return List.sort((function (a, b) {
                return Caml_obj.caml_compare(a[/* content */0], b[/* content */0]);
              }), param);
}

function generateNewFilterBanks(audioCtx, param) {
  var send = param[/* send */3];
  var state = param[/* state */1];
  console.log("regenerating filter banks (costly!)");
  var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(state[/* params */6][/* height */1]);
  state[/* freqFuncParams */4][0] = /* tuple */[
    pixelsPerSemitone,
    16
  ];
  var freqFunc = Audio$Gayer.yToFrequency(pixelsPerSemitone, 16 + state[/* params */6][/* transpose */11] | 0, state[/* params */6][/* height */1]);
  if (state[/* params */6][/* stereo */12]) {
    var filterBankL = Audio$Gayer.makeFilterBank(audioCtx, state[/* params */6][/* height */1], state[/* params */6][/* q */10], freqFunc);
    var filterBankR = Audio$Gayer.makeFilterBank(audioCtx, state[/* params */6][/* height */1], state[/* params */6][/* q */10], freqFunc);
    return Curry._1(send, /* SetFilterBanks */Block.__(6, [/* StereoBanks */Block.__(1, [
                      filterBankL,
                      filterBankR
                    ])]));
  } else {
    var filterBank = Audio$Gayer.makeFilterBank(audioCtx, state[/* params */6][/* height */1], state[/* params */6][/* q */10], freqFunc);
    return Curry._1(send, /* SetFilterBanks */Block.__(6, [/* MonoBank */Block.__(0, [filterBank])]));
  }
}

function updateBank(param, values, filterBank) {
  var state = param[/* state */1];
  return Audio$Gayer.updateFilterBank(state[/* params */6][/* inputGain */8], state[/* params */6][/* outputGain */9], filterBank, values);
}

function saveTick(param, onUnmount, key, tickFn) {
  var state = param[/* state */1];
  state[/* tickFunctions */22][0] = Belt_MapString.set(state[/* tickFunctions */22][0], key, tickFn);
  return Curry._1(onUnmount, (function () {
                state[/* tickFunctions */22][0] = Belt_MapString.remove(state[/* tickFunctions */22][0], key);
                return /* () */0;
              }));
}

function make($staropt$star, _) {
  var audioCtx = $staropt$star !== undefined ? Js_primitive.valFromOption($staropt$star) : Curry._1(Audio$Gayer.makeDefaultAudioCtx, /* () */0);
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var merger = audioCtx.createChannelMerger();
              self[/* state */1][/* merger */16][0] = Js_primitive.some(merger);
              var compressor = Audio$Gayer.makeCompressor(audioCtx, Audio$Gayer.defaultCompressorValues);
              self[/* state */1][/* compressor */15][0] = Js_primitive.some(compressor);
              var noise = Audio$Gayer.pinkNoise(audioCtx);
              Curry._1(self[/* send */3], /* SetFilterInput */Block.__(3, [noise]));
              self[/* state */1][/* audioGraph */10][0] = AudioGraph$Gayer.updateConnections(AudioGraph$Gayer.addEdge(/* tuple */[
                        "compressor",
                        "sink",
                        0,
                        0
                      ], AudioGraph$Gayer.addEdge(/* tuple */[
                            "merger",
                            "compressor",
                            0,
                            0
                          ], AudioGraph$Gayer.addNode(/* tuple */[
                                "sink",
                                audioCtx.destination
                              ], AudioGraph$Gayer.addNode(/* tuple */[
                                    "compressor",
                                    compressor
                                  ], AudioGraph$Gayer.addNode(/* tuple */[
                                        "merger",
                                        merger
                                      ], self[/* state */1][/* audioGraph */10][0]))))));
              generateNewFilterBanks(audioCtx, self);
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match !== undefined) {
                Js_primitive.valFromOption(match).then((function (stream) {
                        Curry._1(self[/* send */3], /* SetMediaStream */Block.__(5, [stream]));
                        var audio = audioCtx.createMediaStreamSource(stream);
                        Curry._1(self[/* send */3], /* SetMicInput */Block.__(4, [audio]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* Clear */0);
              Timing$Gayer.setTimer(self[/* state */1][/* timerId */23], (function () {
                      return Curry._1(self[/* send */3], /* Tick */1);
                    }), self[/* state */1][/* params */6][/* millisPerTick */6]);
              Curry._1(self[/* onUnmount */4], (function () {
                      return Timing$Gayer.maybeClearTimer(self[/* state */1][/* timerId */23]);
                    }));
              var watcherID = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      var hash = decodeURIComponent(url[/* hash */1]);
                      var match = Json.parse(hash);
                      if (match !== undefined) {
                        var match$1 = Json_decode.optional(Params$Gayer.DecodeParams[/* params */0], Js_primitive.valFromOption(match));
                        if (match$1 !== undefined) {
                          return Curry._1(self[/* send */3], /* SetParams */Block.__(9, [match$1]));
                        } else {
                          console.log("unable to decode params");
                          return /* () */0;
                        }
                      } else {
                        console.log("Could not parse json");
                        return /* () */0;
                      }
                    }));
              Curry._1(self[/* onUnmount */4], (function () {
                      return ReasonReact.Router[/* unwatchUrl */2](watcherID);
                    }));
              var url = ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0);
              if (url[/* hash */1] === "") {
                return pushParamsState(List.nth(Presets$Gayer.presets, 0)[1]);
              } else {
                return ReasonReact.Router[/* push */0]("#" + url[/* hash */1]);
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterInput */5], newSelf[/* state */1][/* filterInput */5]) || Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterBanks */14], newSelf[/* state */1][/* filterBanks */14])) {
                disconnectInputs(oldSelf[/* state */1]);
              }
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */6][/* audioInputSetting */7], newSelf[/* state */1][/* params */6][/* audioInputSetting */7])) {
                var match = getAnalysisInput(audioCtx, newSelf[/* state */1], newSelf[/* state */1][/* params */6][/* audioInputSetting */7]);
                var audio = match[1];
                if (audio !== undefined) {
                  Curry._1(newSelf[/* send */3], /* SetFilterInput */Block.__(3, [audio]));
                }
                
              }
              var layersChanged = Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */6][/* layers */14], newSelf[/* state */1][/* params */6][/* layers */14]);
              if (layersChanged || oldSelf[/* state */1][/* params */6][/* readPosOffset */4] !== newSelf[/* state */1][/* params */6][/* readPosOffset */4] || oldSelf[/* state */1][/* params */6][/* writePosOffset */5] !== newSelf[/* state */1][/* params */6][/* readPosOffset */4]) {
                newSelf[/* state */1][/* readPos */2][0] = 0;
                newSelf[/* state */1][/* writePos */3][0] = 0;
              }
              if (oldSelf[/* state */1][/* params */6][/* q */10] !== newSelf[/* state */1][/* params */6][/* q */10] || oldSelf[/* state */1][/* params */6][/* transpose */11] !== newSelf[/* state */1][/* params */6][/* transpose */11] || oldSelf[/* state */1][/* params */6][/* stereo */12] !== newSelf[/* state */1][/* params */6][/* stereo */12] || oldSelf[/* state */1][/* params */6][/* height */1] !== newSelf[/* state */1][/* params */6][/* height */1]) {
                generateNewFilterBanks(audioCtx, newSelf);
              }
              if (oldSelf[/* state */1][/* params */6][/* millisPerTick */6] !== newSelf[/* state */1][/* params */6][/* millisPerTick */6]) {
                Timing$Gayer.setTimer(newSelf[/* state */1][/* timerId */23], (function () {
                        return Curry._1(newSelf[/* send */3], /* Tick */1);
                      }), newSelf[/* state */1][/* params */6][/* millisPerTick */6]);
              }
              if (oldSelf[/* state */1][/* fullscreenCanvas */21] !== newSelf[/* state */1][/* fullscreenCanvas */21]) {
                if (newSelf[/* state */1][/* fullscreenCanvas */21]) {
                  var match$1 = newSelf[/* state */1][/* canvasRef */20][0];
                  if (match$1 !== undefined) {
                    Fscreen.requestFullscreen(Js_primitive.valFromOption(match$1));
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                } else {
                  exitFullscreen(Fscreen);
                  return /* () */0;
                }
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              return disconnectInputs(self[/* state */1]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = Belt_Option.isSome(self[/* state */1][/* score */7]);
              var partial_arg = self[/* state */1];
              var partial_arg$1 = self[/* state */1];
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, MaterialUi_CssBaseline.make(/* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_AppBar.make(undefined, undefined, /* Sticky */1070408009, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_Toolbar.make(undefined, undefined, undefined, undefined, /* array */[
                                            ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.Menu[/* make */0](/* array */[]))])),
                                            ReasonReact.element(undefined, undefined, Curry._2(GrowTitle[/* make */6], (function (classes) {
                                                        return ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, /* Title */594052472, /* :: */[
                                                                        /* Title */Block.__(6, [classes[/* grow */0]]),
                                                                        /* [] */0
                                                                      ], undefined, /* array */["GAYER"]));
                                                      }), /* array */[])),
                                            match ? React.createElement("div", undefined, ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                              return Curry._1(self[/* send */3], /* AdjustScoreEventIndex */Block.__(1, [-1]));
                                                            }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.SkipPrevious[/* make */0](/* array */[]))])), ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                              return Curry._1(self[/* send */3], /* AdjustScoreEventIndex */Block.__(1, [1]));
                                                            }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.SkipNext[/* make */0](/* array */[]))]))) : null
                                          ]))])), React.createElement("div", {
                              style: {
                                padding: "12px"
                              }
                            }, ReasonReact.element(undefined, undefined, Curry._2(SizedDrawer[/* make */6], (function (classes) {
                                        return ReasonReact.element(undefined, undefined, MaterialUi_Drawer.make(undefined, undefined, undefined, undefined, undefined, self[/* state */1][/* presetDrawerOpen */8], undefined, undefined, undefined, undefined, /* Temporary */-103274127, /* :: */[
                                                        /* Paper */Block.__(1, [classes[/* paper */0]]),
                                                        /* [] */0
                                                      ], undefined, /* array */[
                                                        React.createElement("div", {
                                                              style: {
                                                                display: "flex",
                                                                padding: "0 8px",
                                                                alignItems: "center",
                                                                justifyContent: "flex-end"
                                                              }
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.ChevronLeft[/* make */0](/* array */[]))]))),
                                                        ReasonReact.element(undefined, undefined, MaterialUi_Divider.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[])),
                                                        React.createElement("div", {
                                                              role: "button",
                                                              tabIndex: 0,
                                                              onKeyDown: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                }),
                                                              onClick: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                })
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_List.make(undefined, /* `String */[
                                                                      -976970511,
                                                                      "nav"
                                                                    ], undefined, undefined, undefined, undefined, undefined, /* array */[$$Array.map((function (param) {
                                                                              var preset = param[1];
                                                                              var name = param[0];
                                                                              return ReasonReact.element(name, undefined, MaterialUi_ListItem.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                                                return pushParamsState(preset);
                                                                                              }), undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_ListItemText.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[name]))]));
                                                                            }), $$Array.of_list(Presets$Gayer.presets))])))
                                                      ]));
                                      }), /* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, /* V24 */3, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Params$Gayer.make(self[/* state */1][/* params */6], (function (layers) {
                                                            return Curry._1(self[/* send */3], /* SetLayers */Block.__(8, [layers]));
                                                          }), (function (layer, theRef) {
                                                            return Curry._2(self[/* handle */0], (function (param, param$1) {
                                                                          return setLayerRef(audioCtx, param, param$1);
                                                                        }), /* tuple */[
                                                                        layer,
                                                                        theRef
                                                                      ]);
                                                          }), self[/* state */1][/* layerRefs */17], (function (oldLayer, newLayer) {
                                                            return Curry._1(self[/* send */3], /* ChangeLayer */Block.__(7, [
                                                                          oldLayer,
                                                                          newLayer
                                                                        ]));
                                                          }), pushParamsState, (function (param) {
                                                            return getAnalysisInput(audioCtx, partial_arg, param);
                                                          }), (function (param, param$1, param$2) {
                                                            return saveTick(self, param, param$1, param$2);
                                                          }), 16, /* array */[]))])),
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[
                                                React.createElement("div", {
                                                      id: "main-display",
                                                      style: {
                                                        marginBottom: "24px",
                                                        minHeight: "480px",
                                                        position: "relative"
                                                      }
                                                    }, ReasonReact.element(undefined, undefined, MediaProvider$Gayer.make(sortLayers(self[/* state */1][/* params */6][/* layers */14]), self[/* state */1][/* params */6][/* width */0], self[/* state */1][/* params */6][/* height */1], (function (layer, theRef) {
                                                                return Curry._2(self[/* handle */0], (function (param, param$1) {
                                                                              return setLayerRef(audioCtx, param, param$1);
                                                                            }), /* tuple */[
                                                                            layer,
                                                                            theRef
                                                                          ]);
                                                              }), (function (param) {
                                                                return getAnalysisInput(audioCtx, partial_arg$1, param);
                                                              }), self[/* state */1][/* audioGraph */10], audioCtx, self[/* state */1][/* layerRefs */17], (function (param, param$1, param$2) {
                                                                return saveTick(self, param, param$1, param$2);
                                                              }), Curry._1(self[/* handle */0], getReadAndWritePos), 16, /* array */[])), React.createElement("canvas", {
                                                          ref: Curry._1(self[/* handle */0], setCanvasRef),
                                                          style: {
                                                            transform: "scale(" + ((480.0 / self[/* state */1][/* params */6][/* height */1]).toString() + ")"),
                                                            transformOrigin: "top left",
                                                            imageRendering: "crisp-edges"
                                                          },
                                                          height: self[/* state */1][/* params */6][/* height */1].toString(),
                                                          width: self[/* state */1][/* params */6][/* width */0].toString()
                                                        })),
                                                React.createElement("div", undefined, React.createElement("div", {
                                                          style: {
                                                            marginBottom: "24px"
                                                          }
                                                        }, ReasonReact.element(undefined, undefined, MaterialUi_Button.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Contained */-515484397, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                    return Curry._1(self[/* send */3], /* SaveImage */3);
                                                                  }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                                                  ReasonReact.element(undefined, undefined, MaterialUIIcons.PhotoCamera[/* make */0](/* array */[])),
                                                                  "Snapshot"
                                                                ]))), $$Array.map((function (url) {
                                                            return React.createElement("img", {
                                                                        key: Hashtbl.hash(url).toString(),
                                                                        src: url
                                                                      });
                                                          }), $$Array.of_list(self[/* state */1][/* savedImages */18])))
                                              ]))
                                    ]))));
            }),
          /* initialState */(function () {
              return defaultState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */20], (function (canvas) {
                                                  return clearCanvas(canvas, self[/* state */1][/* params */6][/* width */0], self[/* state */1][/* params */6][/* height */1]);
                                                }));
                                  })]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    self[/* state */1][/* readPos */2][0] = Canvas$Gayer.wrapCoord(self[/* state */1][/* readPos */2][0], self[/* state */1][/* params */6][/* readPosDelta */2], self[/* state */1][/* params */6][/* width */0]);
                                    self[/* state */1][/* writePos */3][0] = Canvas$Gayer.wrapCoord(self[/* state */1][/* writePos */3][0], self[/* state */1][/* params */6][/* writePosDelta */3], self[/* state */1][/* params */6][/* width */0]);
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */20], (function (canvas) {
                                                  var filterValues = drawCanvas(canvas, self[/* state */1][/* params */6][/* width */0], self[/* state */1][/* params */6][/* height */1], self[/* state */1]);
                                                  var match = self[/* state */1][/* filterBanks */14];
                                                  if (match !== undefined) {
                                                    var match$1 = match;
                                                    if (match$1.tag) {
                                                      var filterBankR = match$1[1];
                                                      var filterBankL = match$1[0];
                                                      if (filterValues.tag) {
                                                        updateBank(self, filterValues[0], filterBankL);
                                                        updateBank(self, filterValues[1], filterBankR);
                                                      } else {
                                                        var filterValues$1 = filterValues[0];
                                                        updateBank(self, filterValues$1, filterBankL);
                                                        updateBank(self, filterValues$1, filterBankR);
                                                      }
                                                    } else {
                                                      updateBank(self, filterValues[0], match$1[0]);
                                                    }
                                                  }
                                                  var match$2 = self[/* state */1][/* oscillatorBank */13][0];
                                                  if (match$2 !== undefined) {
                                                    return Audio$Gayer.updateBankGains(match$2, filterValues[0]);
                                                  } else {
                                                    return /* () */0;
                                                  }
                                                }));
                                  })]);
                  case 2 : 
                      var newrecord = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord[/* presetDrawerOpen */8] = !state[/* presetDrawerOpen */8], newrecord)]);
                  case 3 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = state[/* canvasRef */20][0];
                                    if (match !== undefined) {
                                      var url = Js_primitive.valFromOption(match).toDataURL();
                                      return Curry._1(self[/* send */3], /* AddSavedImage */Block.__(2, [url]));
                                    } else {
                                      return /* () */0;
                                    }
                                  })]);
                  case 4 : 
                      var newrecord$1 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$1[/* fullscreenCanvas */21] = !state[/* fullscreenCanvas */21], newrecord$1)]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* NoUpdate */0;
                  case 1 : 
                      var i = action[0];
                      return /* SideEffects */Block.__(1, [(function () {
                                    var match = state[/* score */7];
                                    if (match !== undefined) {
                                      var match$1 = match;
                                      var eventIndexRef = match$1[1];
                                      var events = match$1[0][/* events */0];
                                      eventIndexRef[0] = Canvas$Gayer.clamp(0, events.length - 1 | 0, eventIndexRef[0] + i | 0);
                                      var eventIndex = eventIndexRef[0];
                                      pushParamsState(Caml_array.caml_array_get(events, eventIndex)[/* params */0]);
                                      console.log("Adjusting score index; score now at " + (String(eventIndex) + ""));
                                      return /* () */0;
                                    } else {
                                      return /* () */0;
                                    }
                                  })]);
                  case 2 : 
                      var newrecord$2 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$2[/* savedImages */18] = /* :: */[
                                    action[0],
                                    state[/* savedImages */18]
                                  ], newrecord$2)]);
                  case 3 : 
                      var newrecord$3 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$3[/* filterInput */5] = action[0], newrecord$3),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 4 : 
                      var newrecord$4 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$4[/* micInput */11] = action[0], newrecord$4)]);
                  case 5 : 
                      var newrecord$5 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$5[/* mediaStream */9] = Js_primitive.some(action[0]), newrecord$5)]);
                  case 6 : 
                      var newrecord$6 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$6[/* filterBanks */14] = action[0], newrecord$6),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 7 : 
                      var newLayer = action[1];
                      var oldLayer = action[0];
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var init = self[/* state */1][/* params */6];
                                    return pushParamsState(/* record */[
                                                /* width */init[/* width */0],
                                                /* height */init[/* height */1],
                                                /* readPosDelta */init[/* readPosDelta */2],
                                                /* writePosDelta */init[/* writePosDelta */3],
                                                /* readPosOffset */init[/* readPosOffset */4],
                                                /* writePosOffset */init[/* writePosOffset */5],
                                                /* millisPerTick */init[/* millisPerTick */6],
                                                /* audioInputSetting */init[/* audioInputSetting */7],
                                                /* inputGain */init[/* inputGain */8],
                                                /* outputGain */init[/* outputGain */9],
                                                /* q */init[/* q */10],
                                                /* transpose */init[/* transpose */11],
                                                /* stereo */init[/* stereo */12],
                                                /* shouldClear */init[/* shouldClear */13],
                                                /* layers */changeLayer(oldLayer, newLayer, self[/* state */1][/* params */6][/* layers */14])
                                              ]);
                                  })]);
                  case 8 : 
                      var layers = action[0];
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var init = self[/* state */1][/* params */6];
                                    return pushParamsState(/* record */[
                                                /* width */init[/* width */0],
                                                /* height */init[/* height */1],
                                                /* readPosDelta */init[/* readPosDelta */2],
                                                /* writePosDelta */init[/* writePosDelta */3],
                                                /* readPosOffset */init[/* readPosOffset */4],
                                                /* writePosOffset */init[/* writePosOffset */5],
                                                /* millisPerTick */init[/* millisPerTick */6],
                                                /* audioInputSetting */init[/* audioInputSetting */7],
                                                /* inputGain */init[/* inputGain */8],
                                                /* outputGain */init[/* outputGain */9],
                                                /* q */init[/* q */10],
                                                /* transpose */init[/* transpose */11],
                                                /* stereo */init[/* stereo */12],
                                                /* shouldClear */init[/* shouldClear */13],
                                                /* layers */layers
                                              ]);
                                  })]);
                  case 9 : 
                      var newrecord$7 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$7[/* params */6] = action[0], newrecord$7)]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var RList = 0;

export {
  RList ,
  defaultState ,
  setCanvasRef ,
  setLayerRef ,
  changeLayer ,
  SizedDrawerDefs ,
  SizedDrawer ,
  GrowTitleDefs ,
  GrowTitle ,
  component ,
  maybeUpdateCanvas ,
  connectInputs ,
  disconnectInputs ,
  clearCanvas ,
  pushParamsState ,
  getReadAndWritePos ,
  drawLayer ,
  drawCanvas ,
  getAnalysisInput ,
  makeAudioElt ,
  sortLayers ,
  generateNewFilterBanks ,
  updateBank ,
  saveTick ,
  make ,
  
}
/* defaultState Not a pure module */
