// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Params$Gayer from "./Params.bs.js";
import * as Presets$Gayer from "./Presets.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as MaterialUIIcons from "bs-material-ui-icons/src/MaterialUIIcons.js";
import * as MaterialUi_Grid from "@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js";
import * as MaterialUi_List from "@jsiebern/bs-material-ui/src/MaterialUi_List.bs.js";
import * as RList$Rationale from "rationale/src/RList.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";
import * as MaterialUi_AppBar from "@jsiebern/bs-material-ui/src/MaterialUi_AppBar.bs.js";
import * as MaterialUi_Drawer from "@jsiebern/bs-material-ui/src/MaterialUi_Drawer.bs.js";
import * as MaterialUi_Divider from "@jsiebern/bs-material-ui/src/MaterialUi_Divider.bs.js";
import * as MaterialUi_Toolbar from "@jsiebern/bs-material-ui/src/MaterialUi_Toolbar.bs.js";
import * as MaterialUi_ListItem from "@jsiebern/bs-material-ui/src/MaterialUi_ListItem.bs.js";
import * as MaterialUi_IconButton from "@jsiebern/bs-material-ui/src/MaterialUi_IconButton.bs.js";
import * as MaterialUi_Typography from "@jsiebern/bs-material-ui/src/MaterialUi_Typography.bs.js";
import * as MaterialUi_WithStyles from "@jsiebern/bs-material-ui/src/MaterialUi_WithStyles.bs.js";
import * as MaterialUi_CssBaseline from "@jsiebern/bs-material-ui/src/MaterialUi_CssBaseline.bs.js";
import * as MaterialUi_ListItemText from "@jsiebern/bs-material-ui/src/MaterialUi_ListItemText.bs.js";

var defaultState_000 = /* readPos : record */[/* contents */0];

var defaultState_001 = /* writePos : record */[/* contents */0];

var defaultState_004 = /* params */List.nth(Presets$Gayer.presets, 0)[1];

var defaultState_008 = /* cameraInput : record */[/* contents */undefined];

var defaultState_010 = /* compressor : record */[/* contents */undefined];

var defaultState_011 = /* analysisCanvasRef : record */[/* contents */undefined];

var defaultState_012 = /* loadedImages : record */[/* contents */Belt_MapString.empty];

var defaultState_013 = /* loadedAudio : record */[/* contents */Belt_MapString.empty];

var defaultState_014 = /* canvasRef : record */[/* contents */undefined];

var defaultState_016 = /* timerId : record */[/* contents */undefined];

var defaultState = /* record */[
  defaultState_000,
  defaultState_001,
  /* filterInput */undefined,
  /* visualInput */undefined,
  defaultState_004,
  /* presetDrawerOpen */false,
  /* mediaStream */undefined,
  /* micInput */undefined,
  defaultState_008,
  /* filterBank */undefined,
  defaultState_010,
  defaultState_011,
  defaultState_012,
  defaultState_013,
  defaultState_014,
  /* scaleCanvas */undefined,
  defaultState_016
];

function setCanvasRef(theRef, param) {
  param[/* state */1][/* canvasRef */14][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setAnalysisCanvasRef(theRef, param) {
  param[/* state */1][/* analysisCanvasRef */11][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setLayerRef(param, param$1) {
  var state = param$1[/* state */1];
  var theRef = param[1];
  var maybeRef = (theRef == null) ? undefined : Js_primitive.some(theRef);
  var match = param[0][/* content */0];
  switch (match.tag | 0) {
    case 1 : 
        if (theRef == null) {
          return /* () */0;
        } else {
          var match$1 = state[/* mediaStream */6];
          if (match$1 !== undefined) {
            var video = Video$Gayer.attachVideoStream(theRef, Js_primitive.valFromOption(match$1));
            state[/* cameraInput */8][0] = Js_primitive.some(video);
            return /* () */0;
          } else {
            return /* () */0;
          }
        }
    case 2 : 
        if (theRef == null) {
          return /* () */0;
        } else {
          state[/* loadedImages */12][0] = Belt_MapString.set(state[/* loadedImages */12][0], match[0], theRef);
          return /* () */0;
        }
    case 3 : 
        if (theRef == null) {
          return /* () */0;
        } else {
          var source = match[0];
          state[/* analysisCanvasRef */11][0] = maybeRef;
          if (typeof source === "number") {
            return /* () */0;
          } else {
            var url = source[0];
            if (Belt_MapString.has(state[/* loadedAudio */13][0], url)) {
              return 0;
            } else {
              return Curry._1(param$1[/* send */3], /* LoadAudioFile */Block.__(1, [url]));
            }
          }
        }
    default:
      return /* () */0;
  }
}

function changeLayer(oldLayer, newLayer, layers) {
  var match = RList$Rationale.indexOf(oldLayer, layers);
  if (match !== undefined) {
    return RList$Rationale.update(newLayer, match, layers);
  } else {
    return layers;
  }
}

function classRecordToJs(param) {
  return {
          paper: param[/* paper */0]
        };
}

var classes = /* record */[/* paper */{
    position: "relative",
    width: "240px"
  }];

function classRecordStringsFromJs(arg) {
  return /* record */[/* paper */arg.paper];
}

var SizedDrawerDefs = /* module */[
  /* classRecordToJs */classRecordToJs,
  /* classRecordStringsFromJs */classRecordStringsFromJs,
  /* classes */classes
];

var SizedDrawer = MaterialUi_WithStyles.WithStylesSafe(SizedDrawerDefs);

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(match));
  } else {
    return /* () */0;
  }
}

function maybeMapFilterBank(f, maybeFilterBank) {
  if (maybeFilterBank !== undefined) {
    return Curry._1(f, maybeFilterBank);
  } else {
    return /* () */0;
  }
}

function connectInputs(state) {
  var match = state[/* filterBank */9];
  var match$1 = state[/* filterInput */2];
  var match$2 = state[/* compressor */10][0];
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
    return Audio$Gayer.connectFilterBank(match$1, match, Js_primitive.valFromOption(match$2));
  } else {
    console.log("could not connect inputs");
    return /* () */0;
  }
}

function disconnectInputs(state) {
  var match = state[/* filterBank */9];
  var match$1 = state[/* filterInput */2];
  var match$2 = state[/* compressor */10][0];
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
    return Audio$Gayer.disconnectFilterBank(match$1, match, Js_primitive.valFromOption(match$2));
  } else {
    console.log("could not disconnect inputs");
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function pushParamsState(newParams) {
  var newParamsJson = JSON.stringify(Params$Gayer.EncodeParams[/* params */0](newParams));
  return ReasonReact.Router[/* push */0]("#" + newParamsJson);
}

function drawLayer(ctx, width, height, state, layer) {
  ctx.globalAlpha = layer[/* alpha */1];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, layer[/* compositeOperation */2]);
  Canvas$Gayer.Ctx[/* setTransform */1](ctx, layer[/* transformMatrix */3]);
  var match = layer[/* content */0];
  switch (match.tag | 0) {
    case 0 : 
        ctx.fillStyle = match[0];
        ctx.fillRect(0, 0, width, height);
        return undefined;
    case 1 : 
        var match$1 = state[/* cameraInput */8][0];
        var match$2 = match[0][/* slitscan */0];
        if (match$1 !== undefined) {
          var input = Js_primitive.valFromOption(match$1);
          if (match$2 !== undefined) {
            var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */1][0] + state[/* params */4][/* writePosOffset */2] | 0, 0, width);
            ctx.drawImage(input, match$2[/* x */0], 0, 1, 480, xToWrite, 0, 1, height);
          } else {
            ctx.drawImage(input, 0, 0, width, height);
          }
        }
        return undefined;
    case 2 : 
        var match$3 = Belt_MapString.get(state[/* loadedImages */12][0], match[0]);
        if (match$3 !== undefined) {
          ctx.drawImage(Js_primitive.valFromOption(match$3), 0, 0, width, height);
        }
        return undefined;
    case 3 : 
        var match$4 = state[/* analysisCanvasRef */11][0];
        if (match$4 !== undefined) {
          var x = Canvas$Gayer.wrapCoord(state[/* writePos */1][0] + state[/* params */4][/* writePosOffset */2] | 0, 0, width);
          ctx.drawImage(Js_primitive.valFromOption(match$4), x, 0);
        }
        return undefined;
    case 4 : 
        var classList = Curry._1(Music$Gayer.PitchSet[/* elements */19], Curry._2(Music$Gayer.PitchSet[/* diff */8], Music$Gayer.allPitches, match[0]));
        ctx.fillStyle = "black";
        var binsPerSemitone = height / 120 | 0;
        for(var i = 0 ,i_finish = height / 10 | 0; i <= i_finish; ++i){
          List.iter((function(i){
              return function (j) {
                var y = Caml_int32.imul(Caml_int32.imul(i, 12) + j | 0, binsPerSemitone);
                ctx.fillRect(0, y, width, binsPerSemitone);
                return /* () */0;
              }
              }(i)), classList);
        }
        return undefined;
    case 5 : 
        var channel = match[0];
        var slice = ctx.getImageData(state[/* readPos */0][0], 0, 1, height);
        var tmp;
        switch (channel) {
          case 0 : 
              tmp = "red";
              break;
          case 1 : 
              tmp = "green";
              break;
          case 2 : 
              tmp = "blue";
              break;
          case 3 : 
              tmp = "white";
              break;
          
        }
        ctx.fillStyle = tmp;
        ctx.fillRect(state[/* readPos */0][0], 0, 1, height);
        return Canvas$Gayer.imageDataToFloatArray(slice, channel);
    
  }
}

function drawCanvas(canvasElement, width, height, state) {
  if (state[/* params */4][/* shouldClear */8]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  return List.fold_left((function (values, layer) {
                var newMaybeValues = drawLayer(ctx, width, height, state, layer);
                if (newMaybeValues !== undefined) {
                  return newMaybeValues;
                } else {
                  return values;
                }
              }), Caml_array.caml_make_vect(height, 0.0), state[/* params */4][/* layers */9]);
}

function getAnalysisInput(audioCtx, state, audioInput) {
  if (typeof audioInput === "number") {
    if (audioInput !== 0) {
      return /* tuple */[
              audioCtx,
              state[/* micInput */7]
            ];
    } else {
      return /* tuple */[
              audioCtx,
              Audio$Gayer.pinkNoise(audioCtx)
            ];
    }
  } else {
    return /* tuple */[
            audioCtx,
            Belt_MapString.get(state[/* loadedAudio */13][0], audioInput[0])
          ];
  }
}

var makeAudioElt = function (url){
     var audio = document.createElement("audio");
     audio.id = "audio-elt";
     audio.src = url;
     audio.loop = true;
     audio.autoplay = true;
     console.log(audio);

     document.body.appendChild(audio);
     return audio;
     };

function make($staropt$star, $staropt$star$1, $staropt$star$2, _) {
  var width = $staropt$star !== undefined ? $staropt$star : 120;
  var height = $staropt$star$1 !== undefined ? $staropt$star$1 : 120;
  var audioCtx = $staropt$star$2 !== undefined ? Js_primitive.valFromOption($staropt$star$2) : Curry._1(Audio$Gayer.makeDefaultAudioCtx, /* () */0);
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var compressor = Audio$Gayer.makeCompressor(audioCtx, Audio$Gayer.defaultCompressorValues);
              compressor.connect(audioCtx.destination);
              self[/* state */1][/* compressor */10][0] = Js_primitive.some(compressor);
              var noise = Audio$Gayer.pinkNoise(audioCtx);
              Curry._1(self[/* send */3], /* SetFilterInput */Block.__(2, [noise]));
              var filterBank = Audio$Gayer.makeFilterBank(audioCtx, height, Audio$Gayer.defaultQ, Audio$Gayer.yToFrequency(height / 120 | 0, 16 + self[/* state */1][/* params */4][/* transpose */7] | 0));
              Curry._1(self[/* send */3], /* SetFilterBank */Block.__(5, [filterBank]));
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match !== undefined) {
                Js_primitive.valFromOption(match).then((function (stream) {
                        Curry._1(self[/* send */3], /* SetMediaStream */Block.__(4, [stream]));
                        var audio = audioCtx.createMediaStreamSource(stream);
                        Curry._1(self[/* send */3], /* SetMicInput */Block.__(3, [audio]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* Clear */0);
              self[/* state */1][/* timerId */16][0] = Js_primitive.some(setInterval((function () {
                          return Curry._1(self[/* send */3], /* Tick */1);
                        }), 20));
              var watcherID = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      var hash = decodeURIComponent(url[/* hash */1]);
                      var match = Json.parse(hash);
                      if (match !== undefined) {
                        var match$1 = Json_decode.optional(Params$Gayer.DecodeParams[/* params */0], Js_primitive.valFromOption(match));
                        if (match$1 !== undefined) {
                          return Curry._1(self[/* send */3], /* SetParams */Block.__(6, [match$1]));
                        } else {
                          console.log("unable to decode params");
                          return /* () */0;
                        }
                      } else {
                        console.log("Could not parse json");
                        return /* () */0;
                      }
                    }));
              Curry._1(self[/* onUnmount */4], (function () {
                      return ReasonReact.Router[/* unwatchUrl */2](watcherID);
                    }));
              var url = ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0);
              if (url[/* hash */1] === "") {
                return pushParamsState(List.nth(Presets$Gayer.presets, 0)[1]);
              } else {
                return ReasonReact.Router[/* push */0]("#" + url[/* hash */1]);
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterInput */2], newSelf[/* state */1][/* filterInput */2]) || Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterBank */9], newSelf[/* state */1][/* filterBank */9])) {
                disconnectInputs(oldSelf[/* state */1]);
              }
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */4][/* audioInputSetting */3], newSelf[/* state */1][/* params */4][/* audioInputSetting */3])) {
                var match = getAnalysisInput(audioCtx, newSelf[/* state */1], newSelf[/* state */1][/* params */4][/* audioInputSetting */3]);
                var audio = match[1];
                if (audio !== undefined) {
                  return Curry._1(newSelf[/* send */3], /* SetFilterInput */Block.__(2, [audio]));
                } else {
                  return /* () */0;
                }
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              return disconnectInputs(self[/* state */1]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var partial_arg = self[/* state */1];
              var match = self[/* state */1][/* scaleCanvas */15];
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, MaterialUi_CssBaseline.make(/* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_AppBar.make(undefined, undefined, /* Sticky */1070408009, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_Toolbar.make(undefined, undefined, undefined, undefined, /* array */[
                                            ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.Menu[/* make */0](/* array */[]))])),
                                            ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, /* Title */594052472, undefined, undefined, /* array */["GAYER"]))
                                          ]))])), React.createElement("div", {
                              style: {
                                padding: "12px"
                              }
                            }, ReasonReact.element(undefined, undefined, Curry._2(SizedDrawer[/* make */6], (function (classes) {
                                        return ReasonReact.element(undefined, undefined, MaterialUi_Drawer.make(undefined, undefined, undefined, undefined, undefined, self[/* state */1][/* presetDrawerOpen */5], undefined, undefined, undefined, undefined, /* Temporary */-103274127, /* :: */[
                                                        /* Paper */Block.__(1, [classes[/* paper */0]]),
                                                        /* [] */0
                                                      ], undefined, /* array */[
                                                        React.createElement("div", {
                                                              style: {
                                                                display: "flex",
                                                                padding: "0 8px",
                                                                alignItems: "center",
                                                                justifyContent: "flex-end"
                                                              }
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.ChevronLeft[/* make */0](/* array */[]))]))),
                                                        ReasonReact.element(undefined, undefined, MaterialUi_Divider.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[])),
                                                        React.createElement("div", {
                                                              role: "button",
                                                              tabIndex: 0,
                                                              onKeyDown: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                }),
                                                              onClick: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                })
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_List.make(undefined, /* `String */[
                                                                      -976970511,
                                                                      "nav"
                                                                    ], undefined, undefined, undefined, undefined, undefined, /* array */[$$Array.map((function (param) {
                                                                              var preset = param[1];
                                                                              var name = param[0];
                                                                              return ReasonReact.element(name, undefined, MaterialUi_ListItem.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                                                return pushParamsState(preset);
                                                                                              }), undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_ListItemText.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[name]))]));
                                                                            }), $$Array.of_list(Presets$Gayer.presets))])))
                                                      ]));
                                      }), /* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, /* V24 */3, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Params$Gayer.make(self[/* state */1][/* params */4], (function (layers) {
                                                            return Curry._1(self[/* send */3], /* SetLayers */Block.__(0, [layers]));
                                                          }), (function (layer, theRef) {
                                                            return Curry._2(self[/* handle */0], setLayerRef, /* tuple */[
                                                                        layer,
                                                                        theRef
                                                                      ]);
                                                          }), (function (oldLayer, newLayer) {
                                                            return Curry._1(self[/* send */3], /* SetLayers */Block.__(0, [changeLayer(oldLayer, newLayer, self[/* state */1][/* params */4][/* layers */9])]));
                                                          }), pushParamsState, (function (param) {
                                                            return getAnalysisInput(audioCtx, partial_arg, param);
                                                          }), /* array */[]))])),
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[React.createElement("canvas", {
                                                      ref: Curry._1(self[/* handle */0], setCanvasRef),
                                                      style: match !== undefined ? ({
                                                            transform: "scale(" + (match.toString() + ")"),
                                                            transformOrigin: "top left"
                                                          }) : { },
                                                      height: height.toString(),
                                                      width: width.toString()
                                                    })]))
                                    ]))));
            }),
          /* initialState */(function () {
              return defaultState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */14], (function (canvas) {
                                                  return clearCanvas(canvas, width, height);
                                                }));
                                  })]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    self[/* state */1][/* readPos */0][0] = Canvas$Gayer.wrapCoord(state[/* readPos */0][0], state[/* params */4][/* readPosDelta */0], width);
                                    self[/* state */1][/* writePos */1][0] = Canvas$Gayer.wrapCoord(state[/* writePos */1][0], state[/* params */4][/* writePosDelta */1], width);
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */14], (function (canvas) {
                                                  var filterValues = drawCanvas(canvas, width, height, self[/* state */1]);
                                                  return maybeMapFilterBank((function (filterBank) {
                                                                return Audio$Gayer.updateFilterBank(self[/* state */1][/* params */4][/* inputGain */4], self[/* state */1][/* params */4][/* outputGain */5], self[/* state */1][/* params */4][/* q */6], Audio$Gayer.yToFrequency(height / 120 | 0, 16 + self[/* state */1][/* params */4][/* transpose */7] | 0), filterBank, filterValues);
                                                              }), self[/* state */1][/* filterBank */9]);
                                                }));
                                  })]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* presetDrawerOpen */!state[/* presetDrawerOpen */5],
                                  /* mediaStream */state[/* mediaStream */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* filterBank */state[/* filterBank */9],
                                  /* compressor */state[/* compressor */10],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */11],
                                  /* loadedImages */state[/* loadedImages */12],
                                  /* loadedAudio */state[/* loadedAudio */13],
                                  /* canvasRef */state[/* canvasRef */14],
                                  /* scaleCanvas */state[/* scaleCanvas */15],
                                  /* timerId */state[/* timerId */16]
                                ]]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var layers = action[0];
                      return /* SideEffects */Block.__(1, [(function () {
                                    var init = state[/* params */4];
                                    return pushParamsState(/* record */[
                                                /* readPosDelta */init[/* readPosDelta */0],
                                                /* writePosDelta */init[/* writePosDelta */1],
                                                /* writePosOffset */init[/* writePosOffset */2],
                                                /* audioInputSetting */init[/* audioInputSetting */3],
                                                /* inputGain */init[/* inputGain */4],
                                                /* outputGain */init[/* outputGain */5],
                                                /* q */init[/* q */6],
                                                /* transpose */init[/* transpose */7],
                                                /* shouldClear */init[/* shouldClear */8],
                                                /* layers */layers
                                              ]);
                                  })]);
                  case 1 : 
                      var url = action[0];
                      return /* SideEffects */Block.__(1, [(function () {
                                    var elt = makeAudioElt(url);
                                    var mediaElementSource = audioCtx.createMediaElementSource(elt);
                                    state[/* loadedAudio */13][0] = Belt_MapString.set(state[/* loadedAudio */13][0], url, mediaElementSource);
                                    return /* () */0;
                                  })]);
                  case 2 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */action[0],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* presetDrawerOpen */state[/* presetDrawerOpen */5],
                                  /* mediaStream */state[/* mediaStream */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* filterBank */state[/* filterBank */9],
                                  /* compressor */state[/* compressor */10],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */11],
                                  /* loadedImages */state[/* loadedImages */12],
                                  /* loadedAudio */state[/* loadedAudio */13],
                                  /* canvasRef */state[/* canvasRef */14],
                                  /* scaleCanvas */state[/* scaleCanvas */15],
                                  /* timerId */state[/* timerId */16]
                                ],
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* presetDrawerOpen */state[/* presetDrawerOpen */5],
                                  /* mediaStream */state[/* mediaStream */6],
                                  /* micInput */action[0],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* filterBank */state[/* filterBank */9],
                                  /* compressor */state[/* compressor */10],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */11],
                                  /* loadedImages */state[/* loadedImages */12],
                                  /* loadedAudio */state[/* loadedAudio */13],
                                  /* canvasRef */state[/* canvasRef */14],
                                  /* scaleCanvas */state[/* scaleCanvas */15],
                                  /* timerId */state[/* timerId */16]
                                ]]);
                  case 4 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* presetDrawerOpen */state[/* presetDrawerOpen */5],
                                  /* mediaStream */Js_primitive.some(action[0]),
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* filterBank */state[/* filterBank */9],
                                  /* compressor */state[/* compressor */10],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */11],
                                  /* loadedImages */state[/* loadedImages */12],
                                  /* loadedAudio */state[/* loadedAudio */13],
                                  /* canvasRef */state[/* canvasRef */14],
                                  /* scaleCanvas */state[/* scaleCanvas */15],
                                  /* timerId */state[/* timerId */16]
                                ]]);
                  case 5 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* presetDrawerOpen */state[/* presetDrawerOpen */5],
                                  /* mediaStream */state[/* mediaStream */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* filterBank */action[0],
                                  /* compressor */state[/* compressor */10],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */11],
                                  /* loadedImages */state[/* loadedImages */12],
                                  /* loadedAudio */state[/* loadedAudio */13],
                                  /* canvasRef */state[/* canvasRef */14],
                                  /* scaleCanvas */state[/* scaleCanvas */15],
                                  /* timerId */state[/* timerId */16]
                                ],
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 6 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */action[0],
                                  /* presetDrawerOpen */state[/* presetDrawerOpen */5],
                                  /* mediaStream */state[/* mediaStream */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* filterBank */state[/* filterBank */9],
                                  /* compressor */state[/* compressor */10],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */11],
                                  /* loadedImages */state[/* loadedImages */12],
                                  /* loadedAudio */state[/* loadedAudio */13],
                                  /* canvasRef */state[/* canvasRef */14],
                                  /* scaleCanvas */state[/* scaleCanvas */15],
                                  /* timerId */state[/* timerId */16]
                                ]]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var RList = 0;

export {
  RList ,
  defaultState ,
  setCanvasRef ,
  setAnalysisCanvasRef ,
  setLayerRef ,
  changeLayer ,
  SizedDrawerDefs ,
  SizedDrawer ,
  component ,
  maybeUpdateCanvas ,
  maybeMapFilterBank ,
  connectInputs ,
  disconnectInputs ,
  clearCanvas ,
  pushParamsState ,
  drawLayer ,
  drawCanvas ,
  getAnalysisInput ,
  makeAudioElt ,
  make ,
  
}
/* defaultState Not a pure module */
