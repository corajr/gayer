// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";

function setCanvasRef(theRef, param) {
  param[/* state */1][/* canvasRef */12][0] = (theRef == null) ? /* None */0 : [theRef];
  return /* () */0;
}

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match) {
    return Curry._1(f, match[0]);
  } else {
    return /* () */0;
  }
}

function maybeMapFilterBank(f, maybeFilterBank) {
  if (maybeFilterBank) {
    return Curry._1(f, maybeFilterBank[0]);
  } else {
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function drawCanvas(canvasElement, width, height, state) {
  if (state[/* shouldClear */6]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, width, height);
  ctx.globalAlpha = state[/* alpha */8];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, state[/* compositeOperation */9]);
  var match = state[/* visualInput */5];
  if (match) {
    ctx.drawImage(match[0], 0, 0, width, height);
  }
  var slice = ctx.getImageData(state[/* xIndex */0], 0, 1, height);
  var values = Canvas$Gayer.imageDataToFloatArray(slice, state[/* channelToRead */7]);
  ctx.strokeStyle = "white";
  Canvas$Gayer.Ctx[/* line */4](ctx, /* tuple */[
        state[/* xIndex */0],
        0
      ], /* tuple */[
        state[/* xIndex */0],
        height
      ]);
  return values;
}

function make($staropt$star, $staropt$star$1, _) {
  var width = $staropt$star ? $staropt$star[0] : 640;
  var height = $staropt$star$1 ? $staropt$star$1[0] : 120;
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var filterBank = Audio$Gayer.defaultFilterBank(/* Some */[Audio$Gayer.defaultAudioCtx], /* Some */[height], /* Some */[Audio$Gayer.defaultQ]);
              Audio$Gayer.connectFilterBank(self[/* state */1][/* filterInput */4], filterBank);
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match) {
                match[0].then((function (stream) {
                        var audio = Audio$Gayer.defaultAudioCtx.createMediaStreamSource(stream);
                        var video = Video$Gayer.attachVideoStream(stream);
                        Curry._1(self[/* send */3], /* SetFilterInput */Block.__(0, [audio]));
                        Curry._1(self[/* send */3], /* SetVisualInput */Block.__(1, [/* Some */[video]]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* SetFilterBank */Block.__(2, [filterBank]));
              Curry._1(self[/* send */3], /* Clear */0);
              var doSendTick = function () {
                Curry._1(self[/* send */3], /* Tick */1);
                window.requestAnimationFrame(doSendTick);
                return /* () */0;
              };
              self[/* state */1][/* timerId */13][0] = /* Some */[setInterval((function () {
                        return Curry._1(self[/* send */3], /* Tick */1);
                      }), 100)];
              return /* () */0;
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (oldSelf[/* state */1][/* filterInput */4] !== newSelf[/* state */1][/* filterInput */4]) {
                var partial_arg = oldSelf[/* state */1][/* filterInput */4];
                maybeMapFilterBank((function (param) {
                        return Audio$Gayer.disconnectFilterBank(partial_arg, param);
                      }), oldSelf[/* state */1][/* filterBank */11]);
              }
              if (oldSelf[/* state */1][/* filterBank */11] !== newSelf[/* state */1][/* filterBank */11]) {
                var partial_arg$1 = oldSelf[/* state */1][/* filterInput */4];
                return maybeMapFilterBank((function (param) {
                              return Audio$Gayer.disconnectFilterBank(partial_arg$1, param);
                            }), oldSelf[/* state */1][/* filterBank */11]);
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              var partial_arg = self[/* state */1][/* filterInput */4];
              return maybeMapFilterBank((function (param) {
                            return Audio$Gayer.disconnectFilterBank(partial_arg, param);
                          }), self[/* state */1][/* filterBank */11]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          onClick: (function () {
                              return Curry._1(self[/* send */3], /* Tick */1);
                            })
                        }, React.createElement("h1", undefined, "GAYER"), React.createElement("canvas", {
                              ref: Curry._1(self[/* handle */0], setCanvasRef),
                              height: height.toString(),
                              width: width.toString()
                            }));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* xIndex */0,
                      /* xDelta */1,
                      /* inputGain */1.0,
                      /* outputGain */0.05,
                      /* filterInput */Audio$Gayer.defaultNoise,
                      /* visualInput : None */0,
                      /* shouldClear */true,
                      /* channelToRead : R */0,
                      /* alpha */1.0,
                      /* compositeOperation : DestinationOver */4,
                      /* allowedPitchClasses */Curry._1(Music$Gayer.PitchSet[/* of_list */25], /* :: */[
                            0,
                            /* :: */[
                              2,
                              /* :: */[
                                5,
                                /* :: */[
                                  7,
                                  /* :: */[
                                    9,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]),
                      /* filterBank : None */0,
                      /* canvasRef */[/* None */0],
                      /* timerId */[/* None */0]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                return maybeUpdateCanvas(self[/* state */1][/* canvasRef */12], (function (canvas) {
                                              return clearCanvas(canvas, width, height);
                                            }));
                              })]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* xIndex */Caml_int32.mod_(state[/* xIndex */0] + state[/* xDelta */1] | 0, width),
                              /* xDelta */state[/* xDelta */1],
                              /* inputGain */state[/* inputGain */2],
                              /* outputGain */state[/* outputGain */3],
                              /* filterInput */state[/* filterInput */4],
                              /* visualInput */state[/* visualInput */5],
                              /* shouldClear */state[/* shouldClear */6],
                              /* channelToRead */state[/* channelToRead */7],
                              /* alpha */state[/* alpha */8],
                              /* compositeOperation */state[/* compositeOperation */9],
                              /* allowedPitchClasses */state[/* allowedPitchClasses */10],
                              /* filterBank */state[/* filterBank */11],
                              /* canvasRef */state[/* canvasRef */12],
                              /* timerId */state[/* timerId */13]
                            ],
                            (function (self) {
                                return maybeUpdateCanvas(self[/* state */1][/* canvasRef */12], (function (canvas) {
                                              var rawFilterValues = drawCanvas(canvas, width, height, self[/* state */1]);
                                              var filterValues = Music$Gayer.filterByPitchSet(self[/* state */1][/* allowedPitchClasses */10], rawFilterValues);
                                              return maybeMapFilterBank((function (filterBank) {
                                                            return Audio$Gayer.updateFilterBank(filterBank, filterValues, self[/* state */1][/* inputGain */2], self[/* state */1][/* outputGain */3]);
                                                          }), self[/* state */1][/* filterBank */11]);
                                            }));
                              })
                          ]);
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* filterInput */action[0],
                                  /* visualInput */state[/* visualInput */5],
                                  /* shouldClear */state[/* shouldClear */6],
                                  /* channelToRead */state[/* channelToRead */7],
                                  /* alpha */state[/* alpha */8],
                                  /* compositeOperation */state[/* compositeOperation */9],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */10],
                                  /* filterBank */state[/* filterBank */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ],
                                (function (self) {
                                    var partial_arg = self[/* state */1][/* filterInput */4];
                                    return maybeMapFilterBank((function (param) {
                                                  return Audio$Gayer.connectFilterBank(partial_arg, param);
                                                }), self[/* state */1][/* filterBank */11]);
                                  })
                              ]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* filterInput */state[/* filterInput */4],
                                  /* visualInput */action[0],
                                  /* shouldClear */state[/* shouldClear */6],
                                  /* channelToRead */state[/* channelToRead */7],
                                  /* alpha */state[/* alpha */8],
                                  /* compositeOperation */state[/* compositeOperation */9],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */10],
                                  /* filterBank */state[/* filterBank */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ]]);
                  case 2 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* filterInput */state[/* filterInput */4],
                                  /* visualInput */state[/* visualInput */5],
                                  /* shouldClear */state[/* shouldClear */6],
                                  /* channelToRead */state[/* channelToRead */7],
                                  /* alpha */state[/* alpha */8],
                                  /* compositeOperation */state[/* compositeOperation */9],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */10],
                                  /* filterBank : Some */[action[0]],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ],
                                (function (self) {
                                    var partial_arg = self[/* state */1][/* filterInput */4];
                                    return maybeMapFilterBank((function (param) {
                                                  return Audio$Gayer.connectFilterBank(partial_arg, param);
                                                }), self[/* state */1][/* filterBank */11]);
                                  })
                              ]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */Caml_int32.mod_(action[0], width),
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* filterInput */state[/* filterInput */4],
                                  /* visualInput */state[/* visualInput */5],
                                  /* shouldClear */state[/* shouldClear */6],
                                  /* channelToRead */state[/* channelToRead */7],
                                  /* alpha */state[/* alpha */8],
                                  /* compositeOperation */state[/* compositeOperation */9],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */10],
                                  /* filterBank */state[/* filterBank */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ]]);
                  case 4 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */action[0],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* filterInput */state[/* filterInput */4],
                                  /* visualInput */state[/* visualInput */5],
                                  /* shouldClear */state[/* shouldClear */6],
                                  /* channelToRead */state[/* channelToRead */7],
                                  /* alpha */state[/* alpha */8],
                                  /* compositeOperation */state[/* compositeOperation */9],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */10],
                                  /* filterBank */state[/* filterBank */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ]]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  setCanvasRef ,
  component ,
  maybeUpdateCanvas ,
  maybeMapFilterBank ,
  clearCanvas ,
  drawCanvas ,
  make ,
  
}
/* component Not a pure module */
