// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Hashtbl from "bs-platform/lib/es6/hashtbl.js";
import * as Fscreen from "fscreen";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Params$Gayer from "./Params.bs.js";
import * as Presets$Gayer from "./Presets.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as MaterialUIIcons from "bs-material-ui-icons/src/MaterialUIIcons.js";
import * as MaterialUi_Grid from "@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js";
import * as MaterialUi_List from "@jsiebern/bs-material-ui/src/MaterialUi_List.bs.js";
import * as RList$Rationale from "rationale/src/RList.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";
import * as MaterialUi_AppBar from "@jsiebern/bs-material-ui/src/MaterialUi_AppBar.bs.js";
import * as MaterialUi_Button from "@jsiebern/bs-material-ui/src/MaterialUi_Button.bs.js";
import * as MaterialUi_Drawer from "@jsiebern/bs-material-ui/src/MaterialUi_Drawer.bs.js";
import * as MaterialUi_Divider from "@jsiebern/bs-material-ui/src/MaterialUi_Divider.bs.js";
import * as MaterialUi_Toolbar from "@jsiebern/bs-material-ui/src/MaterialUi_Toolbar.bs.js";
import * as MaterialUi_ListItem from "@jsiebern/bs-material-ui/src/MaterialUi_ListItem.bs.js";
import * as MaterialUi_IconButton from "@jsiebern/bs-material-ui/src/MaterialUi_IconButton.bs.js";
import * as MaterialUi_Typography from "@jsiebern/bs-material-ui/src/MaterialUi_Typography.bs.js";
import * as MaterialUi_WithStyles from "@jsiebern/bs-material-ui/src/MaterialUi_WithStyles.bs.js";
import * as MaterialUi_CssBaseline from "@jsiebern/bs-material-ui/src/MaterialUi_CssBaseline.bs.js";
import * as MaterialUi_ListItemText from "@jsiebern/bs-material-ui/src/MaterialUi_ListItemText.bs.js";

var defaultState_000 = /* readPos : record */[/* contents */0];

var defaultState_001 = /* writePos : record */[/* contents */0];

var defaultState_002 = /* freqFuncParams : record */[/* contents : tuple */[
    1,
    16
  ]];

var defaultState_004 = /* params */List.nth(Presets$Gayer.presets, 0)[1];

var defaultState_008 = /* cameraInput : record */[/* contents */undefined];

var defaultState_010 = /* compressor : record */[/* contents */undefined];

var defaultState_011 = /* analysisCanvasRef : record */[/* contents */undefined];

var defaultState_012 = /* midiCanvasRef : record */[/* contents */undefined];

var defaultState_014 = /* loadedImages : record */[/* contents */Belt_MapString.empty];

var defaultState_015 = /* loadedAudio : record */[/* contents */Belt_MapString.empty];

var defaultState_016 = /* canvasRef : record */[/* contents */undefined];

var defaultState_017 = /* scaleCanvas */480.0 / Presets$Gayer.defaultSize;

var defaultState_019 = /* tickFunctions : record */[/* contents : [] */0];

var defaultState_020 = /* timerId : record */[/* contents */undefined];

var defaultState = /* record */[
  defaultState_000,
  defaultState_001,
  defaultState_002,
  /* filterInput */undefined,
  defaultState_004,
  /* presetDrawerOpen */false,
  /* mediaStream */undefined,
  /* micInput */undefined,
  defaultState_008,
  /* filterBank */undefined,
  defaultState_010,
  defaultState_011,
  defaultState_012,
  /* savedImages : [] */0,
  defaultState_014,
  defaultState_015,
  defaultState_016,
  defaultState_017,
  /* fullscreenCanvas */false,
  defaultState_019,
  defaultState_020
];

function setCanvasRef(theRef, param) {
  param[/* state */1][/* canvasRef */16][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setAnalysisCanvasRef(theRef, param) {
  param[/* state */1][/* analysisCanvasRef */11][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setLayerRef(param, param$1) {
  var state = param$1[/* state */1];
  var theRef = param[1];
  var maybeRef = (theRef == null) ? undefined : Js_primitive.some(theRef);
  var match = param[0][/* content */0];
  if (typeof match === "number") {
    if (theRef == null) {
      return /* () */0;
    } else {
      state[/* midiCanvasRef */12][0] = maybeRef;
      return /* () */0;
    }
  } else {
    switch (match.tag | 0) {
      case 2 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            var match$1 = state[/* mediaStream */6];
            if (match$1 !== undefined) {
              var video = Video$Gayer.attachVideoStream(theRef, Js_primitive.valFromOption(match$1));
              state[/* cameraInput */8][0] = Js_primitive.some(video);
              return /* () */0;
            } else {
              return /* () */0;
            }
          }
      case 3 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            state[/* loadedImages */14][0] = Belt_MapString.set(state[/* loadedImages */14][0], match[0], theRef);
            return /* () */0;
          }
      case 4 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            var source = match[0];
            state[/* analysisCanvasRef */11][0] = maybeRef;
            if (typeof source === "number") {
              return /* () */0;
            } else {
              var url = source[0];
              if (Belt_MapString.has(state[/* loadedAudio */15][0], url)) {
                return 0;
              } else {
                return Curry._1(param$1[/* send */3], /* LoadAudioFile */Block.__(0, [url]));
              }
            }
          }
      default:
        return /* () */0;
    }
  }
}

function changeLayer(oldLayer, newLayer, layers) {
  var match = RList$Rationale.indexOf(oldLayer, layers);
  if (match !== undefined) {
    return RList$Rationale.update(newLayer, match, layers);
  } else {
    return layers;
  }
}

function classRecordToJs(param) {
  return {
          paper: param[/* paper */0]
        };
}

var classes = /* record */[/* paper */{
    position: "relative",
    width: "240px"
  }];

function classRecordStringsFromJs(arg) {
  return /* record */[/* paper */arg.paper];
}

var SizedDrawerDefs = /* module */[
  /* classRecordToJs */classRecordToJs,
  /* classRecordStringsFromJs */classRecordStringsFromJs,
  /* classes */classes
];

var SizedDrawer = MaterialUi_WithStyles.WithStylesSafe(SizedDrawerDefs);

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(match));
  } else {
    return /* () */0;
  }
}

function maybeMapFilterBank(f, maybeFilterBank) {
  if (maybeFilterBank !== undefined) {
    return Curry._1(f, maybeFilterBank);
  } else {
    return /* () */0;
  }
}

function connectInputs(state) {
  var match = state[/* filterBank */9];
  var match$1 = state[/* filterInput */3];
  var match$2 = state[/* compressor */10][0];
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
    return Audio$Gayer.connectFilterBank(match$1, match, Js_primitive.valFromOption(match$2));
  } else {
    console.log("could not connect inputs");
    return /* () */0;
  }
}

function disconnectInputs(state) {
  var match = state[/* filterBank */9];
  var match$1 = state[/* filterInput */3];
  var match$2 = state[/* compressor */10][0];
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
    return Audio$Gayer.disconnectFilterBank(match$1, match, Js_primitive.valFromOption(match$2));
  } else {
    console.log("could not disconnect inputs");
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function pushParamsState(newParams) {
  var newParamsJson = encodeURIComponent(JSON.stringify(Params$Gayer.EncodeParams[/* params */0](newParams)));
  return ReasonReact.Router[/* push */0]("#" + newParamsJson);
}

function setLayers(params, newLayers) {
  return pushParamsState(/* record */[
              /* readPosDelta */params[/* readPosDelta */0],
              /* writePosDelta */params[/* writePosDelta */1],
              /* readPosOffset */params[/* readPosOffset */2],
              /* writePosOffset */params[/* writePosOffset */3],
              /* millisPerTick */params[/* millisPerTick */4],
              /* audioInputSetting */params[/* audioInputSetting */5],
              /* inputGain */params[/* inputGain */6],
              /* outputGain */params[/* outputGain */7],
              /* q */params[/* q */8],
              /* transpose */params[/* transpose */9],
              /* shouldClear */params[/* shouldClear */10],
              /* layers */newLayers
            ]);
}

function drawLayer(ctx, width, height, state, layer) {
  ctx.globalAlpha = layer[/* alpha */1];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, layer[/* compositeOperation */2]);
  Canvas$Gayer.Ctx[/* setTransform */2](ctx, layer[/* transformMatrix */3]);
  ctx.filter = layer[/* filters */4];
  var match = layer[/* content */0];
  if (typeof match === "number") {
    var match$1 = state[/* midiCanvasRef */12][0];
    if (match$1 !== undefined) {
      var x = Canvas$Gayer.wrapCoord(state[/* writePos */1][0] + state[/* params */4][/* writePosOffset */3] | 0, 0, width);
      ctx.drawImage(Js_primitive.valFromOption(match$1), x, 0, 1, height);
    }
    return undefined;
  } else {
    switch (match.tag | 0) {
      case 0 : 
          ctx.fillStyle = match[0];
          ctx.fillRect(0, 0, width, height);
          return undefined;
      case 1 : 
          Canvas$Gayer.DrawCommand[/* drawCommands */4](ctx, match[0]);
          return undefined;
      case 2 : 
          var match$2 = state[/* cameraInput */8][0];
          var match$3 = match[0][/* slitscan */0];
          if (match$2 !== undefined) {
            var input = Js_primitive.valFromOption(match$2);
            if (match$3 !== undefined) {
              var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */1][0] + state[/* params */4][/* writePosOffset */3] | 0, 0, width);
              ctx.drawImage(input, match$3[/* x */0], 0, 1, 480, xToWrite, 0, 1, height);
            } else {
              ctx.drawImage(input, 0, 0, width, height);
            }
          }
          return undefined;
      case 3 : 
          var match$4 = Belt_MapString.get(state[/* loadedImages */14][0], match[0]);
          if (match$4 !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(match$4), 0, 0, width, height);
          }
          return undefined;
      case 4 : 
          var match$5 = state[/* analysisCanvasRef */11][0];
          if (match$5 !== undefined) {
            var x$1 = Canvas$Gayer.wrapCoord(state[/* writePos */1][0] + state[/* params */4][/* writePosOffset */3] | 0, 0, width);
            ctx.drawImage(Js_primitive.valFromOption(match$5), x$1, 0, 1, height);
          }
          return undefined;
      case 5 : 
          var classList = Curry._1(Music$Gayer.PitchSet[/* elements */19], Curry._2(Music$Gayer.PitchSet[/* diff */8], Music$Gayer.allPitches, match[0]));
          ctx.fillStyle = "black";
          var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(height);
          for(var i = 0 ,i_finish = height / 10 | 0; i <= i_finish; ++i){
            List.iter((function(i){
                return function (j) {
                  var y = Caml_int32.imul(Caml_int32.imul(i, 12) + j | 0, pixelsPerSemitone);
                  ctx.fillRect(0, y, width, pixelsPerSemitone);
                  return /* () */0;
                }
                }(i)), classList);
          }
          return undefined;
      case 6 : 
          var channel = match[0];
          var xToRead = Canvas$Gayer.wrapCoord(state[/* readPos */0][0] + state[/* params */4][/* readPosOffset */2] | 0, 0, width);
          var slice = ctx.getImageData(xToRead, 0, 1, height);
          var tmp;
          switch (channel) {
            case 0 : 
                tmp = Canvas$Gayer.rgba(127, 0, 0, 0.5);
                break;
            case 1 : 
                tmp = Canvas$Gayer.rgba(0, 127, 0, 0.5);
                break;
            case 2 : 
                tmp = Canvas$Gayer.rgba(0, 0, 127, 0.5);
                break;
            case 3 : 
                tmp = Canvas$Gayer.rgba(127, 127, 127, 0.5);
                break;
            
          }
          ctx.fillStyle = tmp;
          ctx.fillRect(xToRead, 0, 1, height);
          return Canvas$Gayer.imageDataToFloatArray(slice, channel);
      
    }
  }
}

function drawCanvas(canvasElement, width, height, state) {
  if (state[/* params */4][/* shouldClear */10]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  return List.fold_left((function (values, layer) {
                var newMaybeValues = drawLayer(ctx, width, height, state, layer);
                if (newMaybeValues !== undefined) {
                  return newMaybeValues;
                } else {
                  return values;
                }
              }), Caml_array.caml_make_vect(height, 0.0), state[/* params */4][/* layers */11]);
}

function getAnalysisInput(audioCtx, state, audioInput) {
  if (typeof audioInput === "number") {
    if (audioInput !== 0) {
      return /* tuple */[
              audioCtx,
              state[/* micInput */7]
            ];
    } else {
      return /* tuple */[
              audioCtx,
              Audio$Gayer.pinkNoise(audioCtx)
            ];
    }
  } else {
    return /* tuple */[
            audioCtx,
            Belt_MapString.get(state[/* loadedAudio */15][0], audioInput[0])
          ];
  }
}

function setTimer(param) {
  var send = param[/* send */3];
  var state = param[/* state */1];
  var match = state[/* timerId */20][0];
  if (match !== undefined) {
    clearInterval(Js_primitive.valFromOption(match));
  }
  state[/* timerId */20][0] = Js_primitive.some(setInterval((function () {
              return Curry._1(send, /* Tick */1);
            }), state[/* params */4][/* millisPerTick */4]));
  return /* () */0;
}

var makeAudioElt = function (url){
     var audio = document.createElement("audio");
     audio.id = "audio-elt";
     audio.src = url;
     audio.loop = true;
     audio.autoplay = true;
     console.log(audio);

     document.body.appendChild(audio);
     return audio;
     };

function make($staropt$star, $staropt$star$1, $staropt$star$2, _) {
  var width = $staropt$star !== undefined ? $staropt$star : Presets$Gayer.defaultSize;
  var height = $staropt$star$1 !== undefined ? $staropt$star$1 : Presets$Gayer.defaultSize;
  var audioCtx = $staropt$star$2 !== undefined ? Js_primitive.valFromOption($staropt$star$2) : Curry._1(Audio$Gayer.makeDefaultAudioCtx, /* () */0);
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var compressor = Audio$Gayer.makeCompressor(audioCtx, Audio$Gayer.defaultCompressorValues);
              compressor.connect(audioCtx.destination);
              self[/* state */1][/* compressor */10][0] = Js_primitive.some(compressor);
              var noise = Audio$Gayer.pinkNoise(audioCtx);
              Curry._1(self[/* send */3], /* SetFilterInput */Block.__(2, [noise]));
              var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(height);
              self[/* state */1][/* freqFuncParams */2][0] = /* tuple */[
                pixelsPerSemitone,
                16
              ];
              var freqFunc = Audio$Gayer.yToFrequency(pixelsPerSemitone, 16 + self[/* state */1][/* params */4][/* transpose */9] | 0, height);
              var filterBank = Audio$Gayer.makeFilterBank(audioCtx, height, Audio$Gayer.defaultQ, freqFunc);
              Curry._1(self[/* send */3], /* SetFilterBank */Block.__(5, [filterBank]));
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match !== undefined) {
                Js_primitive.valFromOption(match).then((function (stream) {
                        Curry._1(self[/* send */3], /* SetMediaStream */Block.__(4, [stream]));
                        var audio = audioCtx.createMediaStreamSource(stream);
                        Curry._1(self[/* send */3], /* SetMicInput */Block.__(3, [audio]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* Clear */0);
              setTimer(self);
              var watcherID = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      var hash = decodeURIComponent(url[/* hash */1]);
                      var match = Json.parse(hash);
                      if (match !== undefined) {
                        var match$1 = Json_decode.optional(Params$Gayer.DecodeParams[/* params */0], Js_primitive.valFromOption(match));
                        if (match$1 !== undefined) {
                          return Curry._1(self[/* send */3], /* SetParams */Block.__(6, [match$1]));
                        } else {
                          console.log("unable to decode params");
                          return /* () */0;
                        }
                      } else {
                        console.log("Could not parse json");
                        return /* () */0;
                      }
                    }));
              Curry._1(self[/* onUnmount */4], (function () {
                      return ReasonReact.Router[/* unwatchUrl */2](watcherID);
                    }));
              var url = ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0);
              if (url[/* hash */1] === "") {
                return pushParamsState(List.nth(Presets$Gayer.presets, 0)[1]);
              } else {
                return ReasonReact.Router[/* push */0]("#" + url[/* hash */1]);
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterInput */3], newSelf[/* state */1][/* filterInput */3]) || Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterBank */9], newSelf[/* state */1][/* filterBank */9])) {
                disconnectInputs(oldSelf[/* state */1]);
              }
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */4][/* audioInputSetting */5], newSelf[/* state */1][/* params */4][/* audioInputSetting */5])) {
                var match = getAnalysisInput(audioCtx, newSelf[/* state */1], newSelf[/* state */1][/* params */4][/* audioInputSetting */5]);
                var audio = match[1];
                if (audio !== undefined) {
                  Curry._1(newSelf[/* send */3], /* SetFilterInput */Block.__(2, [audio]));
                }
                
              }
              var layersChanged = Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */4][/* layers */11], newSelf[/* state */1][/* params */4][/* layers */11]);
              if (layersChanged || oldSelf[/* state */1][/* params */4][/* readPosOffset */2] !== newSelf[/* state */1][/* params */4][/* readPosOffset */2] || oldSelf[/* state */1][/* params */4][/* writePosOffset */3] !== newSelf[/* state */1][/* params */4][/* readPosOffset */2]) {
                newSelf[/* state */1][/* readPos */0][0] = 0;
                newSelf[/* state */1][/* writePos */1][0] = 0;
              }
              if (oldSelf[/* state */1][/* params */4][/* q */8] !== newSelf[/* state */1][/* params */4][/* q */8] || oldSelf[/* state */1][/* params */4][/* transpose */9] !== newSelf[/* state */1][/* params */4][/* transpose */9]) {
                var match$1 = newSelf[/* state */1][/* freqFuncParams */2][0];
                var freqFunc = Audio$Gayer.yToFrequency(match$1[0], match$1[1] + newSelf[/* state */1][/* params */4][/* transpose */9] | 0, height);
                maybeMapFilterBank((function (filterBank) {
                        return Audio$Gayer.updateFilterBankDefinition(filterBank, freqFunc, newSelf[/* state */1][/* params */4][/* q */8]);
                      }), newSelf[/* state */1][/* filterBank */9]);
              }
              if (oldSelf[/* state */1][/* params */4][/* millisPerTick */4] !== newSelf[/* state */1][/* params */4][/* millisPerTick */4]) {
                setTimer(newSelf);
              }
              if (oldSelf[/* state */1][/* fullscreenCanvas */18] !== newSelf[/* state */1][/* fullscreenCanvas */18]) {
                if (newSelf[/* state */1][/* fullscreenCanvas */18]) {
                  var match$2 = newSelf[/* state */1][/* canvasRef */16][0];
                  if (match$2 !== undefined) {
                    Fscreen.requestFullscreen(Js_primitive.valFromOption(match$2));
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                } else {
                  exitFullscreen(Fscreen);
                  return /* () */0;
                }
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              return disconnectInputs(self[/* state */1]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var partial_arg = self[/* state */1];
              var match = self[/* state */1][/* scaleCanvas */17];
              var match$1 = self[/* state */1][/* scaleCanvas */17];
              var match$2 = self[/* state */1][/* fullscreenCanvas */18];
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, MaterialUi_CssBaseline.make(/* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_AppBar.make(undefined, undefined, /* Sticky */1070408009, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_Toolbar.make(undefined, undefined, undefined, undefined, /* array */[
                                            ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.Menu[/* make */0](/* array */[]))])),
                                            ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, /* Title */594052472, undefined, undefined, /* array */["GAYER"]))
                                          ]))])), React.createElement("div", {
                              style: {
                                padding: "12px"
                              }
                            }, ReasonReact.element(undefined, undefined, Curry._2(SizedDrawer[/* make */6], (function (classes) {
                                        return ReasonReact.element(undefined, undefined, MaterialUi_Drawer.make(undefined, undefined, undefined, undefined, undefined, self[/* state */1][/* presetDrawerOpen */5], undefined, undefined, undefined, undefined, /* Temporary */-103274127, /* :: */[
                                                        /* Paper */Block.__(1, [classes[/* paper */0]]),
                                                        /* [] */0
                                                      ], undefined, /* array */[
                                                        React.createElement("div", {
                                                              style: {
                                                                display: "flex",
                                                                padding: "0 8px",
                                                                alignItems: "center",
                                                                justifyContent: "flex-end"
                                                              }
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.ChevronLeft[/* make */0](/* array */[]))]))),
                                                        ReasonReact.element(undefined, undefined, MaterialUi_Divider.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[])),
                                                        React.createElement("div", {
                                                              role: "button",
                                                              tabIndex: 0,
                                                              onKeyDown: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                }),
                                                              onClick: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                })
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_List.make(undefined, /* `String */[
                                                                      -976970511,
                                                                      "nav"
                                                                    ], undefined, undefined, undefined, undefined, undefined, /* array */[$$Array.map((function (param) {
                                                                              var preset = param[1];
                                                                              var name = param[0];
                                                                              return ReasonReact.element(name, undefined, MaterialUi_ListItem.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                                                return pushParamsState(preset);
                                                                                              }), undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_ListItemText.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[name]))]));
                                                                            }), $$Array.of_list(Presets$Gayer.presets))])))
                                                      ]));
                                      }), /* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, /* V24 */3, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Params$Gayer.make(self[/* state */1][/* params */4], (function (layers) {
                                                            return setLayers(self[/* state */1][/* params */4], layers);
                                                          }), (function (layer, theRef) {
                                                            return Curry._2(self[/* handle */0], setLayerRef, /* tuple */[
                                                                        layer,
                                                                        theRef
                                                                      ]);
                                                          }), (function (oldLayer, newLayer) {
                                                            return setLayers(self[/* state */1][/* params */4], changeLayer(oldLayer, newLayer, self[/* state */1][/* params */4][/* layers */11]));
                                                          }), pushParamsState, (function (param) {
                                                            return getAnalysisInput(audioCtx, partial_arg, param);
                                                          }), (function (tickFn) {
                                                            self[/* state */1][/* tickFunctions */19][0] = /* :: */[
                                                              tickFn,
                                                              self[/* state */1][/* tickFunctions */19][0]
                                                            ];
                                                            return /* () */0;
                                                          }), width, height, /* array */[]))])),
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[
                                                React.createElement("div", {
                                                      style: {
                                                        marginBottom: "24px",
                                                        minHeight: (
                                                            match !== undefined ? height * match : height
                                                          ).toString() + "px"
                                                      }
                                                    }, React.createElement("canvas", {
                                                          ref: Curry._1(self[/* handle */0], setCanvasRef),
                                                          style: match$1 !== undefined ? ({
                                                                transform: "scale(" + (match$1.toString() + ")"),
                                                                transformOrigin: "top left"
                                                              }) : { },
                                                          height: height.toString(),
                                                          width: width.toString(),
                                                          onClick: (function (evt) {
                                                              console.log(evt);
                                                              return /* () */0;
                                                            })
                                                        })),
                                                React.createElement("div", undefined, React.createElement("div", {
                                                          style: {
                                                            marginBottom: "24px"
                                                          }
                                                        }, ReasonReact.element(undefined, undefined, MaterialUi_Button.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Contained */-515484397, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                    return Curry._1(self[/* send */3], /* SaveImage */3);
                                                                  }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                                                  ReasonReact.element(undefined, undefined, MaterialUIIcons.PhotoCamera[/* make */0](/* array */[])),
                                                                  "Snapshot"
                                                                ])), ReasonReact.element(undefined, undefined, MaterialUi_Button.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Contained */-515484397, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                    return Curry._1(self[/* send */3], /* ToggleFullscreen */4);
                                                                  }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                                                  match$2 ? ReasonReact.element(undefined, undefined, MaterialUIIcons.FullscreenExit[/* make */0](/* array */[])) : ReasonReact.element(undefined, undefined, MaterialUIIcons.Fullscreen[/* make */0](/* array */[])),
                                                                  "Fullscreen"
                                                                ]))), $$Array.map((function (url) {
                                                            return React.createElement("img", {
                                                                        key: Hashtbl.hash(url).toString(),
                                                                        src: url
                                                                      });
                                                          }), $$Array.of_list(self[/* state */1][/* savedImages */13])))
                                              ]))
                                    ]))));
            }),
          /* initialState */(function () {
              return defaultState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */16], (function (canvas) {
                                                  return clearCanvas(canvas, width, height);
                                                }));
                                  })]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    self[/* state */1][/* readPos */0][0] = Canvas$Gayer.wrapCoord(state[/* readPos */0][0], state[/* params */4][/* readPosDelta */0], width);
                                    self[/* state */1][/* writePos */1][0] = Canvas$Gayer.wrapCoord(state[/* writePos */1][0], state[/* params */4][/* writePosDelta */1], width);
                                    List.iter((function (f) {
                                            return Curry._1(f, /* () */0);
                                          }), self[/* state */1][/* tickFunctions */19][0]);
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */16], (function (canvas) {
                                                  var filterValues = drawCanvas(canvas, width, height, state);
                                                  return maybeMapFilterBank((function (filterBank) {
                                                                return Audio$Gayer.updateFilterBank(state[/* params */4][/* inputGain */6], state[/* params */4][/* outputGain */7], filterBank, filterValues);
                                                              }), self[/* state */1][/* filterBank */9]);
                                                }));
                                  })]);
                  case 2 : 
                      var newrecord = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord[/* presetDrawerOpen */5] = !state[/* presetDrawerOpen */5], newrecord)]);
                  case 3 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = state[/* canvasRef */16][0];
                                    if (match !== undefined) {
                                      var url = Js_primitive.valFromOption(match).toDataURL();
                                      return Curry._1(self[/* send */3], /* AddSavedImage */Block.__(1, [url]));
                                    } else {
                                      return /* () */0;
                                    }
                                  })]);
                  case 4 : 
                      var newrecord$1 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$1[/* fullscreenCanvas */18] = !state[/* fullscreenCanvas */18], newrecord$1)]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var url = action[0];
                      return /* SideEffects */Block.__(1, [(function () {
                                    var elt = makeAudioElt(url);
                                    var mediaElementSource = audioCtx.createMediaElementSource(elt);
                                    state[/* loadedAudio */15][0] = Belt_MapString.set(state[/* loadedAudio */15][0], url, mediaElementSource);
                                    return /* () */0;
                                  })]);
                  case 1 : 
                      var newrecord$2 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$2[/* savedImages */13] = /* :: */[
                                    action[0],
                                    state[/* savedImages */13]
                                  ], newrecord$2)]);
                  case 2 : 
                      var newrecord$3 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$3[/* filterInput */3] = action[0], newrecord$3),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 3 : 
                      var newrecord$4 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$4[/* micInput */7] = action[0], newrecord$4)]);
                  case 4 : 
                      var newrecord$5 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$5[/* mediaStream */6] = Js_primitive.some(action[0]), newrecord$5)]);
                  case 5 : 
                      var newrecord$6 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$6[/* filterBank */9] = action[0], newrecord$6),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 6 : 
                      var newrecord$7 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$7[/* params */4] = action[0], newrecord$7)]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var RList = 0;

export {
  RList ,
  defaultState ,
  setCanvasRef ,
  setAnalysisCanvasRef ,
  setLayerRef ,
  changeLayer ,
  SizedDrawerDefs ,
  SizedDrawer ,
  component ,
  maybeUpdateCanvas ,
  maybeMapFilterBank ,
  connectInputs ,
  disconnectInputs ,
  clearCanvas ,
  pushParamsState ,
  setLayers ,
  drawLayer ,
  drawCanvas ,
  getAnalysisInput ,
  setTimer ,
  makeAudioElt ,
  make ,
  
}
/* defaultState Not a pure module */
