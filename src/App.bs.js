// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Fscreen from "fscreen";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Layer$Gayer from "./Layer.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Params$Gayer from "./Params.bs.js";
import * as Routes$Gayer from "./Routes.bs.js";
import * as Timing$Gayer from "./Timing.bs.js";
import * as Presets$Gayer from "./Presets.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as MaterialUIIcons from "bs-material-ui-icons/src/MaterialUIIcons.js";
import * as MaterialUi_Grid from "@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js";
import * as MaterialUi_List from "@jsiebern/bs-material-ui/src/MaterialUi_List.bs.js";
import * as RList$Rationale from "rationale/src/RList.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";
import * as AudioGraph$Gayer from "./AudioGraph.bs.js";
import * as DrawCommand$Gayer from "./DrawCommand.bs.js";
import * as MaterialUi_AppBar from "@jsiebern/bs-material-ui/src/MaterialUi_AppBar.bs.js";
import * as MaterialUi_Button from "@jsiebern/bs-material-ui/src/MaterialUi_Button.bs.js";
import * as MaterialUi_Drawer from "@jsiebern/bs-material-ui/src/MaterialUi_Drawer.bs.js";
import * as MaterialUi_Divider from "@jsiebern/bs-material-ui/src/MaterialUi_Divider.bs.js";
import * as MaterialUi_Toolbar from "@jsiebern/bs-material-ui/src/MaterialUi_Toolbar.bs.js";
import * as ScoreControl$Gayer from "./ScoreControl.bs.js";
import * as ImageDataUtil$Gayer from "./ImageDataUtil.bs.js";
import * as MaterialUi_ListItem from "@jsiebern/bs-material-ui/src/MaterialUi_ListItem.bs.js";
import * as MediaProvider$Gayer from "./MediaProvider.bs.js";
import * as MaterialUi_IconButton from "@jsiebern/bs-material-ui/src/MaterialUi_IconButton.bs.js";
import * as MaterialUi_Typography from "@jsiebern/bs-material-ui/src/MaterialUi_Typography.bs.js";
import * as MaterialUi_WithStyles from "@jsiebern/bs-material-ui/src/MaterialUi_WithStyles.bs.js";
import * as MaterialUi_CssBaseline from "@jsiebern/bs-material-ui/src/MaterialUi_CssBaseline.bs.js";
import * as MaterialUi_ListItemText from "@jsiebern/bs-material-ui/src/MaterialUi_ListItemText.bs.js";

function defaultState() {
  var layerRefs = /* record */[/* contents */Belt_MapString.empty];
  return /* record */[
          /* animationStartTime : record */[/* contents */0.0],
          /* animationLastUpdated : record */[/* contents */0.0],
          /* readPos : record */[/* contents */0],
          /* writePos : record */[/* contents */0],
          /* freqFuncParams : record */[/* contents : tuple */[
              1,
              16
            ]],
          /* filterInput */undefined,
          /* params */List.nth(Presets$Gayer.presets, 0)[1],
          /* score */Presets$Gayer.exampleScore,
          /* presetDrawerOpen */false,
          /* mediaStream */undefined,
          /* audioGraph : record */[/* contents */AudioGraph$Gayer.emptyAudioGraph],
          /* micInput */undefined,
          /* cameraInput : record */[/* contents */undefined],
          /* oscillatorBank : record */[/* contents */undefined],
          /* filterBanks */undefined,
          /* compressor : record */[/* contents */undefined],
          /* masterGain : record */[/* contents */undefined],
          /* merger : record */[/* contents */undefined],
          /* currentFilterValues : record */[/* contents */undefined],
          /* layerRefs */layerRefs,
          /* savedImages */Belt_MapString.empty,
          /* loadedAudio : record */[/* contents */Belt_MapString.empty],
          /* canvasRef : record */[/* contents */undefined],
          /* drawContext : record */[
            /* maybeCtxRef : record */[/* contents */undefined],
            /* layerRefs */layerRefs,
            /* width */1,
            /* height */1,
            /* variables */Belt_MapString.empty
          ],
          /* fullscreenCanvas */false,
          /* startingIndexRef : record */[/* contents */0],
          /* tickFunctions : record */[/* contents */Belt_MapString.empty],
          /* tickCounter : record */[/* contents */0],
          /* timerId : record */[/* contents */undefined]
        ];
}

function setCanvasRef(theRef, param) {
  var state = param[/* state */1];
  var maybeRef = (theRef == null) ? undefined : Js_primitive.some(theRef);
  state[/* canvasRef */22][0] = maybeRef;
  if (theRef == null) {
    return /* () */0;
  } else {
    state[/* layerRefs */19][0] = Belt_MapString.set(state[/* layerRefs */19][0], "root", theRef);
    state[/* drawContext */23][/* maybeCtxRef */0][0] = Js_primitive.some(theRef.getContext("2d"));
    return /* () */0;
  }
}

function setLayerRef(_, param, param$1) {
  var state = param$1[/* state */1];
  var theRef = param[1];
  var layer = param[0];
  var layerKey = Layer$Gayer.getLayerKey(layer);
  if (!(theRef == null)) {
    state[/* layerRefs */19][0] = Belt_MapString.set(state[/* layerRefs */19][0], layerKey, theRef);
  }
  var match = layer[/* content */0];
  if (typeof match === "number" && !(match !== 1 || (theRef == null))) {
    var match$1 = state[/* mediaStream */9];
    if (match$1 !== undefined) {
      var video = Video$Gayer.attachVideoStream(theRef, Js_primitive.valFromOption(match$1));
      state[/* cameraInput */12][0] = Js_primitive.some(video);
      state[/* layerRefs */19][0] = Belt_MapString.set(state[/* layerRefs */19][0], "webcam", theRef);
      return /* () */0;
    } else {
      return /* () */0;
    }
  } else {
    return /* () */0;
  }
}

function changeLayer(oldLayer, maybeNewLayer, layers) {
  var match = RList$Rationale.indexOf(oldLayer, layers);
  if (match !== undefined) {
    var index = match;
    if (maybeNewLayer !== undefined) {
      return RList$Rationale.update(maybeNewLayer, index, layers);
    } else {
      return RList$Rationale.remove(index, 1, layers);
    }
  } else {
    return layers;
  }
}

function classRecordToJs(param) {
  return {
          paper: param[/* paper */0]
        };
}

var classes = /* record */[/* paper */{
    position: "relative",
    width: "240px"
  }];

function classRecordStringsFromJs(arg) {
  return /* record */[/* paper */arg.paper];
}

var SizedDrawerDefs = /* module */[
  /* classRecordToJs */classRecordToJs,
  /* classRecordStringsFromJs */classRecordStringsFromJs,
  /* classes */classes
];

var SizedDrawer = MaterialUi_WithStyles.WithStylesSafe(SizedDrawerDefs);

function classRecordToJs$1(param) {
  return {
          grow: param[/* grow */0]
        };
}

var classes$1 = /* record */[/* grow */{
    flexGrow: "1"
  }];

function classRecordStringsFromJs$1(arg) {
  return /* record */[/* grow */arg.grow];
}

var GrowTitleDefs = /* module */[
  /* classRecordToJs */classRecordToJs$1,
  /* classRecordStringsFromJs */classRecordStringsFromJs$1,
  /* classes */classes$1
];

var GrowTitle = MaterialUi_WithStyles.WithStylesSafe(GrowTitleDefs);

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(match));
  } else {
    return /* () */0;
  }
}

function connectInputs(state) {
  var match = state[/* filterBanks */14];
  var match$1 = state[/* filterInput */5];
  var match$2 = state[/* merger */17][0];
  if (match !== undefined) {
    var match$3 = match;
    if (match$3.tag) {
      if (match$1 !== undefined) {
        if (match$2 !== undefined) {
          var merger = Js_primitive.valFromOption(match$2);
          var filterInput = match$1;
          Audio$Gayer.connectFilterBank(filterInput, match$3[0], merger, 0);
          return Audio$Gayer.connectFilterBank(filterInput, match$3[1], merger, 1);
        } else {
          console.log("could not connect inputs");
          return /* () */0;
        }
      } else {
        console.log("could not connect inputs");
        return /* () */0;
      }
    } else if (match$1 !== undefined) {
      if (match$2 !== undefined) {
        var merger$1 = Js_primitive.valFromOption(match$2);
        var filterBank = match$3[0];
        Audio$Gayer.connectFilterBank(match$1, filterBank, merger$1, 0);
        filterBank[/* output */3].connect(merger$1, 0, 1);
        return /* () */0;
      } else {
        console.log("could not connect inputs");
        return /* () */0;
      }
    } else {
      console.log("could not connect inputs");
      return /* () */0;
    }
  } else {
    console.log("could not connect inputs");
    return /* () */0;
  }
}

function disconnectInputs(state) {
  var match = state[/* filterBanks */14];
  var match$1 = state[/* filterInput */5];
  var match$2 = state[/* merger */17][0];
  if (match !== undefined) {
    var match$3 = match;
    if (match$3.tag) {
      if (match$1 !== undefined) {
        if (match$2 !== undefined) {
          var merger = Js_primitive.valFromOption(match$2);
          var filterInput = match$1;
          Audio$Gayer.disconnectFilterBank(filterInput, match$3[0], merger);
          return Audio$Gayer.disconnectFilterBank(filterInput, match$3[1], merger);
        } else {
          console.log("could not disconnect inputs");
          return /* () */0;
        }
      } else {
        console.log("could not disconnect inputs");
        return /* () */0;
      }
    } else if (match$1 !== undefined && match$2 !== undefined) {
      return Audio$Gayer.disconnectFilterBank(match$1, match$3[0], Js_primitive.valFromOption(match$2));
    } else {
      console.log("could not disconnect inputs");
      return /* () */0;
    }
  } else {
    console.log("could not disconnect inputs");
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function getReadAndWritePos(f, param) {
  var state = param[/* state */1];
  var width = state[/* params */6][/* width */0];
  var xToRead = Canvas$Gayer.wrapCoord(state[/* readPos */2][0] + state[/* params */6][/* readPosOffset */4] | 0, 0, width);
  var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */5] | 0, 0, width);
  return Curry._2(f, xToRead, xToWrite);
}

function drawLayer(ctx, width, height, state, layer) {
  ctx.globalAlpha = layer[/* alpha */2];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, layer[/* compositeOperation */3]);
  Canvas$Gayer.Ctx[/* setTransform */4](ctx, layer[/* transformMatrix */5]);
  ctx.rotate(layer[/* rotation */4]);
  ctx.filter = layer[/* filters */6];
  var layerKey = Layer$Gayer.getLayerKey(layer);
  if (Caml_int32.mod_(state[/* tickCounter */27][0], layer[/* tickPeriod */7]) === layer[/* tickPhase */8]) {
    var match = Belt_MapString.get(state[/* tickFunctions */26][0], layerKey);
    if (match !== undefined) {
      Curry._1(match, state[/* tickCounter */27][0]);
    }
    
  }
  var maybeLayerRef = Belt_MapString.get(state[/* layerRefs */19][0], layerKey);
  window.performance.mark(layerKey + "start");
  var match$1 = layer[/* content */0];
  var exit = 0;
  if (typeof match$1 === "number") {
    switch (match$1) {
      case 1 : 
          var match$2 = state[/* cameraInput */12][0];
          if (match$2 !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(match$2), 0, 0, width, height);
          }
          break;
      case 2 : 
          if (maybeLayerRef !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0, width, height);
          }
          break;
      case 3 : 
          if (maybeLayerRef !== undefined) {
            var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */5] | 0, 0, width);
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), xToWrite, 0, 1, height);
          }
          break;
      default:
        exit = 1;
    }
  } else {
    switch (match$1.tag | 0) {
      case 0 : 
          ctx.fillStyle = match$1[0];
          ctx.fillRect(0, 0, width, height);
          break;
      case 2 : 
          DrawCommand$Gayer.drawCommands(state[/* drawContext */23], match$1[0]);
          break;
      case 7 : 
          if (maybeLayerRef !== undefined) {
            var analysisCanvas = Js_primitive.valFromOption(maybeLayerRef);
            var analysisSize = match$1[0][/* analysisSize */2];
            var exit$1 = 0;
            if (typeof analysisSize === "number") {
              var x = Canvas$Gayer.wrapCoord(state[/* writePos */3][0] + state[/* params */6][/* writePosOffset */5] | 0, 0, width);
              ctx.drawImage(analysisCanvas, x, 0, 1, height);
            } else {
              switch (analysisSize.tag | 0) {
                case 0 : 
                case 1 : 
                    exit$1 = 3;
                    break;
                case 2 : 
                    var match$3 = analysisSize[0];
                    var analysisX = DrawCommand$Gayer.getLength(state[/* drawContext */23], match$3[/* x */0]);
                    var analysisY = DrawCommand$Gayer.getLength(state[/* drawContext */23], match$3[/* y */1]);
                    ctx.drawImage(analysisCanvas, analysisX, analysisY);
                    break;
                
              }
            }
            if (exit$1 === 3) {
              ctx.drawImage(analysisCanvas, 0, 0, width, height);
            }
            
          }
          break;
      case 8 : 
          var classList = Curry._1(Music$Gayer.PitchSet[/* elements */19], Curry._2(Music$Gayer.PitchSet[/* diff */8], Music$Gayer.allPitches, match$1[0]));
          ctx.fillStyle = "black";
          var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(height);
          for(var i = 0 ,i_finish = height / 10 | 0; i <= i_finish; ++i){
            List.iter((function(i){
                return function (j) {
                  var y = Caml_int32.imul(Caml_int32.imul(i, 12) + j | 0, pixelsPerSemitone);
                  ctx.fillRect(0, y, width, pixelsPerSemitone);
                  return /* () */0;
                }
                }(i)), classList);
          }
          break;
      case 9 : 
      case 10 : 
          exit = 2;
          break;
      case 11 : 
          var match$4 = match$1[0];
          if (match$4[/* encoding */4]) {
            if (maybeLayerRef !== undefined) {
              ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), match$4[/* x */0], match$4[/* y */1], match$4[/* w */2], match$4[/* h */3]);
            }
            
          }
          break;
      case 12 : 
          break;
      case 13 : 
          if (maybeLayerRef !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0);
          }
          break;
      case 14 : 
          var readerType = match$1[0];
          var xToRead = Canvas$Gayer.wrapCoord(state[/* readPos */2][0] + state[/* params */6][/* readPosOffset */4] | 0, 0, width);
          var slice = ctx.getImageData(xToRead, 0, 1, height);
          ImageDataUtil$Gayer.updateFilterValuesFromImageData(slice, readerType, state[/* currentFilterValues */18]);
          if (readerType) {
            var tmp;
            switch (readerType[0]) {
              case 0 : 
                  tmp = Canvas$Gayer.rgba(127, 0, 0, 0.5);
                  break;
              case 1 : 
                  tmp = Canvas$Gayer.rgba(0, 127, 0, 0.5);
                  break;
              case 2 : 
                  tmp = Canvas$Gayer.rgba(0, 0, 127, 0.5);
                  break;
              case 3 : 
                  tmp = Canvas$Gayer.rgba(127, 127, 127, 0.5);
                  break;
              
            }
            ctx.fillStyle = tmp;
            ctx.fillRect(xToRead, 0, 1, height);
          } else {
            ctx.fillStyle = Canvas$Gayer.rgba(255, 255, 255, 0.5);
            ctx.fillRect(xToRead, 0, 1, height);
          }
          break;
      default:
        exit = 1;
    }
  }
  switch (exit) {
    case 1 : 
    case 2 : 
        if (maybeLayerRef !== undefined) {
          ctx.drawImage(Js_primitive.valFromOption(maybeLayerRef), 0, 0, width, height);
        }
        break;
    
  }
  window.performance.mark(layerKey + "end");
  window.performance.measure(layerKey, layerKey + "start", layerKey + "end");
  setTimeout((function () {
          var match = Belt_MapString.get(state[/* tickFunctions */26][0], layerKey + "preview");
          if (match !== undefined) {
            return Curry._1(match, 0.0);
          } else {
            return /* () */0;
          }
        }), 0);
  return /* () */0;
}

function drawCanvas(canvasElement, width, height, state) {
  window.performance.mark("rootCanvas-start");
  if (state[/* params */6][/* shouldClear */13]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  List.iter((function (layer) {
          if (layer[/* enabled */1]) {
            return drawLayer(ctx, width, height, state, layer);
          } else {
            return 0;
          }
        }), state[/* params */6][/* layers */14]);
  window.performance.mark("rootCanvas-end");
  window.performance.measure("rootCanvas", "rootCanvas-start", "rootCanvas-end");
  window.performance.clearMarks();
  window.performance.clearMeasures();
  return /* () */0;
}

function getAnalysisInput(audioCtx, state, audioInput) {
  if (typeof audioInput === "number") {
    switch (audioInput) {
      case 0 : 
          return /* tuple */[
                  audioCtx,
                  Audio$Gayer.pinkNoise(audioCtx)
                ];
      case 1 : 
          return /* tuple */[
                  audioCtx,
                  Audio$Gayer.whiteNoise(audioCtx)
                ];
      case 2 : 
          return /* tuple */[
                  audioCtx,
                  state[/* micInput */11]
                ];
      
    }
  } else {
    switch (audioInput.tag | 0) {
      case 0 : 
          return /* tuple */[
                  audioCtx,
                  undefined
                ];
      case 1 : 
          return /* tuple */[
                  audioCtx,
                  Belt_MapString.get(state[/* loadedAudio */21][0], audioInput[0])
                ];
      case 2 : 
          var match = state[/* oscillatorBank */13][0];
          return /* tuple */[
                  audioCtx,
                  match !== undefined ? match[/* output */3] : undefined
                ];
      
    }
  }
}

var makeAudioElt = function (url){
     var audio = document.createElement("audio");
     audio.id = "audio-elt";
     audio.src = url;
     audio.loop = true;
     audio.autoplay = true;
     console.log(audio);

     document.body.appendChild(audio);
     return audio;
     };

function sortLayers(param) {
  return List.sort((function (a, b) {
                return Caml_obj.caml_compare(a[/* content */0], b[/* content */0]);
              }), param);
}

function generateNewFilterBanks(audioCtx, param) {
  var send = param[/* send */3];
  var state = param[/* state */1];
  console.log("regenerating filter banks (costly!)");
  var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(state[/* params */6][/* height */1]);
  state[/* freqFuncParams */4][0] = /* tuple */[
    pixelsPerSemitone,
    16
  ];
  var freqFunc = Audio$Gayer.yToFrequency(pixelsPerSemitone, 16 + state[/* params */6][/* transpose */11] | 0, state[/* params */6][/* height */1]);
  if (state[/* params */6][/* stereo */12]) {
    var filterBankL = Audio$Gayer.makeFilterBank(audioCtx, state[/* params */6][/* height */1], state[/* params */6][/* q */10], freqFunc);
    var filterBankR = Audio$Gayer.makeFilterBank(audioCtx, state[/* params */6][/* height */1], state[/* params */6][/* q */10], freqFunc);
    state[/* currentFilterValues */18][0] = /* Stereo */Block.__(1, [
        Caml_array.caml_make_vect(state[/* params */6][/* height */1], 0.0),
        Caml_array.caml_make_vect(state[/* params */6][/* height */1], 0.0)
      ]);
    return Curry._1(send, /* SetFilterBanks */Block.__(4, [/* StereoBanks */Block.__(1, [
                      filterBankL,
                      filterBankR
                    ])]));
  } else {
    var filterBank = Audio$Gayer.makeFilterBank(audioCtx, state[/* params */6][/* height */1], state[/* params */6][/* q */10], freqFunc);
    state[/* currentFilterValues */18][0] = /* Mono */Block.__(0, [Caml_array.caml_make_vect(state[/* params */6][/* height */1], 0.0)]);
    return Curry._1(send, /* SetFilterBanks */Block.__(4, [/* MonoBank */Block.__(0, [filterBank])]));
  }
}

function updateBank(state, values, filterBank) {
  return Audio$Gayer.updateFilterBank(state[/* params */6][/* inputGain */8], state[/* params */6][/* outputGain */9], filterBank, values);
}

function updateFilterBanks(param) {
  var state = param[/* state */1];
  var match = state[/* filterBanks */14];
  if (match !== undefined) {
    var match$1 = match;
    if (match$1.tag) {
      var filterBankR = match$1[1];
      var filterBankL = match$1[0];
      var match$2 = state[/* currentFilterValues */18][0];
      if (match$2 !== undefined) {
        var match$3 = match$2;
        if (match$3.tag) {
          updateBank(state, match$3[0], filterBankL);
          return updateBank(state, match$3[1], filterBankR);
        } else {
          var filterValues = match$3[0];
          updateBank(state, filterValues, filterBankL);
          return updateBank(state, filterValues, filterBankR);
        }
      } else {
        return /* () */0;
      }
    } else {
      var match$4 = state[/* currentFilterValues */18][0];
      if (match$4 !== undefined) {
        return updateBank(state, match$4[0], match$1[0]);
      } else {
        return /* () */0;
      }
    }
  } else {
    return /* () */0;
  }
}

function saveTick(param, onUnmount, key, tickFn) {
  var state = param[/* state */1];
  state[/* tickFunctions */26][0] = Belt_MapString.set(state[/* tickFunctions */26][0], key, tickFn);
  return Curry._1(onUnmount, (function () {
                state[/* tickFunctions */26][0] = Belt_MapString.remove(state[/* tickFunctions */26][0], key);
                return /* () */0;
              }));
}

function make($staropt$star, _) {
  var audioCtx = $staropt$star !== undefined ? Js_primitive.valFromOption($staropt$star) : Curry._1(Audio$Gayer.makeDefaultAudioCtx, /* () */0);
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var merger = audioCtx.createChannelMerger();
              self[/* state */1][/* merger */17][0] = Js_primitive.some(merger);
              var compressor = Audio$Gayer.makeCompressor(audioCtx, Audio$Gayer.defaultCompressorValues);
              var masterGain = audioCtx.createGain();
              self[/* state */1][/* compressor */15][0] = Js_primitive.some(compressor);
              self[/* state */1][/* masterGain */16][0] = Js_primitive.some(masterGain);
              masterGain.gain.setValueAtTime(audioCtx.currentTime, 0.5);
              var noise = Audio$Gayer.pinkNoise(audioCtx);
              Curry._1(self[/* send */3], /* SetFilterInput */Block.__(1, [noise]));
              self[/* state */1][/* audioGraph */10][0] = AudioGraph$Gayer.updateConnections(AudioGraph$Gayer.addEdge(/* tuple */[
                        "masterGain",
                        "sink",
                        0,
                        0
                      ], AudioGraph$Gayer.addEdge(/* tuple */[
                            "compressor",
                            "masterGain",
                            0,
                            0
                          ], AudioGraph$Gayer.addEdge(/* tuple */[
                                "merger",
                                "compressor",
                                0,
                                0
                              ], AudioGraph$Gayer.addNode(/* tuple */[
                                    "sink",
                                    audioCtx.destination
                                  ], AudioGraph$Gayer.addNode(/* tuple */[
                                        "masterGain",
                                        masterGain
                                      ], AudioGraph$Gayer.addNode(/* tuple */[
                                            "compressor",
                                            compressor
                                          ], AudioGraph$Gayer.addNode(/* tuple */[
                                                "merger",
                                                merger
                                              ], self[/* state */1][/* audioGraph */10][0]))))))));
              generateNewFilterBanks(audioCtx, self);
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match !== undefined) {
                Js_primitive.valFromOption(match).then((function (stream) {
                        Curry._1(self[/* send */3], /* SetMediaStream */Block.__(3, [stream]));
                        var audio = audioCtx.createMediaStreamSource(stream);
                        Curry._1(self[/* send */3], /* SetMicInput */Block.__(2, [audio]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* Clear */0);
              Timing$Gayer.setTimer(self[/* state */1][/* timerId */28], (function () {
                      return Curry._1(self[/* send */3], /* Tick */1);
                    }), self[/* state */1][/* params */6][/* millisPerTick */6]);
              Curry._1(self[/* onUnmount */4], (function () {
                      return Timing$Gayer.maybeClearTimer(self[/* state */1][/* timerId */28]);
                    }));
              var watcherID = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      var exit = 0;
                      var i;
                      try {
                        i = Caml_format.caml_int_of_string(url[/* search */2]);
                        exit = 1;
                      }
                      catch (exn){
                        
                      }
                      if (exit === 1) {
                        self[/* state */1][/* startingIndexRef */25][0] = i;
                        i;
                      }
                      var hash = decodeURIComponent(url[/* hash */1]);
                      var match = Json.parse(hash);
                      if (match !== undefined) {
                        var match$1 = Json_decode.optional(Params$Gayer.DecodeParams[/* params */0], Js_primitive.valFromOption(match));
                        if (match$1 !== undefined) {
                          return Curry._1(self[/* send */3], /* SetParams */Block.__(7, [match$1]));
                        } else {
                          console.log("unable to decode params");
                          return /* () */0;
                        }
                      } else {
                        console.log("Could not parse json");
                        return /* () */0;
                      }
                    }));
              Curry._1(self[/* onUnmount */4], (function () {
                      return ReasonReact.Router[/* unwatchUrl */2](watcherID);
                    }));
              var url = ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0);
              if (url[/* hash */1] === "" || url[/* search */2] === "") {
                return Routes$Gayer.pushParamsState(0, List.nth(Presets$Gayer.presets, 0)[1]);
              } else {
                var exit = 0;
                var i;
                try {
                  i = Caml_format.caml_int_of_string(url[/* search */2]);
                  exit = 1;
                }
                catch (exn){
                  
                }
                if (exit === 1) {
                  self[/* state */1][/* startingIndexRef */25][0] = i;
                }
                return ReasonReact.Router[/* push */0]("?" + (url[/* search */2] + ("#" + url[/* hash */1])));
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterInput */5], newSelf[/* state */1][/* filterInput */5]) || Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterBanks */14], newSelf[/* state */1][/* filterBanks */14])) {
                disconnectInputs(oldSelf[/* state */1]);
              }
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */6][/* audioInputSetting */7], newSelf[/* state */1][/* params */6][/* audioInputSetting */7])) {
                var match = getAnalysisInput(audioCtx, newSelf[/* state */1], newSelf[/* state */1][/* params */6][/* audioInputSetting */7]);
                var audio = match[1];
                if (audio !== undefined) {
                  Curry._1(newSelf[/* send */3], /* SetFilterInput */Block.__(1, [audio]));
                }
                
              }
              var layersChanged = Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */6][/* layers */14], newSelf[/* state */1][/* params */6][/* layers */14]);
              if (layersChanged || oldSelf[/* state */1][/* params */6][/* readPosOffset */4] !== newSelf[/* state */1][/* params */6][/* readPosOffset */4] || oldSelf[/* state */1][/* params */6][/* writePosOffset */5] !== newSelf[/* state */1][/* params */6][/* readPosOffset */4]) {
                newSelf[/* state */1][/* readPos */2][0] = 0;
                newSelf[/* state */1][/* writePos */3][0] = 0;
                newSelf[/* state */1][/* currentFilterValues */18][0] = /* Mono */Block.__(0, [Caml_array.caml_make_vect(newSelf[/* state */1][/* params */6][/* height */1], 0.0)]);
              }
              if (oldSelf[/* state */1][/* params */6][/* q */10] !== newSelf[/* state */1][/* params */6][/* q */10] || oldSelf[/* state */1][/* params */6][/* transpose */11] !== newSelf[/* state */1][/* params */6][/* transpose */11] || oldSelf[/* state */1][/* params */6][/* stereo */12] !== newSelf[/* state */1][/* params */6][/* stereo */12] || oldSelf[/* state */1][/* params */6][/* height */1] !== newSelf[/* state */1][/* params */6][/* height */1]) {
                generateNewFilterBanks(audioCtx, newSelf);
              }
              if (oldSelf[/* state */1][/* params */6][/* millisPerTick */6] !== newSelf[/* state */1][/* params */6][/* millisPerTick */6]) {
                Timing$Gayer.setTimer(newSelf[/* state */1][/* timerId */28], (function () {
                        return Curry._1(newSelf[/* send */3], /* Tick */1);
                      }), newSelf[/* state */1][/* params */6][/* millisPerTick */6]);
              }
              if (oldSelf[/* state */1][/* fullscreenCanvas */24] !== newSelf[/* state */1][/* fullscreenCanvas */24]) {
                if (newSelf[/* state */1][/* fullscreenCanvas */24]) {
                  var match$1 = newSelf[/* state */1][/* canvasRef */22][0];
                  if (match$1 !== undefined) {
                    Fscreen.requestFullscreen(Js_primitive.valFromOption(match$1));
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                } else {
                  exitFullscreen(Fscreen);
                  return /* () */0;
                }
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              return disconnectInputs(self[/* state */1]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* score */7];
              var partial_arg = self[/* state */1];
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, MaterialUi_CssBaseline.make(/* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_AppBar.make(undefined, undefined, /* Sticky */1070408009, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_Toolbar.make(undefined, undefined, undefined, undefined, /* array */[
                                            ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.Menu[/* make */0](/* array */[]))])),
                                            ReasonReact.element(undefined, undefined, Curry._2(GrowTitle[/* make */6], (function (classes) {
                                                        return ReasonReact.element(undefined, undefined, MaterialUi_Typography.make(undefined, undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, /* Title */594052472, /* :: */[
                                                                        /* Title */Block.__(6, [classes[/* grow */0]]),
                                                                        /* [] */0
                                                                      ], undefined, /* array */["GAYER"]));
                                                      }), /* array */[])),
                                            match !== undefined ? ReasonReact.element(undefined, undefined, ScoreControl$Gayer.make(match, /* array */[])) : null
                                          ]))])), React.createElement("div", {
                              style: {
                                padding: "12px"
                              }
                            }, ReasonReact.element(undefined, undefined, Curry._2(SizedDrawer[/* make */6], (function (classes) {
                                        return ReasonReact.element(undefined, undefined, MaterialUi_Drawer.make(undefined, undefined, undefined, undefined, undefined, self[/* state */1][/* presetDrawerOpen */8], undefined, undefined, undefined, undefined, /* Temporary */-103274127, /* :: */[
                                                        /* Paper */Block.__(1, [classes[/* paper */0]]),
                                                        /* [] */0
                                                      ], undefined, /* array */[
                                                        React.createElement("div", {
                                                              style: {
                                                                display: "flex",
                                                                padding: "0 8px",
                                                                alignItems: "center",
                                                                justifyContent: "flex-end"
                                                              }
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_IconButton.make(undefined, /* Inherit */-72987685, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                        return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                      }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUIIcons.ChevronLeft[/* make */0](/* array */[]))]))),
                                                        ReasonReact.element(undefined, undefined, MaterialUi_Divider.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[])),
                                                        React.createElement("div", {
                                                              role: "button",
                                                              tabIndex: 0,
                                                              onKeyDown: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                }),
                                                              onClick: (function () {
                                                                  return Curry._1(self[/* send */3], /* TogglePresetDrawer */2);
                                                                })
                                                            }, ReasonReact.element(undefined, undefined, MaterialUi_List.make(undefined, /* `String */[
                                                                      -976970511,
                                                                      "nav"
                                                                    ], undefined, undefined, undefined, undefined, undefined, /* array */[$$Array.mapi((function (i, param) {
                                                                              var preset = param[1];
                                                                              var name = param[0];
                                                                              return ReasonReact.element(name, undefined, MaterialUi_ListItem.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                                                                return Routes$Gayer.pushParamsState(Js_primitive.some(i), preset);
                                                                                              }), undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, MaterialUi_ListItemText.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[name]))]));
                                                                            }), $$Array.of_list(Presets$Gayer.presets))])))
                                                      ]));
                                      }), /* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, /* V24 */3, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Params$Gayer.make(self[/* state */1][/* params */6], (function (layers) {
                                                            return Curry._1(self[/* send */3], /* SetLayers */Block.__(6, [layers]));
                                                          }), (function (layer, theRef) {
                                                            return Curry._2(self[/* handle */0], (function (param, param$1) {
                                                                          return setLayerRef(audioCtx, param, param$1);
                                                                        }), /* tuple */[
                                                                        layer,
                                                                        theRef
                                                                      ]);
                                                          }), self[/* state */1][/* layerRefs */19], (function (oldLayer, maybeNewLayer) {
                                                            return Curry._1(self[/* send */3], /* ChangeLayer */Block.__(5, [
                                                                          oldLayer,
                                                                          maybeNewLayer
                                                                        ]));
                                                          }), (function (newParams) {
                                                            return Routes$Gayer.pushParamsState(undefined, newParams);
                                                          }), (function (param, param$1, param$2) {
                                                            return saveTick(self, param, param$1, param$2);
                                                          }), self[/* state */1][/* savedImages */20], /* array */[]))])),
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V4 */3, undefined, undefined, undefined, /* array */[React.createElement("div", {
                                                      id: "main-display",
                                                      style: {
                                                        marginBottom: "24px",
                                                        minHeight: "400px",
                                                        position: "fixed"
                                                      }
                                                    }, ReasonReact.element(undefined, undefined, MediaProvider$Gayer.make(sortLayers(self[/* state */1][/* params */6][/* layers */14]), self[/* state */1][/* params */6][/* width */0], self[/* state */1][/* params */6][/* height */1], (function (layer, theRef) {
                                                                return Curry._2(self[/* handle */0], (function (param, param$1) {
                                                                              return setLayerRef(audioCtx, param, param$1);
                                                                            }), /* tuple */[
                                                                            layer,
                                                                            theRef
                                                                          ]);
                                                              }), (function (param) {
                                                                return getAnalysisInput(audioCtx, partial_arg, param);
                                                              }), self[/* state */1][/* drawContext */23], self[/* state */1][/* audioGraph */10], audioCtx, self[/* state */1][/* layerRefs */19], self[/* state */1][/* currentFilterValues */18], (function (param, param$1, param$2) {
                                                                return saveTick(self, param, param$1, param$2);
                                                              }), self[/* state */1][/* readPos */2], self[/* state */1][/* writePos */3], self[/* state */1][/* params */6][/* millisPerTick */6], /* array */[])), React.createElement("canvas", {
                                                          ref: Curry._1(self[/* handle */0], setCanvasRef),
                                                          style: {
                                                            transform: "scale(" + ((400.0 / self[/* state */1][/* params */6][/* height */1]).toString() + ")"),
                                                            transformOrigin: "top left",
                                                            imageRendering: "crisp-edges"
                                                          },
                                                          height: self[/* state */1][/* params */6][/* height */1].toString(),
                                                          width: self[/* state */1][/* params */6][/* width */0].toString()
                                                        }))])),
                                      ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V2 */1, undefined, undefined, undefined, /* array */[
                                                ReasonReact.element(undefined, undefined, MaterialUi_Button.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Contained */-515484397, undefined, undefined, undefined, undefined, undefined, undefined, (function () {
                                                            return Curry._1(self[/* send */3], /* SaveImage */3);
                                                          }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, {
                                                          position: "fixed"
                                                        }, /* array */[
                                                          ReasonReact.element(undefined, undefined, MaterialUIIcons.PhotoCamera[/* make */0](/* array */[])),
                                                          "Snapshot"
                                                        ])),
                                                React.createElement("div", {
                                                      style: {
                                                        marginTop: "48px"
                                                      }
                                                    }, $$Array.map((function (param) {
                                                            return React.createElement("img", {
                                                                        key: param[0],
                                                                        src: param[1],
                                                                        width: "100%"
                                                                      });
                                                          }), Belt_MapString.toArray(self[/* state */1][/* savedImages */20])))
                                              ]))
                                    ]))));
            }),
          /* initialState */defaultState,
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    return maybeUpdateCanvas(self[/* state */1][/* canvasRef */22], (function (canvas) {
                                                  return clearCanvas(canvas, self[/* state */1][/* params */6][/* width */0], self[/* state */1][/* params */6][/* height */1]);
                                                }));
                                  })]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    state[/* tickCounter */27][0] = state[/* tickCounter */27][0] + 1 | 0;
                                    state[/* readPos */2][0] = Canvas$Gayer.wrapCoord(state[/* readPos */2][0], state[/* params */6][/* readPosDelta */2], state[/* params */6][/* width */0]);
                                    state[/* writePos */3][0] = Canvas$Gayer.wrapCoord(state[/* writePos */3][0], state[/* params */6][/* writePosDelta */3], state[/* params */6][/* width */0]);
                                    return maybeUpdateCanvas(state[/* canvasRef */22], (function (canvas) {
                                                  drawCanvas(canvas, state[/* params */6][/* width */0], state[/* params */6][/* height */1], state);
                                                  updateFilterBanks(self);
                                                  var match = state[/* oscillatorBank */13][0];
                                                  if (match !== undefined) {
                                                    var match$1 = state[/* currentFilterValues */18][0];
                                                    if (match$1 !== undefined) {
                                                      return Audio$Gayer.updateBankGains(match, match$1[0]);
                                                    } else {
                                                      return /* () */0;
                                                    }
                                                  } else {
                                                    return /* () */0;
                                                  }
                                                }));
                                  })]);
                  case 2 : 
                      var newrecord = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord[/* presetDrawerOpen */8] = !state[/* presetDrawerOpen */8], newrecord)]);
                  case 3 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = state[/* canvasRef */22][0];
                                    if (match !== undefined) {
                                      var url = Js_primitive.valFromOption(match).toDataURL();
                                      return Curry._1(self[/* send */3], /* AddSavedImage */Block.__(0, [url]));
                                    } else {
                                      return /* () */0;
                                    }
                                  })]);
                  case 4 : 
                      var newrecord$1 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$1[/* fullscreenCanvas */24] = !state[/* fullscreenCanvas */24], newrecord$1)]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var timestamp = (new Date().toISOString());
                      var newrecord$2 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$2[/* savedImages */20] = Belt_MapString.set(state[/* savedImages */20], timestamp, action[0]), newrecord$2)]);
                  case 1 : 
                      var newrecord$3 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$3[/* filterInput */5] = action[0], newrecord$3),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 2 : 
                      var newrecord$4 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$4[/* micInput */11] = action[0], newrecord$4)]);
                  case 3 : 
                      var newrecord$5 = Caml_array.caml_array_dup(state);
                      return /* Update */Block.__(0, [(newrecord$5[/* mediaStream */9] = Js_primitive.some(action[0]), newrecord$5)]);
                  case 4 : 
                      var newrecord$6 = Caml_array.caml_array_dup(state);
                      return /* UpdateWithSideEffects */Block.__(2, [
                                (newrecord$6[/* filterBanks */14] = action[0], newrecord$6),
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 5 : 
                      var maybeNewLayer = action[1];
                      var oldLayer = action[0];
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var init = self[/* state */1][/* params */6];
                                    return Routes$Gayer.pushParamsState(undefined, /* record */[
                                                /* width */init[/* width */0],
                                                /* height */init[/* height */1],
                                                /* readPosDelta */init[/* readPosDelta */2],
                                                /* writePosDelta */init[/* writePosDelta */3],
                                                /* readPosOffset */init[/* readPosOffset */4],
                                                /* writePosOffset */init[/* writePosOffset */5],
                                                /* millisPerTick */init[/* millisPerTick */6],
                                                /* audioInputSetting */init[/* audioInputSetting */7],
                                                /* inputGain */init[/* inputGain */8],
                                                /* outputGain */init[/* outputGain */9],
                                                /* q */init[/* q */10],
                                                /* transpose */init[/* transpose */11],
                                                /* stereo */init[/* stereo */12],
                                                /* shouldClear */init[/* shouldClear */13],
                                                /* layers */changeLayer(oldLayer, maybeNewLayer, self[/* state */1][/* params */6][/* layers */14])
                                              ]);
                                  })]);
                  case 6 : 
                      var layers = action[0];
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var init = self[/* state */1][/* params */6];
                                    return Routes$Gayer.pushParamsState(undefined, /* record */[
                                                /* width */init[/* width */0],
                                                /* height */init[/* height */1],
                                                /* readPosDelta */init[/* readPosDelta */2],
                                                /* writePosDelta */init[/* writePosDelta */3],
                                                /* readPosOffset */init[/* readPosOffset */4],
                                                /* writePosOffset */init[/* writePosOffset */5],
                                                /* millisPerTick */init[/* millisPerTick */6],
                                                /* audioInputSetting */init[/* audioInputSetting */7],
                                                /* inputGain */init[/* inputGain */8],
                                                /* outputGain */init[/* outputGain */9],
                                                /* q */init[/* q */10],
                                                /* transpose */init[/* transpose */11],
                                                /* stereo */init[/* stereo */12],
                                                /* shouldClear */init[/* shouldClear */13],
                                                /* layers */layers
                                              ]);
                                  })]);
                  case 7 : 
                      var params = action[0];
                      var newrecord$7 = Caml_array.caml_array_dup(state);
                      newrecord$7[/* params */6] = params;
                      var init = state[/* drawContext */23];
                      newrecord$7[/* drawContext */23] = /* record */[
                        /* maybeCtxRef */init[/* maybeCtxRef */0],
                        /* layerRefs */init[/* layerRefs */1],
                        /* width */params[/* width */0],
                        /* height */params[/* height */1],
                        /* variables */init[/* variables */4]
                      ];
                      return /* Update */Block.__(0, [newrecord$7]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var RList = 0;

export {
  RList ,
  defaultState ,
  setCanvasRef ,
  setLayerRef ,
  changeLayer ,
  SizedDrawerDefs ,
  SizedDrawer ,
  GrowTitleDefs ,
  GrowTitle ,
  component ,
  maybeUpdateCanvas ,
  connectInputs ,
  disconnectInputs ,
  clearCanvas ,
  getReadAndWritePos ,
  drawLayer ,
  drawCanvas ,
  getAnalysisInput ,
  makeAudioElt ,
  sortLayers ,
  generateNewFilterBanks ,
  updateBank ,
  updateFilterBanks ,
  saveTick ,
  make ,
  
}
/* SizedDrawer Not a pure module */
