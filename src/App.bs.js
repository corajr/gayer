// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Params$Gayer from "./Params.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as MaterialUi_Grid from "@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js";
import * as RList$Rationale from "rationale/src/RList.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";
import * as AnalysisCanvas$Gayer from "./AnalysisCanvas.bs.js";
import * as MaterialUi_CssBaseline from "@jsiebern/bs-material-ui/src/MaterialUi_CssBaseline.bs.js";

var defaultState_000 = /* readPos : record */[/* contents */0];

var defaultState_001 = /* writePos : record */[/* contents */0];

var defaultState_007 = /* cameraInput : record */[/* contents */undefined];

var defaultState_009 = /* compressor : record */[/* contents */undefined];

var defaultState_010 = /* analysisCanvasRef : record */[/* contents */undefined];

var defaultState_011 = /* loadedImages : record */[/* contents */Belt_MapString.empty];

var defaultState_012 = /* canvasRef : record */[/* contents */undefined];

var defaultState_013 = /* timerId : record */[/* contents */undefined];

var defaultState = /* record */[
  defaultState_000,
  defaultState_001,
  /* filterInput */undefined,
  /* visualInput */undefined,
  /* params */Params$Gayer.defaultParams,
  /* mediaStream */undefined,
  /* micInput */undefined,
  defaultState_007,
  /* filterBank */undefined,
  defaultState_009,
  defaultState_010,
  defaultState_011,
  defaultState_012,
  defaultState_013
];

function setCanvasRef(theRef, param) {
  param[/* state */1][/* canvasRef */12][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setAnalysisCanvasRef(theRef, param) {
  param[/* state */1][/* analysisCanvasRef */10][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setLayerRef(param, param$1) {
  var state = param$1[/* state */1];
  var theRef = param[1];
  var match = param[0][/* content */0];
  if (typeof match === "number") {
    return /* () */0;
  } else {
    switch (match.tag | 0) {
      case 1 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            var match$1 = state[/* mediaStream */5];
            if (match$1 !== undefined) {
              var video = Video$Gayer.attachVideoStream(theRef, Js_primitive.valFromOption(match$1));
              state[/* cameraInput */7][0] = Js_primitive.some(video);
              return /* () */0;
            } else {
              return /* () */0;
            }
          }
      case 2 : 
          if (theRef == null) {
            return /* () */0;
          } else {
            state[/* loadedImages */11][0] = Belt_MapString.set(state[/* loadedImages */11][0], match[0], theRef);
            return /* () */0;
          }
      default:
        return /* () */0;
    }
  }
}

function changeLayer(oldLayer, newLayer, layers) {
  var match = RList$Rationale.indexOf(oldLayer, layers);
  if (match !== undefined) {
    return RList$Rationale.update(newLayer, match, layers);
  } else {
    return layers;
  }
}

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(match));
  } else {
    return /* () */0;
  }
}

function maybeMapFilterBank(f, maybeFilterBank) {
  if (maybeFilterBank !== undefined) {
    return Curry._1(f, maybeFilterBank);
  } else {
    return /* () */0;
  }
}

function connectInputs(state) {
  var match = state[/* filterBank */8];
  var match$1 = state[/* filterInput */2];
  var match$2 = state[/* compressor */9][0];
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
    return Audio$Gayer.connectFilterBank(match$1, match, Js_primitive.valFromOption(match$2));
  } else {
    console.log("could not connect inputs");
    return /* () */0;
  }
}

function disconnectInputs(state) {
  var match = state[/* filterBank */8];
  var match$1 = state[/* filterInput */2];
  var match$2 = state[/* compressor */9][0];
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
    return Audio$Gayer.disconnectFilterBank(match$1, match, Js_primitive.valFromOption(match$2));
  } else {
    console.log("could not disconnect inputs");
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function pushParamsState(newParams) {
  var newParamsJson = JSON.stringify(Params$Gayer.EncodeParams[/* params */0](newParams));
  return ReasonReact.Router[/* push */0]("#" + newParamsJson);
}

function drawLayer(ctx, width, height, state, layer) {
  ctx.globalAlpha = layer[/* alpha */1];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, layer[/* compositeOperation */2]);
  var match = layer[/* content */0];
  if (typeof match === "number") {
    var match$1 = state[/* analysisCanvasRef */10][0];
    if (match$1 !== undefined) {
      var x = Canvas$Gayer.wrapCoord(state[/* writePos */1][0] + state[/* params */4][/* writePosOffset */2] | 0, 0, width);
      ctx.drawImage(Js_primitive.valFromOption(match$1), x, 0);
    }
    return undefined;
  } else {
    switch (match.tag | 0) {
      case 0 : 
          ctx.fillStyle = match[0];
          ctx.fillRect(0, 0, width, height);
          return undefined;
      case 1 : 
          var match$2 = state[/* cameraInput */7][0];
          if (match$2 !== undefined) {
            var input = Js_primitive.valFromOption(match$2);
            if (match[0][/* slitscan */0] !== undefined) {
              var xToWrite = Canvas$Gayer.wrapCoord(state[/* writePos */1][0] + state[/* params */4][/* writePosOffset */2] | 0, 0, width);
              ctx.drawImage(input, xToWrite, 0, 1, height);
            } else {
              ctx.drawImage(input, 0, 0, width, height);
            }
          }
          return undefined;
      case 2 : 
          var match$3 = Belt_MapString.get(state[/* loadedImages */11][0], match[0]);
          if (match$3 !== undefined) {
            ctx.drawImage(Js_primitive.valFromOption(match$3), 0, 0, width, height);
          }
          return undefined;
      case 3 : 
          var classList = Curry._1(Music$Gayer.PitchSet[/* elements */19], Curry._2(Music$Gayer.PitchSet[/* diff */8], Music$Gayer.allPitches, match[0]));
          ctx.fillStyle = "black";
          var binsPerSemitone = height / 120 | 0;
          for(var i = 0 ,i_finish = height / 10 | 0; i <= i_finish; ++i){
            List.iter((function(i){
                return function (j) {
                  var y = Caml_int32.imul(Caml_int32.imul(i, 12) + j | 0, binsPerSemitone);
                  ctx.fillRect(0, y, width, binsPerSemitone);
                  return /* () */0;
                }
                }(i)), classList);
          }
          return undefined;
      case 4 : 
          var channel = match[0];
          var slice = ctx.getImageData(state[/* readPos */0][0], 0, 1, height);
          var tmp;
          switch (channel) {
            case 0 : 
                tmp = "red";
                break;
            case 1 : 
                tmp = "green";
                break;
            case 2 : 
                tmp = "blue";
                break;
            case 3 : 
                tmp = "white";
                break;
            
          }
          ctx.fillStyle = tmp;
          ctx.fillRect(state[/* readPos */0][0], 0, 1, height);
          return Canvas$Gayer.imageDataToFloatArray(slice, channel);
      
    }
  }
}

function drawCanvas(canvasElement, width, height, state) {
  if (state[/* params */4][/* shouldClear */8]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  return List.fold_left((function (values, layer) {
                var newMaybeValues = drawLayer(ctx, width, height, state, layer);
                if (newMaybeValues !== undefined) {
                  return newMaybeValues;
                } else {
                  return values;
                }
              }), Caml_array.caml_make_vect(height, 0.0), state[/* params */4][/* layers */9]);
}

function getAnalysisInput(audioCtx, state, audioInput) {
  if (typeof audioInput === "number") {
    if (audioInput !== 0) {
      return state[/* micInput */6];
    } else {
      return Audio$Gayer.pinkNoise(audioCtx);
    }
  }
  
}

function make($staropt$star, $staropt$star$1, $staropt$star$2, _) {
  var width = $staropt$star !== undefined ? $staropt$star : 120;
  var height = $staropt$star$1 !== undefined ? $staropt$star$1 : 120;
  var audioCtx = $staropt$star$2 !== undefined ? Js_primitive.valFromOption($staropt$star$2) : Curry._1(Audio$Gayer.makeDefaultAudioCtx, /* () */0);
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var compressor = Audio$Gayer.makeCompressor(audioCtx, Audio$Gayer.defaultCompressorValues);
              compressor.connect(audioCtx.destination);
              self[/* state */1][/* compressor */9][0] = Js_primitive.some(compressor);
              var noise = Audio$Gayer.pinkNoise(audioCtx);
              Curry._1(self[/* send */3], /* SetFilterInput */Block.__(1, [noise]));
              var filterBank = Audio$Gayer.makeFilterBank(audioCtx, height, Audio$Gayer.defaultQ, Audio$Gayer.yToFrequency(height / 120 | 0, 16 + self[/* state */1][/* params */4][/* transpose */7] | 0));
              Curry._1(self[/* send */3], /* SetFilterBank */Block.__(4, [filterBank]));
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match !== undefined) {
                Js_primitive.valFromOption(match).then((function (stream) {
                        Curry._1(self[/* send */3], /* SetMediaStream */Block.__(3, [stream]));
                        var audio = audioCtx.createMediaStreamSource(stream);
                        Curry._1(self[/* send */3], /* SetMicInput */Block.__(2, [audio]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* Clear */0);
              self[/* state */1][/* timerId */13][0] = Js_primitive.some(setInterval((function () {
                          return Curry._1(self[/* send */3], /* Tick */1);
                        }), 20));
              var watcherID = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      var hash = decodeURIComponent(url[/* hash */1]);
                      var match = Json.parse(hash);
                      if (match !== undefined) {
                        var match$1 = Json_decode.optional(Params$Gayer.DecodeParams[/* params */0], Js_primitive.valFromOption(match));
                        if (match$1 !== undefined) {
                          return Curry._1(self[/* send */3], /* SetParams */Block.__(5, [match$1]));
                        } else {
                          console.log("unable to decode params");
                          return /* () */0;
                        }
                      } else {
                        console.log("Could not parse json");
                        return /* () */0;
                      }
                    }));
              Curry._1(self[/* onUnmount */4], (function () {
                      return ReasonReact.Router[/* unwatchUrl */2](watcherID);
                    }));
              var url = ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0);
              if (url[/* hash */1] === "") {
                return pushParamsState(self[/* state */1][/* params */4]);
              } else {
                return ReasonReact.Router[/* push */0]("#" + url[/* hash */1]);
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterInput */2], newSelf[/* state */1][/* filterInput */2]) || Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterBank */8], newSelf[/* state */1][/* filterBank */8])) {
                disconnectInputs(oldSelf[/* state */1]);
              }
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* params */4][/* audioInputSetting */3], newSelf[/* state */1][/* params */4][/* audioInputSetting */3])) {
                var match = newSelf[/* state */1][/* params */4][/* audioInputSetting */3];
                if (typeof match === "number") {
                  if (match !== 0) {
                    var match$1 = newSelf[/* state */1][/* micInput */6];
                    if (match$1 !== undefined) {
                      return Curry._1(newSelf[/* send */3], /* SetFilterInput */Block.__(1, [match$1]));
                    } else {
                      return /* () */0;
                    }
                  } else {
                    return Curry._1(newSelf[/* send */3], /* SetFilterInput */Block.__(1, [Audio$Gayer.pinkNoise(audioCtx)]));
                  }
                } else {
                  return /* () */0;
                }
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              return disconnectInputs(self[/* state */1]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          style: {
                            padding: "12px"
                          }
                        }, ReasonReact.element(undefined, undefined, MaterialUi_CssBaseline.make(/* array */[])), ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, /* V24 */3, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[
                                  ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V12 */11, undefined, undefined, undefined, /* array */[
                                            React.createElement("h1", undefined, "GAYER"),
                                            React.createElement("a", {
                                                  href: "https://github.com/corajr/gayer"
                                                }, "source")
                                          ])),
                                  ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, Params$Gayer.make(self[/* state */1][/* params */4], (function (layers) {
                                                        return Curry._1(self[/* send */3], /* SetLayers */Block.__(0, [layers]));
                                                      }), (function (layer, theRef) {
                                                        return Curry._2(self[/* handle */0], setLayerRef, /* tuple */[
                                                                    layer,
                                                                    theRef
                                                                  ]);
                                                      }), (function (oldLayer, newLayer) {
                                                        return Curry._1(self[/* send */3], /* SetLayers */Block.__(0, [changeLayer(oldLayer, newLayer, self[/* state */1][/* params */4][/* layers */9])]));
                                                      }), /* array */[]))])),
                                  ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* V6 */5, undefined, undefined, undefined, /* array */[
                                            React.createElement("canvas", {
                                                  ref: Curry._1(self[/* handle */0], setCanvasRef),
                                                  style: {
                                                    transform: "scale(4)",
                                                    transformOrigin: "top left"
                                                  },
                                                  height: height.toString(),
                                                  width: width.toString()
                                                }),
                                            ReasonReact.element(undefined, undefined, AnalysisCanvas$Gayer.make(height, audioCtx, self[/* state */1][/* micInput */6], Curry._1(self[/* handle */0], setAnalysisCanvasRef), /* array */[]))
                                          ]))
                                ])));
            }),
          /* initialState */(function () {
              return defaultState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                return maybeUpdateCanvas(self[/* state */1][/* canvasRef */12], (function (canvas) {
                                              return clearCanvas(canvas, width, height);
                                            }));
                              })]);
                } else {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                self[/* state */1][/* readPos */0][0] = Canvas$Gayer.wrapCoord(state[/* readPos */0][0], state[/* params */4][/* readPosDelta */0], width);
                                self[/* state */1][/* writePos */1][0] = Canvas$Gayer.wrapCoord(state[/* writePos */1][0], state[/* params */4][/* writePosDelta */1], width);
                                return maybeUpdateCanvas(self[/* state */1][/* canvasRef */12], (function (canvas) {
                                              var filterValues = drawCanvas(canvas, width, height, self[/* state */1]);
                                              return maybeMapFilterBank((function (filterBank) {
                                                            return Audio$Gayer.updateFilterBank(self[/* state */1][/* params */4][/* inputGain */4], self[/* state */1][/* params */4][/* outputGain */5], self[/* state */1][/* params */4][/* q */6], Audio$Gayer.yToFrequency(height / 120 | 0, 16 + self[/* state */1][/* params */4][/* transpose */7] | 0), filterBank, filterValues);
                                                          }), self[/* state */1][/* filterBank */8]);
                                            }));
                              })]);
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var layers = action[0];
                      return /* SideEffects */Block.__(1, [(function () {
                                    var init = state[/* params */4];
                                    return pushParamsState(/* record */[
                                                /* readPosDelta */init[/* readPosDelta */0],
                                                /* writePosDelta */init[/* writePosDelta */1],
                                                /* writePosOffset */init[/* writePosOffset */2],
                                                /* audioInputSetting */init[/* audioInputSetting */3],
                                                /* inputGain */init[/* inputGain */4],
                                                /* outputGain */init[/* outputGain */5],
                                                /* q */init[/* q */6],
                                                /* transpose */init[/* transpose */7],
                                                /* shouldClear */init[/* shouldClear */8],
                                                /* layers */layers
                                              ]);
                                  })]);
                  case 1 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */action[0],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* mediaStream */state[/* mediaStream */5],
                                  /* micInput */state[/* micInput */6],
                                  /* cameraInput */state[/* cameraInput */7],
                                  /* filterBank */state[/* filterBank */8],
                                  /* compressor */state[/* compressor */9],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */10],
                                  /* loadedImages */state[/* loadedImages */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ],
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* mediaStream */state[/* mediaStream */5],
                                  /* micInput */action[0],
                                  /* cameraInput */state[/* cameraInput */7],
                                  /* filterBank */state[/* filterBank */8],
                                  /* compressor */state[/* compressor */9],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */10],
                                  /* loadedImages */state[/* loadedImages */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ]]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* mediaStream */Js_primitive.some(action[0]),
                                  /* micInput */state[/* micInput */6],
                                  /* cameraInput */state[/* cameraInput */7],
                                  /* filterBank */state[/* filterBank */8],
                                  /* compressor */state[/* compressor */9],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */10],
                                  /* loadedImages */state[/* loadedImages */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ]]);
                  case 4 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */state[/* params */4],
                                  /* mediaStream */state[/* mediaStream */5],
                                  /* micInput */state[/* micInput */6],
                                  /* cameraInput */state[/* cameraInput */7],
                                  /* filterBank */action[0],
                                  /* compressor */state[/* compressor */9],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */10],
                                  /* loadedImages */state[/* loadedImages */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ],
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 5 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* readPos */state[/* readPos */0],
                                  /* writePos */state[/* writePos */1],
                                  /* filterInput */state[/* filterInput */2],
                                  /* visualInput */state[/* visualInput */3],
                                  /* params */action[0],
                                  /* mediaStream */state[/* mediaStream */5],
                                  /* micInput */state[/* micInput */6],
                                  /* cameraInput */state[/* cameraInput */7],
                                  /* filterBank */state[/* filterBank */8],
                                  /* compressor */state[/* compressor */9],
                                  /* analysisCanvasRef */state[/* analysisCanvasRef */10],
                                  /* loadedImages */state[/* loadedImages */11],
                                  /* canvasRef */state[/* canvasRef */12],
                                  /* timerId */state[/* timerId */13]
                                ]]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var RList = 0;

export {
  RList ,
  defaultState ,
  setCanvasRef ,
  setAnalysisCanvasRef ,
  setLayerRef ,
  changeLayer ,
  component ,
  maybeUpdateCanvas ,
  maybeMapFilterBank ,
  connectInputs ,
  disconnectInputs ,
  clearCanvas ,
  pushParamsState ,
  drawLayer ,
  drawCanvas ,
  getAnalysisInput ,
  make ,
  
}
/* component Not a pure module */
