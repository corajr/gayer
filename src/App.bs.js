// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as CQT$Gayer from "./CQT.bs.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";

var defaultState_013 = /* allowedPitchClasses */Curry._1(Music$Gayer.PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        2,
        /* :: */[
          5,
          /* :: */[
            7,
            /* :: */[
              9,
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var defaultState_017 = /* canvasRef */[/* None */0];

var defaultState_018 = /* timerId */[/* None */0];

var defaultState = /* record */[
  /* xIndex */0,
  /* xDelta */1,
  /* inputGain */1.0,
  /* outputGain */0.1,
  /* q */Audio$Gayer.defaultQ,
  /* filterInput */Audio$Gayer.defaultNoise,
  /* visualInput : None */0,
  /* micInput : None */0,
  /* cameraInput : None */0,
  /* shouldClear */false,
  /* channelToRead : R */0,
  /* alpha */0.1,
  /* compositeOperation : Overlay */13,
  defaultState_013,
  /* filterBank : None */0,
  /* analyser : None */0,
  /* cqt : None */0,
  defaultState_017,
  defaultState_018
];

function setCanvasRef(theRef, param) {
  param[/* state */1][/* canvasRef */17][0] = (theRef == null) ? /* None */0 : [theRef];
  return /* () */0;
}

var component = ReasonReact.reducerComponent("App");

function maybeUpdateCanvas(maybeEl, f) {
  var match = maybeEl[0];
  if (match) {
    return Curry._1(f, match[0]);
  } else {
    return /* () */0;
  }
}

function maybeMapFilterBank(f, maybeFilterBank) {
  if (maybeFilterBank) {
    return Curry._1(f, maybeFilterBank[0]);
  } else {
    return /* () */0;
  }
}

function connectInputs(state) {
  var partial_arg = state[/* filterInput */5];
  maybeMapFilterBank((function (param) {
          return Audio$Gayer.connectFilterBank(partial_arg, param);
        }), state[/* filterBank */14]);
  var match = state[/* analyser */15];
  if (match) {
    state[/* filterInput */5].connect(match[0]);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function disconnectInputs(state) {
  var partial_arg = state[/* filterInput */5];
  maybeMapFilterBank((function (param) {
          return Audio$Gayer.disconnectFilterBank(partial_arg, param);
        }), state[/* filterBank */14]);
  var match = state[/* analyser */15];
  if (match) {
    state[/* filterInput */5].disconnect(match[0]);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function clearCanvas(canvasElement, width, height) {
  var ctx = canvasElement.getContext("2d");
  ctx.clearRect(0, 0, width, height);
  return /* () */0;
}

function drawCQTBar(canvasRenderingContext2D, _, _$1, state) {
  var match = state[/* cqt */16];
  if (match) {
    var cqt = match[0];
    var match$1 = state[/* analyser */15];
    if (match$1) {
      var audioData = cqt.get_input_array(0);
      match$1[0].getFloatTimeDomainData(audioData);
      cqt.calc();
      cqt.render_line(1);
      var cqtLine = cqt.get_output_array();
      var outputImageData = Canvas$Gayer.makeImageData(cqtLine);
      canvasRenderingContext2D.putImageData(outputImageData, state[/* xIndex */0], 0);
      return /* () */0;
    } else {
      return /* () */0;
    }
  } else {
    return /* () */0;
  }
}

function drawCanvas(canvasElement, width, height, state) {
  if (state[/* shouldClear */9]) {
    clearCanvas(canvasElement, width, height);
  }
  var ctx = canvasElement.getContext("2d");
  ctx.globalAlpha = state[/* alpha */11];
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, state[/* compositeOperation */12]);
  var match = state[/* visualInput */6];
  if (match) {
    ctx.drawImage(match[0], 0, 0, width, height);
  }
  var slice = ctx.getImageData(state[/* xIndex */0], 0, 1, height);
  var values = Canvas$Gayer.imageDataToFloatArray(slice, state[/* channelToRead */10]);
  ctx.globalAlpha = 1.0;
  Canvas$Gayer.Ctx[/* setGlobalCompositeOperation */0](ctx, /* SourceOver */0);
  ctx.fillStyle = "white";
  drawCQTBar(ctx, width, height, state);
  return values;
}

function make($staropt$star, $staropt$star$1, _) {
  var width = $staropt$star ? $staropt$star[0] : 120;
  var height = $staropt$star$1 ? $staropt$star$1[0] : 120;
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var filterBank = Audio$Gayer.defaultFilterBank(/* Some */[Audio$Gayer.defaultAudioCtx], /* Some */[height], /* Some */[Audio$Gayer.defaultQ]);
              Curry._1(self[/* send */3], /* SetFilterBank */Block.__(4, [filterBank]));
              var cqt = CQT$Gayer.createShowCQTBar(/* record */[
                    /* rate */Audio$Gayer.defaultAudioCtx.sampleRate,
                    /* width */CQT$Gayer.defaultCqtBarParams[/* width */1],
                    /* height */CQT$Gayer.defaultCqtBarParams[/* height */2],
                    /* barVolume */CQT$Gayer.defaultCqtBarParams[/* barVolume */3],
                    /* sonogramVolume */CQT$Gayer.defaultCqtBarParams[/* sonogramVolume */4],
                    /* supersampling */CQT$Gayer.defaultCqtBarParams[/* supersampling */5]
                  ]);
              Curry._1(self[/* send */3], /* SetCQT */Block.__(6, [cqt]));
              var analyser = Audio$Gayer.makeAnalyser(/* Some */[Audio$Gayer.defaultAudioCtx], /* Some */[cqt.fft_size], /* None */0, /* None */0, /* None */0, /* () */0);
              Curry._1(self[/* send */3], /* SetAnalyser */Block.__(5, [analyser]));
              var match = UserMedia$Gayer.getAudioVisualStream(/* () */0);
              if (match) {
                match[0].then((function (stream) {
                        var audio = Audio$Gayer.defaultAudioCtx.createMediaStreamSource(stream);
                        var video = Video$Gayer.attachVideoStream(stream);
                        Curry._1(self[/* send */3], /* SetMicInput */Block.__(2, [audio]));
                        Curry._1(self[/* send */3], /* SetCameraInput */Block.__(3, [/* Some */[video]]));
                        Curry._1(self[/* send */3], /* SetFilterInput */Block.__(0, [audio]));
                        Curry._1(self[/* send */3], /* SetVisualInput */Block.__(1, [/* Some */[video]]));
                        return Promise.resolve(/* () */0);
                      }));
              }
              Curry._1(self[/* send */3], /* Clear */0);
              self[/* state */1][/* timerId */18][0] = /* Some */[setInterval((function () {
                        return Curry._1(self[/* send */3], /* Tick */1);
                      }), 33)];
              return /* () */0;
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterInput */5], newSelf[/* state */1][/* filterInput */5]) || Caml_obj.caml_notequal(oldSelf[/* state */1][/* filterBank */14], newSelf[/* state */1][/* filterBank */14])) {
                return disconnectInputs(oldSelf[/* state */1]);
              } else {
                return 0;
              }
            }),
          /* willUnmount */(function (self) {
              return disconnectInputs(self[/* state */1]);
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = JSON.stringify(Curry._1(Music$Gayer.PitchSet[/* elements */19], self[/* state */1][/* allowedPitchClasses */13]));
              return React.createElement("div", {
                          style: {
                            display: "flex",
                            flexDirection: "row",
                            justifyContent: "space-between"
                          },
                          onClick: (function () {
                              return Curry._1(self[/* send */3], /* Tick */1);
                            })
                        }, React.createElement("div", {
                              style: {
                                margin: "10px"
                              }
                            }, React.createElement("h1", undefined, "GAYER"), React.createElement("div", undefined, "UI forthcoming; for now, please download and edit..."), React.createElement("a", {
                                  href: "https://github.com/corajr/gayer"
                                }, "source"), React.createElement("div", undefined, "Allowed pitch classes: " + (
                                  match !== undefined ? match : ""
                                ))), React.createElement("canvas", {
                              ref: Curry._1(self[/* handle */0], setCanvasRef),
                              style: {
                                transform: "scale(4)",
                                transformOrigin: "top right"
                              },
                              height: height.toString(),
                              width: width.toString()
                            }));
            }),
          /* initialState */(function () {
              return defaultState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                return maybeUpdateCanvas(self[/* state */1][/* canvasRef */17], (function (canvas) {
                                              return clearCanvas(canvas, width, height);
                                            }));
                              })]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* xIndex */Caml_int32.mod_(state[/* xIndex */0] + state[/* xDelta */1] | 0, width),
                              /* xDelta */state[/* xDelta */1],
                              /* inputGain */state[/* inputGain */2],
                              /* outputGain */state[/* outputGain */3],
                              /* q */state[/* q */4],
                              /* filterInput */state[/* filterInput */5],
                              /* visualInput */state[/* visualInput */6],
                              /* micInput */state[/* micInput */7],
                              /* cameraInput */state[/* cameraInput */8],
                              /* shouldClear */state[/* shouldClear */9],
                              /* channelToRead */state[/* channelToRead */10],
                              /* alpha */state[/* alpha */11],
                              /* compositeOperation */state[/* compositeOperation */12],
                              /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                              /* filterBank */state[/* filterBank */14],
                              /* analyser */state[/* analyser */15],
                              /* cqt */state[/* cqt */16],
                              /* canvasRef */state[/* canvasRef */17],
                              /* timerId */state[/* timerId */18]
                            ],
                            (function (self) {
                                return maybeUpdateCanvas(self[/* state */1][/* canvasRef */17], (function (canvas) {
                                              var rawFilterValues = drawCanvas(canvas, width, height, self[/* state */1]);
                                              var filterValues = Music$Gayer.filterByPitchSet(self[/* state */1][/* allowedPitchClasses */13], rawFilterValues);
                                              return maybeMapFilterBank((function (filterBank) {
                                                            return Audio$Gayer.updateFilterBank(/* Some */[self[/* state */1][/* inputGain */2]], /* Some */[self[/* state */1][/* outputGain */3]], /* Some */[self[/* state */1][/* q */4]], filterBank, filterValues);
                                                          }), self[/* state */1][/* filterBank */14]);
                                            }));
                              })
                          ]);
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */action[0],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ],
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */action[0],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput : Some */[action[0]],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ]]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */action[0],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ]]);
                  case 4 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank : Some */[action[0]],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ],
                                (function (self) {
                                    return connectInputs(self[/* state */1]);
                                  })
                              ]);
                  case 5 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser : Some */[action[0]],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ]]);
                  case 6 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt : Some */[action[0]],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ]]);
                  case 7 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */Caml_int32.mod_(action[0], width),
                                  /* xDelta */state[/* xDelta */1],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ]]);
                  case 8 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* xIndex */state[/* xIndex */0],
                                  /* xDelta */action[0],
                                  /* inputGain */state[/* inputGain */2],
                                  /* outputGain */state[/* outputGain */3],
                                  /* q */state[/* q */4],
                                  /* filterInput */state[/* filterInput */5],
                                  /* visualInput */state[/* visualInput */6],
                                  /* micInput */state[/* micInput */7],
                                  /* cameraInput */state[/* cameraInput */8],
                                  /* shouldClear */state[/* shouldClear */9],
                                  /* channelToRead */state[/* channelToRead */10],
                                  /* alpha */state[/* alpha */11],
                                  /* compositeOperation */state[/* compositeOperation */12],
                                  /* allowedPitchClasses */state[/* allowedPitchClasses */13],
                                  /* filterBank */state[/* filterBank */14],
                                  /* analyser */state[/* analyser */15],
                                  /* cqt */state[/* cqt */16],
                                  /* canvasRef */state[/* canvasRef */17],
                                  /* timerId */state[/* timerId */18]
                                ]]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  defaultState ,
  setCanvasRef ,
  component ,
  maybeUpdateCanvas ,
  maybeMapFilterBank ,
  connectInputs ,
  disconnectInputs ,
  clearCanvas ,
  drawCQTBar ,
  drawCanvas ,
  make ,
  
}
/* defaultState Not a pure module */
