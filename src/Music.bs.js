// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as $$Set from "bs-platform/lib/es6/set.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";

var compare = Caml_obj.caml_compare;

var PitchSet = $$Set.Make(/* module */[/* compare */compare]);

function filterByPitchSet(pitchClasses, filterValues) {
  return $$Array.mapi((function (i, v) {
                var match = Curry._2(PitchSet[/* mem */2], i % 12, pitchClasses);
                if (match) {
                  return v;
                } else {
                  return 0.0;
                }
              }), filterValues);
}

var majorChord = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        4,
        /* :: */[
          7,
          /* [] */0
        ]
      ]
    ]);

var minorChord = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        3,
        /* :: */[
          7,
          /* [] */0
        ]
      ]
    ]);

var major7 = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        4,
        /* :: */[
          7,
          /* :: */[
            11,
            /* [] */0
          ]
        ]
      ]
    ]);

var minor7 = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        4,
        /* :: */[
          7,
          /* :: */[
            10,
            /* [] */0
          ]
        ]
      ]
    ]);

var cMajor = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        2,
        /* :: */[
          4,
          /* :: */[
            5,
            /* :: */[
              7,
              /* :: */[
                9,
                /* :: */[
                  11,
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var cMinor = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        2,
        /* :: */[
          3,
          /* :: */[
            5,
            /* :: */[
              7,
              /* :: */[
                8,
                /* :: */[
                  10,
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var pentatonic = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        2,
        /* :: */[
          5,
          /* :: */[
            7,
            /* :: */[
              9,
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var majorHexatonic = Curry._1(PitchSet[/* of_list */25], /* :: */[
      1,
      /* :: */[
        3,
        /* :: */[
          5,
          /* :: */[
            6,
            /* :: */[
              8,
              /* :: */[
                10,
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]);

var wholetone = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        2,
        /* :: */[
          4,
          /* :: */[
            6,
            /* :: */[
              8,
              /* :: */[
                10,
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]);

var allPitches = Curry._1(PitchSet[/* of_list */25], /* :: */[
      0,
      /* :: */[
        1,
        /* :: */[
          2,
          /* :: */[
            3,
            /* :: */[
              4,
              /* :: */[
                5,
                /* :: */[
                  6,
                  /* :: */[
                    7,
                    /* :: */[
                      8,
                      /* :: */[
                        9,
                        /* :: */[
                          10,
                          /* :: */[
                            11,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

function harmonicSeriesInSemitones(n) {
  return $$Array.init(n, (function (i) {
                return Math.log2(i + 1 | 0) * 12.0;
              }));
}

function partials(n) {
  return $$Array.map((function (prim) {
                return prim | 0;
              }), harmonicSeriesInSemitones(n));
}

export {
  PitchSet ,
  filterByPitchSet ,
  majorChord ,
  minorChord ,
  major7 ,
  minor7 ,
  cMajor ,
  cMinor ,
  pentatonic ,
  majorHexatonic ,
  wholetone ,
  allPitches ,
  harmonicSeriesInSemitones ,
  partials ,
  
}
/* PitchSet Not a pure module */
