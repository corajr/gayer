// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as CQT$Gayer from "./CQT.bs.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Timing$Gayer from "./Timing.bs.js";
import * as AudioGraph$Gayer from "./AudioGraph.bs.js";

function drawCQTBar(canvasRenderingContext2D, state) {
  var audioDataL = state[/* cqt */4][0].get_input_array(0);
  var audioDataR = state[/* cqt */4][0].get_input_array(1);
  state[/* analyserL */0][0].getFloatTimeDomainData(audioDataL);
  state[/* analyserR */1][0].getFloatTimeDomainData(audioDataR);
  state[/* cqt */4][0].calc();
  state[/* cqt */4][0].render_line(1);
  var cqtLine = state[/* cqt */4][0].get_output_array();
  var outputImageData = Canvas$Gayer.makeImageData(cqtLine);
  canvasRenderingContext2D.putImageData(outputImageData, 0, 0);
  return /* () */0;
}

var component = ReasonReact.reducerComponent("AnalysisCanvas");

function make(size, layerKey, audioCtx, audioGraph, _, millisPerTick, saveRef, _$1) {
  var setCanvasRef = function (theRef, param) {
    param[/* state */1][/* canvasRef */5][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
    return Curry._1(saveRef, theRef);
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              audioGraph[0] = AudioGraph$Gayer.updateConnections(AudioGraph$Gayer.addEdge(/* tuple */[
                        layerKey + "input",
                        layerKey,
                        0,
                        0
                      ], AudioGraph$Gayer.addNode(/* tuple */[
                            layerKey,
                            self[/* state */1][/* stereoPanner */3][0]
                          ], audioGraph[0])));
              Curry._1(self[/* onUnmount */4], (function () {
                      audioGraph[0] = AudioGraph$Gayer.updateConnections(AudioGraph$Gayer.removeAllEdgesInvolvingNode(layerKey, AudioGraph$Gayer.removeNode(layerKey, audioGraph[0])));
                      return /* () */0;
                    }));
              Timing$Gayer.setTimer(self[/* state */1][/* timerId */6], (function () {
                      var match = self[/* state */1][/* canvasRef */5][0];
                      if (match !== undefined) {
                        var ctx = Js_primitive.valFromOption(match).getContext("2d");
                        return drawCQTBar(ctx, self[/* state */1]);
                      } else {
                        return /* () */0;
                      }
                    }), millisPerTick);
              return Curry._1(self[/* onUnmount */4], (function () {
                            return Timing$Gayer.maybeClearTimer(self[/* state */1][/* timerId */6]);
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("canvas", {
                          ref: Curry._1(self[/* handle */0], setCanvasRef),
                          style: {
                            position: "absolute",
                            visibility: "hidden"
                          },
                          height: size.toString(),
                          width: "1"
                        });
            }),
          /* initialState */(function () {
              var cqt = CQT$Gayer.createShowCQTBar(/* record */[
                    /* rate */audioCtx.sampleRate,
                    /* width */size,
                    /* height */CQT$Gayer.defaultCqtBarParams[/* height */2],
                    /* barVolume */CQT$Gayer.defaultCqtBarParams[/* barVolume */3],
                    /* sonogramVolume */CQT$Gayer.defaultCqtBarParams[/* sonogramVolume */4],
                    /* supersampling */CQT$Gayer.defaultCqtBarParams[/* supersampling */5]
                  ]);
              var fftSize = cqt.fft_size;
              console.log("Constant-Q transform initialized. Using FFT of size " + fftSize.toString());
              var analyserL = Audio$Gayer.makeAnalyser(audioCtx, fftSize, undefined, undefined, undefined, /* () */0);
              var analyserR = Audio$Gayer.makeAnalyser(audioCtx, fftSize, undefined, undefined, undefined, /* () */0);
              var stereoPanner = audioCtx.createStereoPanner();
              var channelSplitter = audioCtx.createChannelSplitter();
              stereoPanner.connect(channelSplitter);
              channelSplitter.connect(analyserL, 0);
              channelSplitter.connect(analyserR, 1);
              return /* record */[
                      /* analyserL : record */[/* contents */analyserL],
                      /* analyserR : record */[/* contents */analyserR],
                      /* channelSplitter : record */[/* contents */channelSplitter],
                      /* stereoPanner : record */[/* contents */stereoPanner],
                      /* cqt : record */[/* contents */cqt],
                      /* canvasRef : record */[/* contents */undefined],
                      /* timerId : record */[/* contents */undefined]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (_, _$1) {
              return /* NoUpdate */0;
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  drawCQTBar ,
  component ,
  make ,
  
}
/* component Not a pure module */
