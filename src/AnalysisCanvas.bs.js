// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as CQT$Gayer from "./CQT.bs.js";
import * as Audio$Gayer from "./Audio.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";

function drawCQTBar(canvasRenderingContext2D, state) {
  var audioDataL = state[/* cqt */4].get_input_array(0);
  var audioDataR = state[/* cqt */4].get_input_array(1);
  state[/* analyserL */0].getFloatTimeDomainData(audioDataL);
  state[/* analyserR */1].getFloatTimeDomainData(audioDataR);
  state[/* cqt */4].calc();
  state[/* cqt */4].render_line(1);
  var cqtLine = state[/* cqt */4].get_output_array();
  var outputImageData = Canvas$Gayer.makeImageData(cqtLine);
  canvasRenderingContext2D.putImageData(outputImageData, 0, 0);
  return /* () */0;
}

var component = ReasonReact.reducerComponent("AnalysisCanvas");

function make(size, audioCtx, input, saveRef, saveTick, _) {
  var setCanvasRef = function (theRef, param) {
    var send = param[/* send */3];
    param[/* state */1][/* canvasRef */5][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
    Curry._1(saveRef, theRef);
    return Curry._1(saveTick, (function () {
                  return Curry._1(send, /* Draw */0);
                }));
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              if (input !== undefined) {
                Js_primitive.valFromOption(input).connect(self[/* state */1][/* stereoPanner */3]);
              }
              return Curry._1(self[/* onUnmount */4], (function () {
                            if (input !== undefined) {
                              Js_primitive.valFromOption(input).disconnect(self[/* state */1][/* stereoPanner */3]);
                              return /* () */0;
                            } else {
                              return /* () */0;
                            }
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("canvas", {
                          ref: Curry._1(self[/* handle */0], setCanvasRef),
                          style: {
                            position: "absolute",
                            visibility: "hidden"
                          },
                          height: size.toString(),
                          width: "1"
                        });
            }),
          /* initialState */(function () {
              var cqt = CQT$Gayer.createShowCQTBar(/* record */[
                    /* rate */audioCtx.sampleRate,
                    /* width */size,
                    /* height */CQT$Gayer.defaultCqtBarParams[/* height */2],
                    /* barVolume */CQT$Gayer.defaultCqtBarParams[/* barVolume */3],
                    /* sonogramVolume */CQT$Gayer.defaultCqtBarParams[/* sonogramVolume */4],
                    /* supersampling */CQT$Gayer.defaultCqtBarParams[/* supersampling */5]
                  ]);
              var analyserL = Audio$Gayer.makeAnalyser(audioCtx, cqt.fft_size, undefined, undefined, undefined, /* () */0);
              var analyserR = Audio$Gayer.makeAnalyser(audioCtx, cqt.fft_size, undefined, undefined, undefined, /* () */0);
              var stereoPanner = audioCtx.createStereoPanner();
              var channelSplitter = audioCtx.createChannelSplitter();
              stereoPanner.connect(channelSplitter);
              channelSplitter.connect(analyserL, 0);
              channelSplitter.connect(analyserR, 1);
              return /* record */[
                      /* analyserL */analyserL,
                      /* analyserR */analyserR,
                      /* channelSplitter */channelSplitter,
                      /* stereoPanner */stereoPanner,
                      /* cqt */cqt,
                      /* canvasRef : record */[/* contents */undefined]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (_, state) {
              var match = state[/* canvasRef */5][0];
              if (match !== undefined) {
                var canvas = Js_primitive.valFromOption(match);
                return /* SideEffects */Block.__(1, [(function () {
                              var ctx = canvas.getContext("2d");
                              return drawCQTBar(ctx, state);
                            })]);
              } else {
                return /* NoUpdate */0;
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  drawCQTBar ,
  component ,
  make ,
  
}
/* component Not a pure module */
