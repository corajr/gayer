// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as UserMedia$Gayer from "./UserMedia.bs.js";

var defaultAudioCtx = (new (window.AudioContext || window.webkitAudioContext)());

function frequencyFromNoteNumber(note) {
  return 440.0 * Math.pow(2.0, (note - 69 | 0) / 12.0);
}

var defaultCompressorValues = /* record */[
  /* threshold */-50.0,
  /* knee */40.0,
  /* ratio */0.5,
  /* attack */0.01,
  /* release */0.25
];

function makeCompressor(audioCtx, paramValues) {
  var compressor = audioCtx.createDynamicsCompressor();
  var t = audioCtx.currentTime;
  compressor.threshold.setValueAtTime(paramValues[/* threshold */0], t);
  compressor.knee.setValueAtTime(paramValues[/* knee */1], t);
  compressor.attack.setValueAtTime(paramValues[/* attack */3], t);
  compressor.release.setValueAtTime(paramValues[/* release */4], t);
  return compressor;
}

var pinkNoise = function (audioCtx){
     var bufferSize = 4096;
     return (function() {
     var b0, b1, b2, b3, b4, b5, b6;
     b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
     var node = audioCtx.createScriptProcessor(bufferSize, 1, 1);
     node.onaudioprocess = function(e) {
     var output = e.outputBuffer.getChannelData(0);
     for (var i = 0; i < bufferSize; i++) {
     var white = Math.random() * 2 - 1;
     b0 = 0.99886 * b0 + white * 0.0555179;
     b1 = 0.99332 * b1 + white * 0.0750759;
     b2 = 0.96900 * b2 + white * 0.1538520;
     b3 = 0.86650 * b3 + white * 0.3104856;
     b4 = 0.55000 * b4 + white * 0.5329522;
     b5 = -0.7616 * b5 - white * 0.0168980;
     output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
     output[i] *= 0.11; // (roughly) compensate for gain
     b6 = white * 0.115926;
     }
     }
     return node;
     })();
     };

var defaultNoise = pinkNoise(defaultAudioCtx);

function string_of_filterType(filterType) {
  switch (filterType.tag | 0) {
    case 0 : 
        return "lowpass";
    case 1 : 
        return "highpass";
    case 2 : 
        return "bandpass";
    case 3 : 
        return "lowshelf";
    case 4 : 
        return "highshelf";
    case 5 : 
        return "peaking";
    case 6 : 
        return "notch";
    case 7 : 
        return "allpass";
    
  }
}

function makeFilter(audioCtx, filterType) {
  var filter = audioCtx.createBiquadFilter();
  ((filter.type = 'bandpass'));
  var t = audioCtx.currentTime;
  var exit = 0;
  switch (filterType.tag | 0) {
    case 3 : 
    case 4 : 
        exit = 1;
        break;
    case 5 : 
        filter.frequency.setValueAtTime(filterType[0], t);
        filter.Q.setValueAtTime(filterType[1], t);
        filter.gain.setValueAtTime(filterType[2], t);
        break;
    default:
      filter.frequency.setValueAtTime(filterType[0], t);
      filter.Q.setValueAtTime(filterType[1], t);
  }
  if (exit === 1) {
    filter.frequency.setValueAtTime(filterType[0], t);
    filter.gain.setValueAtTime(filterType[1], t);
  }
  return filter;
}

function makeFilterBank(audioCtx, filterN, q, freqFunc) {
  var input = audioCtx.createGain();
  var output = audioCtx.createGain();
  var t = audioCtx.currentTime;
  var filters = $$Array.init(filterN, (function (i) {
          var filter = makeFilter(audioCtx, /* BandPass */Block.__(2, [
                  Curry._1(freqFunc, i),
                  q
                ]));
          input.connect(filter);
          return filter;
        }));
  var gains = $$Array.init(filterN, (function (i) {
          var filter = Caml_array.caml_array_get(filters, i);
          var gainNode = audioCtx.createGain();
          gainNode.gain.setValueAtTime(0.0, t);
          filter.connect(gainNode);
          gainNode.connect(output);
          return gainNode;
        }));
  return /* record */[
          /* input */input,
          /* filters */filters,
          /* gains */gains,
          /* output */output,
          /* audioCtx */audioCtx
        ];
}

function getAudioSource(ctx) {
  var match = UserMedia$Gayer.getAudioStream(/* () */0);
  if (match) {
    return match[0].then((function (mediaStream) {
                    return Promise.resolve(/* Some */[ctx.createMediaStreamSource(mediaStream)]);
                  })).catch((function (err) {
                  console.log(err);
                  return Promise.resolve(/* None */0);
                }));
  } else {
    return Promise.resolve(/* None */0);
  }
}

var compressor = makeCompressor(defaultAudioCtx, defaultCompressorValues);

compressor.connect(defaultAudioCtx.destination);

function defaultFilterBank($staropt$star, $staropt$star$1, $staropt$star$2) {
  var ctx = $staropt$star ? $staropt$star[0] : defaultAudioCtx;
  var n = $staropt$star$1 ? $staropt$star$1[0] : 120;
  var q = $staropt$star$2 ? $staropt$star$2[0] : 50.0;
  return makeFilterBank(ctx, n, q, frequencyFromNoteNumber);
}

function connectFilterBank(noise, filterBank) {
  noise.connect(filterBank[/* input */0]);
  filterBank[/* output */3].connect(compressor);
  return /* () */0;
}

function disconnectFilterBank(noise, filterBank) {
  noise.disconnect(filterBank[/* input */0]);
  filterBank[/* output */3].disconnect(compressor);
  return /* () */0;
}

function updateFilterBank(filterBank, filterValues, inputGain, outputGain) {
  var currentTime = filterBank[/* audioCtx */4].currentTime;
  filterBank[/* input */0].gain.setValueAtTime(inputGain, currentTime);
  filterBank[/* output */3].gain.setValueAtTime(outputGain, currentTime);
  var n = filterValues.length;
  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
    Caml_array.caml_array_get(filterBank[/* gains */2], (n - i | 0) - 1 | 0).gain.setValueAtTime(Caml_array.caml_array_get(filterValues, i), currentTime);
  }
  return /* () */0;
}

var midiNoteA440Hz = 69;

var defaultQ = 50.0;

var defaultCompressor = compressor;

export {
  defaultAudioCtx ,
  midiNoteA440Hz ,
  frequencyFromNoteNumber ,
  defaultQ ,
  defaultCompressorValues ,
  makeCompressor ,
  pinkNoise ,
  defaultNoise ,
  string_of_filterType ,
  makeFilter ,
  makeFilterBank ,
  getAudioSource ,
  defaultCompressor ,
  defaultFilterBank ,
  connectFilterBank ,
  disconnectFilterBank ,
  updateFilterBank ,
  
}
/* defaultAudioCtx Not a pure module */
