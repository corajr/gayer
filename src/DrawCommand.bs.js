// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Json_encode from "@glennsl/bs-json/src/Json_encode.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";

function field2(f, a, aDec, b, bDec, json) {
  return Json_decode.andThen((function (a) {
                return (function (param) {
                    return Json_decode.map((function (b) {
                                  return Curry._2(f, a, b);
                                }), (function (param) {
                                  return Json_decode.field(b, bDec, param);
                                }), param);
                  });
              }), (function (param) {
                return Json_decode.field(a, aDec, param);
              }), json);
}

function imgSource(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "self"
                ],
                /* [] */0
              ]);
  } else if (param.tag) {
    var match = param[0];
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "image"
                ],
                /* :: */[
                  /* tuple */[
                    "data",
                    Json_encode.array((function (prim) {
                            return prim;
                          }), match[/* data */0])
                  ],
                  /* :: */[
                    /* tuple */[
                      "w",
                      match[/* w */1]
                    ],
                    /* :: */[
                      /* tuple */[
                        "h",
                        match[/* h */2]
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "self"
                ],
                /* :: */[
                  /* tuple */[
                    "key",
                    param[0]
                  ],
                  /* [] */0
                ]
              ]);
  }
}

function length(param) {
  if (typeof param === "number") {
    if (param === 0) {
      return Json_encode.object_(/* :: */[
                  /* tuple */[
                    "type",
                    "width"
                  ],
                  /* [] */0
                ]);
    } else {
      return Json_encode.object_(/* :: */[
                  /* tuple */[
                    "type",
                    "height"
                  ],
                  /* [] */0
                ]);
    }
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "constant"
                      ],
                      /* :: */[
                        /* tuple */[
                          "v",
                          param[0]
                        ],
                        /* [] */0
                      ]
                    ]);
      case 1 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "var"
                      ],
                      /* :: */[
                        /* tuple */[
                          "name",
                          param[0]
                        ],
                        /* :: */[
                          /* tuple */[
                            "default",
                            param[1]
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 2 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "px"
                      ],
                      /* :: */[
                        /* tuple */[
                          "i",
                          param[0]
                        ],
                        /* [] */0
                      ]
                    ]);
      case 3 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "note"
                      ],
                      /* :: */[
                        /* tuple */[
                          "note",
                          param[0]
                        ],
                        /* [] */0
                      ]
                    ]);
      case 4 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "-"
                      ],
                      /* :: */[
                        /* tuple */[
                          "x",
                          length(param[0])
                        ],
                        /* [] */0
                      ]
                    ]);
      case 5 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "+"
                      ],
                      /* :: */[
                        /* tuple */[
                          "a",
                          length(param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "b",
                            length(param[1])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 6 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "/"
                      ],
                      /* :: */[
                        /* tuple */[
                          "a",
                          length(param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "b",
                            length(param[1])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 7 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "*"
                      ],
                      /* :: */[
                        /* tuple */[
                          "a",
                          length(param[0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "b",
                            length(param[1])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      
    }
  }
}

function rect(r) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "x",
                length(r[/* x */0])
              ],
              /* :: */[
                /* tuple */[
                  "y",
                  length(r[/* y */1])
                ],
                /* :: */[
                  /* tuple */[
                    "w",
                    length(r[/* w */2])
                  ],
                  /* :: */[
                    /* tuple */[
                      "h",
                      length(r[/* h */3])
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function command(param) {
  switch (param.tag | 0) {
    case 0 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SetFont"
                    ],
                    /* :: */[
                      /* tuple */[
                        "font",
                        param[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 1 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SetTextAlign"
                    ],
                    /* :: */[
                      /* tuple */[
                        "textAlign",
                        param[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 2 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SetTextBaseline"
                    ],
                    /* :: */[
                      /* tuple */[
                        "textBaseline",
                        param[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 3 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SetFillStyle"
                    ],
                    /* :: */[
                      /* tuple */[
                        "style",
                        param[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 4 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "SetStrokeStyle"
                    ],
                    /* :: */[
                      /* tuple */[
                        "style",
                        param[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 5 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "FillRect"
                    ],
                    /* :: */[
                      /* tuple */[
                        "rect",
                        rect(param[0])
                      ],
                      /* [] */0
                    ]
                  ]);
    case 6 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "FillText"
                    ],
                    /* :: */[
                      /* tuple */[
                        "text",
                        param[0]
                      ],
                      /* :: */[
                        /* tuple */[
                          "x",
                          length(param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "y",
                            length(param[2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    case 7 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "StrokeText"
                    ],
                    /* :: */[
                      /* tuple */[
                        "text",
                        param[0]
                      ],
                      /* :: */[
                        /* tuple */[
                          "x",
                          length(param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "y",
                            length(param[2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    case 8 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "Rotate"
                    ],
                    /* :: */[
                      /* tuple */[
                        "rad",
                        param[0]
                      ],
                      /* [] */0
                    ]
                  ]);
    case 9 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "Translate"
                    ],
                    /* :: */[
                      /* tuple */[
                        "x",
                        length(param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "y",
                          length(param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 10 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "DrawImage"
                    ],
                    /* :: */[
                      /* tuple */[
                        "src",
                        imgSource(param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "destRect",
                          rect(param[1])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 11 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "type",
                      "DrawImageSourceDest"
                    ],
                    /* :: */[
                      /* tuple */[
                        "src",
                        imgSource(param[0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "srcRect",
                          rect(param[1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "destRect",
                            rect(param[2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    
  }
}

var EncodeDrawCommand = /* module */[
  /* imgSource */imgSource,
  /* length */length,
  /* rect */rect,
  /* command */command
];

function imgSource$1(json) {
  var match = Json_decode.field("type", Json_decode.string, json);
  switch (match) {
    case "imageData" : 
        return /* ImageData */Block.__(1, [/* record */[
                    /* data */Json_decode.field("data", (function (param) {
                            return Json_decode.array(Json_decode.$$int, param);
                          }), json),
                    /* w */Json_decode.field("w", Json_decode.$$int, json),
                    /* h */Json_decode.field("h", Json_decode.$$int, json)
                  ]]);
    case "layer" : 
        return /* LayerByKey */Block.__(0, [Json_decode.field("key", Json_decode.string, json)]);
    case "self" : 
        return /* Self */0;
    default:
      return /* Self */0;
  }
}

function length$1(json) {
  var lengthByType = function (type_, json) {
    switch (type_) {
      case "*" : 
          return field2((function (a, b) {
                        return /* Multiply */Block.__(7, [
                                  a,
                                  b
                                ]);
                      }), "a", length$1, "b", length$1, json);
      case "+" : 
          return field2((function (a, b) {
                        return /* Add */Block.__(5, [
                                  a,
                                  b
                                ]);
                      }), "a", length$1, "b", length$1, json);
      case "-" : 
          return Json_decode.map((function (x) {
                        return /* Negate */Block.__(4, [x]);
                      }), (function (param) {
                        return Json_decode.field("x", length$1, param);
                      }), json);
      case "/" : 
          return field2((function (a, b) {
                        return /* Divide */Block.__(6, [
                                  a,
                                  b
                                ]);
                      }), "a", length$1, "b", length$1, json);
      case "constant" : 
          return Json_decode.map((function (i) {
                        return /* Constant */Block.__(0, [i]);
                      }), (function (param) {
                        return Json_decode.field("v", Json_decode.$$int, param);
                      }), json);
      case "height" : 
          return /* Height */1;
      case "note" : 
          return Json_decode.map((function (i) {
                        return /* Note */Block.__(3, [i]);
                      }), (function (param) {
                        return Json_decode.field("note", Json_decode.$$int, param);
                      }), json);
      case "px" : 
          return Json_decode.map((function (i) {
                        return /* Pixels */Block.__(2, [i]);
                      }), (function (param) {
                        return Json_decode.field("i", Json_decode.$$int, param);
                      }), json);
      case "var" : 
          return field2((function (a, b) {
                        return /* Variable */Block.__(1, [
                                  a,
                                  b
                                ]);
                      }), "name", Json_decode.string, "default", Json_decode.$$int, json);
      case "width" : 
          return /* Width */0;
      default:
        throw [
              Json_decode.DecodeError,
              "Expected length type, got " + JSON.stringify(json)
            ];
    }
  };
  return Json_decode.andThen(lengthByType, (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), json);
}

function rect$1(json) {
  return /* record */[
          /* x */Json_decode.field("x", length$1, json),
          /* y */Json_decode.field("y", length$1, json),
          /* w */Json_decode.field("w", length$1, json),
          /* h */Json_decode.field("h", length$1, json)
        ];
}

function commandByType(type_, json) {
  switch (type_) {
    case "DrawImage" : 
        return Json_decode.andThen((function (src) {
                      return (function (param) {
                          return Json_decode.map((function (rect_) {
                                        return /* DrawImage */Block.__(10, [
                                                  src,
                                                  rect_
                                                ]);
                                      }), (function (param) {
                                        return Json_decode.field("destRect", rect$1, param);
                                      }), param);
                        });
                    }), (function (param) {
                      return Json_decode.field("src", imgSource$1, param);
                    }), json);
    case "DrawImageSourceDest" : 
        return Json_decode.andThen((function (src) {
                      return (function (param) {
                          return Json_decode.andThen((function (srcR) {
                                        return (function (param) {
                                            return Json_decode.map((function (destR) {
                                                          return /* DrawImageSourceDest */Block.__(11, [
                                                                    src,
                                                                    srcR,
                                                                    destR
                                                                  ]);
                                                        }), (function (param) {
                                                          return Json_decode.field("destRect", rect$1, param);
                                                        }), param);
                                          });
                                      }), (function (param) {
                                        return Json_decode.field("srcRect", rect$1, param);
                                      }), param);
                        });
                    }), (function (param) {
                      return Json_decode.field("src", imgSource$1, param);
                    }), json);
    case "FillRect" : 
        return Json_decode.map((function (r) {
                      return /* FillRect */Block.__(5, [r]);
                    }), (function (param) {
                      return Json_decode.field("rect", rect$1, param);
                    }), json);
    case "FillText" : 
        return Json_decode.andThen((function (s) {
                      return (function (param) {
                          return Json_decode.andThen((function (x) {
                                        return (function (param) {
                                            return Json_decode.map((function (y) {
                                                          return /* FillText */Block.__(6, [
                                                                    s,
                                                                    x,
                                                                    y
                                                                  ]);
                                                        }), (function (param) {
                                                          return Json_decode.field("y", length$1, param);
                                                        }), param);
                                          });
                                      }), (function (param) {
                                        return Json_decode.field("x", length$1, param);
                                      }), param);
                        });
                    }), (function (param) {
                      return Json_decode.field("text", Json_decode.string, param);
                    }), json);
    case "Rotate" : 
        return Json_decode.map((function (r) {
                      return /* Rotate */Block.__(8, [r]);
                    }), (function (param) {
                      return Json_decode.field("rad", Json_decode.$$float, param);
                    }), json);
    case "SetFillStyle" : 
        return Json_decode.map((function (s) {
                      return /* SetFillStyle */Block.__(3, [s]);
                    }), (function (param) {
                      return Json_decode.field("style", Json_decode.string, param);
                    }), json);
    case "SetFont" : 
        return Json_decode.map((function (s) {
                      return /* SetFont */Block.__(0, [s]);
                    }), (function (param) {
                      return Json_decode.field("font", Json_decode.string, param);
                    }), json);
    case "SetStrokeStyle" : 
        return Json_decode.map((function (s) {
                      return /* SetStrokeStyle */Block.__(4, [s]);
                    }), (function (param) {
                      return Json_decode.field("style", Json_decode.string, param);
                    }), json);
    case "SetTextAlign" : 
        return Json_decode.map((function (s) {
                      return /* SetTextAlign */Block.__(1, [s]);
                    }), (function (param) {
                      return Json_decode.field("textAlign", Json_decode.string, param);
                    }), json);
    case "SetTextBaseline" : 
        return Json_decode.map((function (s) {
                      return /* SetTextBaseline */Block.__(2, [s]);
                    }), (function (param) {
                      return Json_decode.field("textBaseline", Json_decode.string, param);
                    }), json);
    case "StrokeText" : 
        return Json_decode.andThen((function (s) {
                      return (function (param) {
                          return Json_decode.andThen((function (x) {
                                        return (function (param) {
                                            return Json_decode.map((function (y) {
                                                          return /* StrokeText */Block.__(7, [
                                                                    s,
                                                                    x,
                                                                    y
                                                                  ]);
                                                        }), (function (param) {
                                                          return Json_decode.field("y", length$1, param);
                                                        }), param);
                                          });
                                      }), (function (param) {
                                        return Json_decode.field("x", length$1, param);
                                      }), param);
                        });
                    }), (function (param) {
                      return Json_decode.field("text", Json_decode.string, param);
                    }), json);
    case "Translate" : 
        return Json_decode.andThen((function (x) {
                      return (function (param) {
                          return Json_decode.map((function (y) {
                                        return /* Translate */Block.__(9, [
                                                  x,
                                                  y
                                                ]);
                                      }), (function (param) {
                                        return Json_decode.field("y", length$1, param);
                                      }), param);
                        });
                    }), (function (param) {
                      return Json_decode.field("x", length$1, param);
                    }), json);
    default:
      throw [
            Json_decode.DecodeError,
            "Expected layer content, got " + JSON.stringify(json)
          ];
  }
}

function command$1(json) {
  return Json_decode.andThen(commandByType, (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), json);
}

var DecodeDrawCommand = /* module */[
  /* imgSource */imgSource$1,
  /* length */length$1,
  /* rect */rect$1,
  /* commandByType */commandByType,
  /* command */command$1
];

function getLength(drawCtx, len) {
  if (typeof len === "number") {
    if (len === 0) {
      return drawCtx[/* width */2];
    } else {
      return drawCtx[/* height */3];
    }
  } else {
    switch (len.tag | 0) {
      case 1 : 
          return Belt_MapString.getWithDefault(drawCtx[/* variables */4], len[0], len[1]);
      case 0 : 
      case 2 : 
          return len[0];
      case 3 : 
          var height = drawCtx[/* height */3];
          var pixelsPerSemitone = Canvas$Gayer.binsPerSemitone(height);
          return height - Caml_int32.imul(len[0], pixelsPerSemitone) | 0;
      case 4 : 
          return -getLength(drawCtx, len[0]) | 0;
      case 5 : 
          return getLength(drawCtx, len[0]) + getLength(drawCtx, len[1]) | 0;
      case 6 : 
          return Caml_int32.div(getLength(drawCtx, len[0]), getLength(drawCtx, len[1]));
      case 7 : 
          return Caml_int32.imul(getLength(drawCtx, len[0]), getLength(drawCtx, len[1]));
      
    }
  }
}

var nullImage = new ImageData(new Uint8ClampedArray(4), 1, 1);

function getSource(drawContext, src) {
  var tmp;
  if (typeof src === "number") {
    tmp = Belt_Option.map(drawContext[/* maybeCtxRef */0][0], (function (c) {
            return c.canvas;
          }));
  } else if (src.tag) {
    var match = src[0];
    tmp = Js_primitive.some(new ImageData(match[/* data */0], match[/* w */1], match[/* h */2]));
  } else {
    tmp = Belt_Option.map(Belt_MapString.get(drawContext[/* layerRefs */1][0], src[0]), (function (d) {
            return d;
          }));
  }
  return Belt_Option.getWithDefault(tmp, nullImage);
}

function drawCommand(drawContext, cmd) {
  var match = drawContext[/* maybeCtxRef */0][0];
  if (match !== undefined) {
    var ctx = Js_primitive.valFromOption(match);
    switch (cmd.tag | 0) {
      case 0 : 
          ctx.font = cmd[0];
          return /* () */0;
      case 1 : 
          ctx.textAlign = cmd[0];
          return /* () */0;
      case 2 : 
          ctx.textBaseline = cmd[0];
          return /* () */0;
      case 3 : 
          ctx.fillStyle = cmd[0];
          return /* () */0;
      case 4 : 
          ctx.strokeStyle = cmd[0];
          return /* () */0;
      case 5 : 
          var match$1 = cmd[0];
          ctx.fillRect(getLength(drawContext, match$1[/* x */0]), getLength(drawContext, match$1[/* y */1]), getLength(drawContext, match$1[/* w */2]), getLength(drawContext, match$1[/* h */3]));
          return /* () */0;
      case 6 : 
          ctx.fillText(cmd[0], getLength(drawContext, cmd[1]), getLength(drawContext, cmd[2]));
          return /* () */0;
      case 7 : 
          ctx.strokeText(cmd[0], getLength(drawContext, cmd[1]), getLength(drawContext, cmd[2]));
          return /* () */0;
      case 8 : 
          ctx.rotate(cmd[0]);
          return /* () */0;
      case 9 : 
          return Canvas$Gayer.Ctx[/* transform */3](ctx, /* record */[
                      /* horizontalScaling */Canvas$Gayer.defaultTransform[/* horizontalScaling */0],
                      /* horizontalSkewing */Canvas$Gayer.defaultTransform[/* horizontalSkewing */1],
                      /* verticalSkewing */Canvas$Gayer.defaultTransform[/* verticalSkewing */2],
                      /* verticalScaling */Canvas$Gayer.defaultTransform[/* verticalScaling */3],
                      /* horizontalMoving */getLength(drawContext, cmd[0]),
                      /* verticalMoving */getLength(drawContext, cmd[1])
                    ]);
      case 10 : 
          var match$2 = cmd[1];
          var realSrc = getSource(drawContext, cmd[0]);
          ctx.drawImage(realSrc, getLength(drawContext, match$2[/* x */0]), getLength(drawContext, match$2[/* y */1]), getLength(drawContext, match$2[/* w */2]), getLength(drawContext, match$2[/* h */3]));
          return /* () */0;
      case 11 : 
          var match$3 = cmd[2];
          var match$4 = cmd[1];
          var realSrc$1 = getSource(drawContext, cmd[0]);
          ctx.drawImage(realSrc$1, getLength(drawContext, match$4[/* x */0]), getLength(drawContext, match$4[/* y */1]), getLength(drawContext, match$4[/* w */2]), getLength(drawContext, match$4[/* h */3]), getLength(drawContext, match$3[/* x */0]), getLength(drawContext, match$3[/* y */1]), getLength(drawContext, match$3[/* w */2]), getLength(drawContext, match$3[/* h */3]));
          return /* () */0;
      
    }
  } else {
    return /* () */0;
  }
}

function drawCommands(drawContext, cmds) {
  return List.iter((function (param) {
                return drawCommand(drawContext, param);
              }), cmds);
}

export {
  field2 ,
  EncodeDrawCommand ,
  DecodeDrawCommand ,
  getLength ,
  nullImage ,
  getSource ,
  drawCommand ,
  drawCommands ,
  
}
/* nullImage Not a pure module */
