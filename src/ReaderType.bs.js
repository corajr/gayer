// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Json_encode from "@glennsl/bs-json/src/Json_encode.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Canvas$Gayer from "./Canvas.bs.js";
import * as MaterialUi_Select from "@jsiebern/bs-material-ui/src/MaterialUi_Select.bs.js";
import * as MaterialUi_MenuItem from "@jsiebern/bs-material-ui/src/MaterialUi_MenuItem.bs.js";

function string_of_readerType(param) {
  if (param) {
    return "Channel(" + (Canvas$Gayer.string_of_channel(param[0]) + ")");
  } else {
    return "Saturation";
  }
}

function readerTypeByType(type_, json) {
  switch (type_) {
    case "channel" : 
        return Json_decode.map((function (c) {
                      return /* Channel */[Canvas$Gayer.channel_of_int(c)];
                    }), (function (param) {
                      return Json_decode.field("channel", Json_decode.$$int, param);
                    }), json);
    case "saturation" : 
        return /* Saturation */0;
    default:
      return /* Channel */[/* R */0];
  }
}

function readerType(json) {
  return Json_decode.andThen(readerTypeByType, (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), json);
}

var DecodeReaderType = /* module */[
  /* readerTypeByType */readerTypeByType,
  /* readerType */readerType
];

function readerType$1(param) {
  if (param) {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "channel"
                ],
                /* :: */[
                  /* tuple */[
                    "channel",
                    Canvas$Gayer.int_of_channel(param[0])
                  ],
                  /* [] */0
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "saturation"
                ],
                /* [] */0
              ]);
  }
}

var EncodeReaderType = /* module */[/* readerType */readerType$1];

var allReaderTypes = /* array */[
  /* Channel */[/* R */0],
  /* Channel */[/* G */1],
  /* Channel */[/* B */2],
  /* Channel */[/* A */3],
  /* Saturation */0
];

var component = ReasonReact.statelessComponent("ReaderType-Gayer");

function make(readerType$2, onChangeSetting, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(undefined, undefined, MaterialUi_Select.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function ($$event, _) {
                                var s = $$event.target.value;
                                var json = Json.parseOrRaise(s);
                                return Curry._1(onChangeSetting, readerType(json));
                              }), undefined, undefined, undefined, undefined, undefined, /* `String */[
                              -976970511,
                              JSON.stringify(readerType$1(readerType$2))
                            ], undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[$$Array.map((function (readerType$3) {
                                      var s = JSON.stringify(readerType$1(readerType$3));
                                      return ReasonReact.element(s, undefined, MaterialUi_MenuItem.make(undefined, undefined, undefined, undefined, /* `String */[
                                                      -976970511,
                                                      s
                                                    ], undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[string_of_readerType(readerType$3)]));
                                    }), allReaderTypes)]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  string_of_readerType ,
  DecodeReaderType ,
  EncodeReaderType ,
  allReaderTypes ,
  component ,
  make ,
  
}
/* component Not a pure module */
