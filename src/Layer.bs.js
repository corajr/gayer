// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Json_encode from "@glennsl/bs-json/src/Json_encode.bs.js";
import * as Music$Gayer from "./Music.bs.js";
import * as Canvas$Gayer from "./Canvas.bs.js";

function layerByType(type_, json) {
  switch (type_) {
    case "analysis" : 
        return /* Analysis */1;
    case "image" : 
        return Json_decode.map((function (s) {
                      return /* Image */Block.__(0, [s]);
                    }), (function (param) {
                      return Json_decode.field("url", Json_decode.string, param);
                    }), json);
    case "pitchClasses" : 
        return Json_decode.map((function (xs) {
                      return /* PitchClasses */Block.__(1, [Curry._1(Music$Gayer.PitchSet[/* of_list */25], xs)]);
                    }), (function (param) {
                      return Json_decode.field("pc", (function (param) {
                                    return Json_decode.list(Json_decode.$$int, param);
                                  }), param);
                    }), json);
    case "reader" : 
        return Json_decode.map((function (i) {
                      return /* Reader */Block.__(2, [i]);
                    }), (function (param) {
                      return Json_decode.map(Canvas$Gayer.channel_of_int, (function (param) {
                                    return Json_decode.field("channel", Json_decode.$$int, param);
                                  }), param);
                    }), json);
    case "webcam" : 
        return /* Webcam */0;
    default:
      throw [
            Json_decode.DecodeError,
            "Expected layer content, got " + JSON.stringify(json)
          ];
  }
}

function layerContent(json) {
  return Json_decode.andThen(layerByType, (function (param) {
                return Json_decode.field("type", Json_decode.string, param);
              }), json);
}

function layer(json) {
  return /* record */[
          /* content */Json_decode.field("content", layerContent, json),
          /* alpha */Json_decode.field("alpha", Json_decode.$$float, json),
          /* compositeOperation */Json_decode.map(Canvas$Gayer.compositeOperation_of_string, (function (param) {
                  return Json_decode.field("compositeOperation", Json_decode.string, param);
                }), json)
        ];
}

var DecodeLayer = /* module */[
  /* layerByType */layerByType,
  /* layerContent */layerContent,
  /* layer */layer
];

function layerContent$1(r) {
  if (typeof r === "number") {
    if (r === 0) {
      return Json_encode.object_(/* :: */[
                  /* tuple */[
                    "type",
                    "webcam"
                  ],
                  /* [] */0
                ]);
    } else {
      return Json_encode.object_(/* :: */[
                  /* tuple */[
                    "type",
                    "analysis"
                  ],
                  /* [] */0
                ]);
    }
  } else {
    switch (r.tag | 0) {
      case 0 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "image"
                      ],
                      /* :: */[
                        /* tuple */[
                          "url",
                          r[0]
                        ],
                        /* [] */0
                      ]
                    ]);
      case 1 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "pitchClasses"
                      ],
                      /* :: */[
                        /* tuple */[
                          "pc",
                          Json_encode.list((function (prim) {
                                  return prim;
                                }), Curry._1(Music$Gayer.PitchSet[/* elements */19], r[0]))
                        ],
                        /* [] */0
                      ]
                    ]);
      case 2 : 
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "type",
                        "reader"
                      ],
                      /* :: */[
                        /* tuple */[
                          "channel",
                          Canvas$Gayer.int_of_channel(r[0])
                        ],
                        /* [] */0
                      ]
                    ]);
      
    }
  }
}

function layer$1(r) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "content",
                layerContent$1(r[/* content */0])
              ],
              /* :: */[
                /* tuple */[
                  "alpha",
                  r[/* alpha */1]
                ],
                /* :: */[
                  /* tuple */[
                    "compositeOperation",
                    Canvas$Gayer.string_of_compositeOperation(r[/* compositeOperation */2])
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

var EncodeLayer = /* module */[
  /* layerContent */layerContent$1,
  /* layer */layer$1
];

export {
  DecodeLayer ,
  EncodeLayer ,
  
}
/* Json_encode Not a pure module */
