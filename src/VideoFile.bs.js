// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Video$Gayer from "./Video.bs.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as AudioGraph$Gayer from "./AudioGraph.bs.js";

var component = ReasonReact.reducerComponent("VideoFile-Gayer");

function make(audioCtx, audioGraph, _, setRef, url, _$1) {
  var setVideoRef = function (theRef, param) {
    var state = param[/* state */1];
    state[/* videoRef */0][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
    Curry._1(setRef, theRef);
    var match = state[/* videoRef */0][0];
    var match$1 = state[/* audioNode */1][0];
    if (match !== undefined && match$1 === undefined) {
      var video = Js_primitive.valFromOption(match);
      Video$Gayer.unmute(video);
      var node = audioCtx.createMediaElementSource(video);
      state[/* audioNode */1][0] = node;
      audioGraph[0] = AudioGraph$Gayer.updateConnections(AudioGraph$Gayer.addNode(/* tuple */[
                url,
                node
              ], audioGraph[0]));
      return /* () */0;
    } else {
      return /* () */0;
    }
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("video", {
                          ref: Curry._1(self[/* handle */0], setVideoRef),
                          autoPlay: true,
                          loop: true,
                          muted: true,
                          src: url
                        });
            }),
          /* initialState */(function () {
              return /* record */[
                      /* videoRef : record */[/* contents */undefined],
                      /* audioNode : record */[/* contents */undefined]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (_, _$1) {
              return /* NoUpdate */0;
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  component ,
  make ,
  
}
/* component Not a pure module */
