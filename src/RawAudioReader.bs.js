// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as AudioGraph$Gayer from "./AudioGraph.bs.js";
import * as TypedArray$Gayer from "./TypedArray.bs.js";

var component = ReasonReact.reducerComponent("RawAudioReader-Gayer");

function make(layerKey, layerRefs, audioCtx, audioGraph, saveTick, rawAudioFormat, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var h = rawAudioFormat[/* h */3];
              var w = rawAudioFormat[/* w */2];
              var y = rawAudioFormat[/* y */1];
              var x = rawAudioFormat[/* x */0];
              var buffer = audioCtx.createBuffer(1, Caml_int32.imul(w, h), rawAudioFormat[/* sampleRate */4]);
              self[/* state */1][/* audioBuffer */0][0] = Js_primitive.some(buffer);
              return Curry._3(saveTick, self[/* onUnmount */4], layerKey, (function () {
                            var match = self[/* state */1][/* audioBuffer */0][0];
                            var match$1 = AudioGraph$Gayer.getNode("compressor", audioGraph[0]);
                            var match$2 = Belt_MapString.get(layerRefs[0], "root");
                            if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
                              var buffer = Js_primitive.valFromOption(match);
                              var ctx = Js_primitive.valFromOption(match$2).getContext("2d");
                              var imageData = ctx.getImageData(x, y, w, h);
                              var rawImgData = TypedArray$Gayer.toFloat32Array(imageData.data);
                              buffer.copyToChannel(rawImgData, 0, 0);
                              var node = audioCtx.createBufferSource();
                              node.buffer = buffer;
                              node.connect(match$1);
                              node.start();
                              return /* () */0;
                            } else {
                              return /* () */0;
                            }
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return React.createElement("div", undefined);
            }),
          /* initialState */(function () {
              return /* record */[/* audioBuffer : record */[/* contents */undefined]];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (_, _$1) {
              return /* NoUpdate */0;
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  component ,
  make ,
  
}
/* component Not a pure module */
