// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as KeyboardManager$Gayer from "./KeyboardManager.bs.js";

function keyCodeToY(height, keyCodeN) {
  return (height - ((keyCodeN - 8 | 0) << 1) | 0) - 1 | 0;
}

function makeKeyDownCallback(param, width, height, e) {
  e.preventDefault();
  var match = param[/* state */1][/* canvasRef */0][0];
  if (match !== undefined) {
    var ctx = Js_primitive.valFromOption(match).getContext("2d");
    ctx.fillStyle = "white";
    var keyCodeN = KeyboardManager$Gayer.keyCode(e);
    if (keyCodeN === 32) {
      ctx.clearRect(0, 0, width, height);
    }
    var keyCodeY = keyCodeToY(height, keyCodeN);
    ctx.fillRect(0, keyCodeY, 1, 1);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function makeKeyUpCallback(param, width, height, e) {
  e.preventDefault();
  var match = param[/* state */1][/* canvasRef */0][0];
  if (match !== undefined) {
    var ctx = Js_primitive.valFromOption(match).getContext("2d");
    var keyCodeY = keyCodeToY(height, KeyboardManager$Gayer.keyCode(e));
    ctx.clearRect(0, keyCodeY, width, 1);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

var component = ReasonReact.reducerComponent("KeycodeCanvas-Gayer");

function make(_, _$1, setRef, $staropt$star, $staropt$star$1, _$2) {
  var width = $staropt$star !== undefined ? $staropt$star : 1;
  var height = $staropt$star$1 !== undefined ? $staropt$star$1 : 240;
  var setCanvasRef = function (theRef, param) {
    param[/* state */1][/* canvasRef */0][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
    return Curry._1(setRef, theRef);
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var keyDownCallback = function (param) {
                return makeKeyDownCallback(self, width, height, param);
              };
              var keyUpCallback = function (param) {
                return makeKeyUpCallback(self, width, height, param);
              };
              KeyboardManager$Gayer.addKeyListenersToBody(keyDownCallback, keyUpCallback, self[/* state */1][/* keyboardManagerState */1]);
              return Curry._1(self[/* onUnmount */4], (function () {
                            return KeyboardManager$Gayer.removeKeyListenersFromBody(self[/* state */1][/* keyboardManagerState */1]);
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("canvas", {
                          ref: Curry._1(self[/* handle */0], setCanvasRef),
                          height: height.toString(),
                          width: width.toString()
                        });
            }),
          /* initialState */(function () {
              return /* record */[
                      /* canvasRef : record */[/* contents */undefined],
                      /* keyboardManagerState : record */[
                        /* keyDownListener : record */[/* contents */undefined],
                        /* keyUpListener : record */[/* contents */undefined]
                      ]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (_, _$1) {
              return /* NoUpdate */0;
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  keyCodeToY ,
  makeKeyDownCallback ,
  makeKeyUpCallback ,
  component ,
  make ,
  
}
/* component Not a pure module */
