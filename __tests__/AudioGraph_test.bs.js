// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/bs-jest/src/jest.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";
import * as Belt_SetString from "bs-platform/lib/es6/belt_SetString.js";
import * as AudioGraph$Gayer from "../src/AudioGraph.bs.js";

var g = /* record */[
  /* nodes */Belt_MapString.empty,
  /* edges */Belt_MapString.empty
];

var n1 = ('n1');

var n2 = ('n2');

var g1_000 = /* nodes */Belt_MapString.fromArray(/* array */[/* tuple */[
        "0",
        n1
      ]]);

var g1 = /* record */[
  g1_000,
  /* edges */Belt_MapString.empty
];

var g2_000 = /* nodes */Belt_MapString.fromArray(/* array */[
      /* tuple */[
        "0",
        n1
      ],
      /* tuple */[
        "1",
        n2
      ]
    ]);

var g2 = /* record */[
  g2_000,
  /* edges */Belt_MapString.empty
];

var g2withEdge_000 = g2_000;

var g2withEdge_001 = /* edges */Belt_MapString.fromArray(/* array */[/* tuple */[
        "0",
        Belt_SetString.fromArray(/* array */["1"])
      ]]);

var g2withEdge = /* record */[
  g2withEdge_000,
  g2withEdge_001
];

describe("addNode", (function () {
        Jest.test("adds to empty graph", (function () {
                return Jest.Expect[/* toEqual */12](g1, Jest.Expect[/* expect */0](AudioGraph$Gayer.addNode(g, /* tuple */[
                                    "0",
                                    n1
                                  ])));
              }));
        return Jest.test("adding same ID is idempotent", (function () {
                      return Jest.Expect[/* toEqual */12](g1, Jest.Expect[/* expect */0](AudioGraph$Gayer.addNode(g1, /* tuple */[
                                          "0",
                                          n1
                                        ])));
                    }));
      }));

describe("removeNode", (function () {
        Jest.test("does nothing if node is absent", (function () {
                return Jest.Expect[/* toEqual */12](g, Jest.Expect[/* expect */0](AudioGraph$Gayer.removeNode(g, "0")));
              }));
        return Jest.test("removes a node by ID", (function () {
                      return Jest.Expect[/* toEqual */12](g, Jest.Expect[/* expect */0](AudioGraph$Gayer.removeNode(g1, "0")));
                    }));
      }));

describe("addEdge", (function () {
        Jest.test("connects two nodes", (function () {
                return Jest.Expect[/* toEqual */12](g2withEdge, Jest.Expect[/* expect */0](AudioGraph$Gayer.addEdge(g2, /* tuple */[
                                    "0",
                                    "1"
                                  ])));
              }));
        return Jest.test("adding same edge is idempotent", (function () {
                      return Jest.Expect[/* toEqual */12](g2withEdge, Jest.Expect[/* expect */0](AudioGraph$Gayer.addEdge(g2withEdge, /* tuple */[
                                          "0",
                                          "1"
                                        ])));
                    }));
      }));

describe("removeEdge", (function () {
        Jest.test("does nothing if edge is absent", (function () {
                return Jest.Expect[/* toEqual */12](g2, Jest.Expect[/* expect */0](AudioGraph$Gayer.removeEdge(g2, /* tuple */[
                                    "0",
                                    "1"
                                  ])));
              }));
        return Jest.test("removes an edge by source and target IDs", (function () {
                      return Jest.Expect[/* toEqual */12](g2, Jest.Expect[/* expect */0](AudioGraph$Gayer.removeEdge(g2withEdge, /* tuple */[
                                          "0",
                                          "1"
                                        ])));
                    }));
      }));

export {
  g ,
  n1 ,
  n2 ,
  g1 ,
  g2 ,
  g2withEdge ,
  
}
/* n1 Not a pure module */
